{
  "RadioGroup": {
    "prefix": "radioGroup",
    "description": "Wrap a group of Radio Buttons to automatically control their selection",
    "body": [
      "<RadioGroup initialValue={currentValue$1} onValueChange={onValueChange$2}>",
      "  <RadioButton value={'yes'$3} label={'Yes'$4}/>",
      "  <RadioButton value={'no'$5} label={'No'$6}/>",
      "</RadioGroup>"
    ]
  },
  "SectionsWheelPicker": {
    "prefix": "sectionsWheelPicker",
    "description": "SectionsWheelPicker component for presenting set of WheelPickers",
    "body": ["<SectionsWheelPicker sections={sections$1}/>"]
  },
  "Gradient": {
    "prefix": "gradient",
    "description": "Gradient Component",
    "body": ["<Gradient color={Colors.green30$1} numberOfSteps={4$2}/>"]
  },
  "Hint": {
    "prefix": "hint",
    "description": "Hint component for displaying a tooltip over wrapped component",
    "body": [
      "<Hint visible={isVisible$1} message={'Message goes here'$2} color={Colors.red30$3} onBackgroundPress={() => setVisible(false)$4}>",
      "  <Text>Text to hint</Text>",
      "</Hint>"
    ]
  },
  "FeatureHighlight": {
    "prefix": "featureHighlight",
    "description": "Component for feature discovery",
    "body": [
      "<FeatureHighlight",
      " visible={isVisible$1}",
      " title={'Title'$2}",
      " message={'Message goes here'$3}",
      " getTarget={targets[currentTarget]$4}",
      " confirmButtonProps={{label: 'Got It', onPress: () => console.log('confirmed')}$5}",
      " onBackgroundPress={() => console.log('background pressed')$6}",
      "/>"
    ]
  },
  "Drawer": {
    "prefix": "drawer",
    "description": "Drawer Component",
    "body": [
      "<Drawer",
      "  rightItems={[{text: 'Read', background: Colors.blue30, onPress: () => console.log('read pressed')}]$1}",
      "  leftItem={{text: 'Delete', background: Colors.red30, onPress: () => console.log('delete pressed')}$2}",
      ">",
      "  <View centerV padding-s4 bg-white style={{height: 60}}>",
      "    <Text text70>Item</Text>",
      "  </View>",
      "</Drawer>"
    ]
  },
  "ActionSheet": {
    "prefix": "actionSheet",
    "description": "Cross platform Action Sheet, with a support for native iOS solutions",
    "body": [
      "<ActionSheet",
      " title={'Title'$1}",
      " message={'Message goes here'$2}",
      " cancelButtonIndex={3$3}",
      " destructiveButtonIndex={0$4}",
      " options={[",
      "  {label: '$5', onPress: $6},",
      "  {label: '$7', onPress: $8},",
      "  {label: 'Cancel'$9, onPress: () => console.log('cancel')$10}",
      " ]}",
      "/>"
    ]
  },
  "Card.Image": {
    "prefix": "card.Image",
    "description": "Inner component for the Card component (better be a direct child)",
    "body": [
      "<Card.Image source={{uri: 'https://github.com/wix/react-native-ui-lib/blob/master/demo/src/assets/images/card-example.jpg'$1}} height={115$2}/>"
    ]
  },
  "Card.Section": {
    "prefix": "card.Section",
    "description": "Inner component for rendering content easily inside a Card component",
    "body": [
      "<Card.Section",
      " content={[{text: 'Card content here', text70: true, grey10: true}]$1}",
      " contentStyle={{alignItems: 'center'}$2}",
      "/>"
    ]
  },
  "Card": {
    "prefix": "card",
    "description": "Customizable card component that handles press events",
    "body": [
      "<Card flex center onPress={() => console.log('pressed')}$1>",
      " <Card.Image source={{uri: 'https://github.com/wix/react-native-ui-lib/blob/master/demo/src/assets/images/card-example.jpg'$2}}/>",
      "</Card>"
    ]
  },
  "SortableList": {
    "prefix": "sortableList",
    "description": "A sortable list component",
    "body": [
      "<SortableList",
      "  data={data$1}",
      "  onOrderChange={onOrderChange$2}",
      "  renderItem={renderItem$3}",
      "  keyExtractor={keyExtractor$4}",
      "/>"
    ]
  },
  "RadioButton": {
    "prefix": "radioButton",
    "description": "A Radio Button component, should be wrapped with a RadioGroup",
    "body": ["<RadioButton value={null$1} label={'Default'$2}/>"]
  },
  "SkeletonView": {
    "prefix": "skeletonView",
    "description": "Allows showing a temporary skeleton view while your real view is loading",
    "body": [
      "<SkeletonView",
      "  template={SkeletonView.templates.LIST_ITEM$1}",
      "  showContent={isAvailable$2}",
      "  renderContent={<ListItem><Text grey10 text60 marginL-10>The item</Text></ListItem>$3}",
      "  times={10$4}",
      "/>"
    ]
  },
  "ConnectionStatusBar": {
    "prefix": "connectionStatusBar",
    "description": "Top bar to show a 'no internet' connection status",
    "body": ["<ConnectionStatusBar onConnectionChange={() => console.log('connection changed')$1}/>"]
  },
  "Picker.Item": {
    "prefix": "picker.Item",
    "description": "Picker.Item, for configuring the Picker's selectable options",
    "body": ["<Picker.Item key={index$1} value={item$2}/>"]
  },
  "Picker": {
    "prefix": "picker",
    "description": "Picker Component, support single or multiple selection, blurModel and native wheel picker",
    "body": [
      "<Picker",
      "  value={currentValue$1}",
      "  placeholder={'Placeholder'$2}",
      "  onChange={() => console.log('changed')$3}",
      ">",
      "  {_.map(items, item => (",
      "   return renderItem(item, index);",
      "  ))$4}",
      "</Picker>"
    ]
  },
  "SortableGridList": {
    "prefix": "sortableGridList",
    "description": "An sortable grid list (based on GridList component)",
    "body": [
      "<SortableGridList>",
      "  data={items$1}",
      "  maxItemWidth={140$2}",
      "  itemSpacing={Spacings.s3$3}",
      "  listPadding={Spacings.s5}",
      "  onOrderChange={onOrderChange$4}",
      "/>"
    ]
  },
  "FloatingButton": {
    "prefix": "floatingButton",
    "description": "Hovering button with gradient background",
    "body": [
      "<FloatingButton visible={isVisible$1} button={{label: 'Approve', onPress: () => console.log('approved')}}$2}/>"
    ]
  },
  "MaskedInput": {
    "prefix": "maskedInput",
    "description": "Mask Input to create custom looking inputs with custom formats",
    "body": ["<MaskedInput ref={inputRef$1} renderMaskedText={<Text text80 grey60>{value}$</Text>$2}/>"]
  },
  "Chip": {
    "prefix": "chip",
    "description": "Chip component",
    "body": ["<Chip label={'Chip'$1} onPress={() => console.log('pressed')$2}/>"]
  },
  "Wizard.Step": {
    "prefix": "wizard.Step",
    "description": "A wizard presents a series of steps in  prescribed order. That the user needs to complete in order to accomplish a goal (e.g. purchase a product)",
    "body": ["<Wizard.Step state={Wizard.States.ENABLED$1} label={'Label'$2}/>"]
  },
  "Wizard": {
    "prefix": "wizard",
    "description": "A wizard presents a series of steps in  prescribed order. That the user needs to complete in order to accomplish a goal (e.g. purchase a product)",
    "body": [
      "<Wizard activeIndex={0$1} onActiveIndexChanged={() => console.log('changed')$2}>",
      "  {_.map(items, item => (",
      "   return renderItem(item, index);",
      "  ))$3}",
      "</Wizard>"
    ]
  },
  "ColorPalette": {
    "prefix": "colorPalette",
    "description": "A component for displaying a color palette",
    "body": [
      "<ColorPalette",
      " colors={['transparent', Colors.green30, Colors.yellow30, Colors.red30]$1}",
      " value={selectedColor$2}",
      " onValueChange={() => console.log('value changed')$3}",
      "/>"
    ]
  },
  "Checkbox": {
    "prefix": "checkbox",
    "description": "Checkbox component for toggling boolean value related to some context",
    "body": ["<Checkbox value={false$1} onValueChange={() => console.log('value changed')$2}/>"]
  },
  "Slider": {
    "prefix": "slider",
    "description": "A Slider component",
    "body": [
      "<Slider",
      "  value={0$1}",
      "  minimumValue={0$2}",
      "  maximumValue={10$3}",
      "  onValueChange={() => console.log('value changed')$4}",
      "/>"
    ]
  },
  "StackAggregator": {
    "prefix": "stackAggregator",
    "description": "Stack aggregator component",
    "body": [
      "<StackAggregator",
      " onItemPress={() => console.log('pressed')$1}",
      ">",
      "  {_.map(items, (item, index) => {",
      "    return renderItem(item, index);",
      "  })$2}",
      "</StackAggregator>"
    ]
  },
  "Stepper": {"prefix": "stepper", "description": "A stepper component", "body": ["<Stepper$1/>"]},
  "ProgressiveImage": {
    "prefix": "progressiveImage",
    "description": "Image component that loads first a small thumbnail of the images, and fades-in the full-sized image with animation once it's loaded",
    "body": [
      "<ProgressiveImage",
      "  source={{uri: $1, cache: 'reload'}}",
      "  thumbnailSource={{uri: $2, cache: 'reload'}}",
      "/>"
    ]
  },
  "Marquee": {
    "prefix": "marquee",
    "description": "Marquee component for sliding text",
    "body": [
      "<Marquee",
      "  key={`${index}`$1}",
      "  label={'Hey there'$2}",
      "  direction={directionHorizontal ? MarqueeDirections.LEFT : MarqueeDirections.RIGHT$3}",
      "  duration={duration$4}",
      "  numberOfReps={numOfReps$5}",
      "  containerStyle={styles.containerStyle$6}",
      "/>"
    ]
  },
  "ProgressBar": {
    "prefix": "progressBar",
    "description": "Progress bar",
    "body": ["<ProgressBar progress={55$1} progressColor={Colors.red30$2}/>"]
  },
  "Carousel": {
    "prefix": "carousel",
    "description": "Carousel for scrolling pages",
    "body": [
      "<Carousel onChangePage={() => console.log('page changed')$1}>",
      " {_.map(items, item => (",
      "  return renderItem(item, index);",
      " ))$2}",
      "</Carousel>"
    ]
  },
  "Image": {
    "prefix": "image",
    "description": "Image wrapper with extra functionality like source transform and assets support",
    "body": [
      "<Image source={{uri: 'https://github.com/wix/react-native-ui-lib/blob/master/demo/src/assets/images/card-example.jpg'}$1}/>"
    ]
  },
  "ListItem": {
    "prefix": "listItem",
    "description": "List item component to render inside a List component",
    "body": [
      "<ListItem onPress={() => console.log('pressed')$1}>",
      " <Text grey10 text60 marginL-10>The item</Text>$2",
      "</ListItem>"
    ]
  },
  "ListItem.Part": {
    "prefix": "listItem.Part",
    "description": "A sub ListItem component for layout-ing inside a ListItem",
    "body": ["<ListItem.Part middle$1>", " <Text grey10 text60 marginL-10>The item</Text>$2", "</ListItem.Part>"]
  },
  "Dialog": {
    "prefix": "dialog",
    "description": "Component for displaying custom content inside a popup dialog",
    "body": [
      "<Dialog",
      "  visible={isVisible$1}",
      "  onDismiss={() => console.log('dismissed')$2}",
      "  panDirection={PanningProvider.Directions.DOWN$3}",
      ">",
      "  <Text text60>Content</Text>$4",
      "</Dialog>"
    ]
  },
  "GridList": {
    "prefix": "gridList",
    "description": "An auto-generated grid list that calculate item size according to given props",
    "body": [
      "<GridList>",
      " data={items$1}",
      " maxItemWidth={140$2}",
      " numColumns={2$3}",
      " itemSpacing={Spacings.s3$4}",
      " listPadding={Spacings.s5$5}",
      "/>"
    ]
  },
  "GridView": {
    "prefix": "gridView",
    "description": "An auto-generated grid view that calculate item size according to given props",
    "body": [
      "<GridView",
      " items={[{title: 'item 1', onPress: () => console.log('item 1 pressed')}, {title: 'item 2', onPress: () => console.log('item 2 pressed')}]$1}",
      " numColumns={2$2}",
      " lastItemLabel={'+'$3}",
      " lastItemOverlayColor={'Colors.rgba(Colors.blue30)'$4}",
      "/>"
    ]
  },
  "Button": {
    "prefix": "button",
    "description": "Customizable button component that handles press events",
    "body": ["<Button label={'Press'$1} size={Button.sizes.medium$2} backgroundColor={Colors.red30$3}/>"]
  },
  "AnimatedScanner": {
    "prefix": "animatedScanner",
    "description": "description",
    "body": ["<AnimatedScanner progress={55$1} duration={1600$2}/>"]
  },
  "AnimatedImage": {
    "prefix": "animatedImage",
    "description": "Image component that fades-in the image with animation once it's loaded",
    "body": [
      "<AnimatedImage source={{uri: 'https://github.com/wix/react-native-ui-lib/blob/master/demo/src/assets/images/card-example.jpg'$1}}/>"
    ]
  },
  "SegmentedControl": {
    "prefix": "segmentedControl",
    "description": "SegmentedControl component for toggling two values or more",
    "body": ["<SegmentedControl segments={[{label: '1st'}, {label: '2nd'}]$1}/>"]
  },
  "ColorSwatch": {
    "prefix": "colorSwatch",
    "description": "A color swatch component",
    "body": ["<ColorSwatch color={Colors.red30$1} selected={true$2} onPress={() => console.log('pressed')$3}/>"]
  },
  "TouchableOpacity": {
    "prefix": "touchableOpacity",
    "description": "A wrapper for TouchableOpacity component. Support onPress, throttling and activeBackgroundColor",
    "body": ["<TouchableOpacity onPress={() => console.log('pressed')$1}/>"]
  },
  "StateScreen": {
    "prefix": "stateScreen",
    "description": "Component that shows a full screen for a certain state, like an empty state",
    "body": [
      "<StateScreen",
      "  title={'Title'$1}",
      "  subtitle={'Subtitle'$2}",
      "  ctaLabel={'Done'$3}",
      "  imageSource={source$4}",
      "/>"
    ]
  },
  "Avatar": {
    "prefix": "avatar",
    "description": "Avatar component for displaying user profile images",
    "body": [
      "<Avatar source={{uri: 'https://lh3.googleusercontent.com/-cw77lUnOvmI/AAAAAAAAAAI/AAAAAAAAAAA/WMNck32dKbc/s181-c/104220521160525129167.jpg'$1}} label={IT$2}/>"
    ]
  },
  "ColorPicker": {
    "prefix": "colorPicker",
    "description": "A picker component for color selection",
    "body": [
      "<ColorPicker",
      " colors={[Colors.green10, Colors.green20, Colors.green30, Colors.green40, Colors.green50, Colors.green60, Colors.green70]$1}",
      " initialColor={Colors.green10$2}",
      " value={currentColor$3}",
      " onDismiss={() => console.log('dismissed')$4}",
      " onSubmit={() => console.log('submit')$5}",
      " onValueChange={() => console.log('value changed')$6}",
      "/>"
    ]
  },
  "Fader": {
    "prefix": "fader",
    "description": "A gradient fading overlay to render on top of overflowing content (like scroll component)",
    "body": ["<Fader visible={isVisible$1} position={Fader.position.BOTTOM$2}/>"]
  },
  "Switch": {
    "prefix": "switch",
    "description": "Switch component for toggling boolean value related to some context",
    "body": ["<Switch value={false$1} onValueChange={() => console.log('value changed')$2}/>"]
  },
  "DateTimePicker": {
    "prefix": "dateTimePicker",
    "description": "Date and Time Picker Component that wraps RNDateTimePicker for date and time modes. See: https://github.com/react-native-community/react-native-datetimepicker#react-native-datetimepicker",
    "body": ["<DateTimePicker title={'Select time'$1} placeholder={'Placeholder'$2} mode={'time'$3}/>"]
  },
  "LoaderScreen": {
    "prefix": "loaderScreen",
    "description": "Component that shows a full screen with an activity indicator",
    "body": ["<LoaderScreen message={'Message goes here'$1} color={Colors.grey40$2}/>"]
  },
  "Dash": {
    "prefix": "dash",
    "description": "Dashed line Component",
    "body": ["<Dash vertical$1 style={styles.dash$2}/>"]
  },
  "ActionBar": {
    "prefix": "actionBar",
    "description": "Quick actions bar, each action support Button component props",
    "body": [
      "<ActionBar",
      "  actions={[",
      "    {label: 'Delete'$1, onPress: () => console.log('delete')$2},",
      "    {label: $3, onPress: $4},",
      "    {label: $5, onPress: $6}",
      "  ]}",
      "/>"
    ]
  },
  "NumberInput": {
    "prefix": "numberInput",
    "description": "Number Input to create an input with a formatted number",
    "body": ["<NumberInput initialValue={1506$1} onChange={onChange$2} placeholder={'Price$3'}/>"]
  },
  "Text": {
    "prefix": "text",
    "description": "A wrapper for Text component with extra functionality like modifiers support",
    "body": ["<Text text30$1>Text goes here$2</Text>"]
  },
  "Icon": {
    "prefix": "icon",
    "description": "Icon component",
    "body": [
      "<Icon source={{uri: 'https://github.com/wix/react-native-ui-lib/blob/master/demo/src/assets/icons/delete.png'}$1} size={24$2} tintColor={Colors.grey40$3}/>"
    ]
  },
  "ChipsInput": {
    "prefix": "chipsInput",
    "description": "A chips input",
    "body": [
      "<ChipsInput",
      "  placeholder={'Placeholder'$1}",
      "  chips={[{label: 'Falcon 9'}, {label: 'Enterprise'}, {label: 'Challenger', borderRadius: 0}]$2}",
      "/>"
    ]
  },
  "Modal.TopBar": {
    "prefix": "modal.TopBar",
    "description": "Modal.TopBar, inner component for configuring the Modal component's title, buttons and statusBar",
    "body": [
      "<Modal.TopBar",
      " title={'Title'$1}",
      " onCancel={() => console.log('cancel')$2}",
      " onDone={() => console.log('done')$3}",
      "/>"
    ]
  },
  "Modal": {
    "prefix": "modal",
    "description": "Component that present content on top of the invoking screen",
    "body": [
      "<Modal visible={isVisible$1} onBackgroundPress={() => console.log('background pressed')$3}>",
      " <Text text60>Content</Text>$4",
      "</Modal>"
    ]
  },
  "ExpandableSection": {
    "prefix": "expandableSection",
    "description": "Component to render expanded section below or above the SectionHeader",
    "body": [
      "<ExpandableSection",
      " top$1",
      " expanded={false$2}",
      " sectionHeader={<Text grey10 text60>The section header</Text>$3}",
      " onPress={() => console.log('pressed')$4}",
      ">"
    ]
  },
  "GridListItem": {
    "prefix": "gridListItem",
    "description": "A single grid view/list item component",
    "body": [
      "<GridListItem key={index$1} title={'Title'$2} subtitle={'Subtitle'$3} description={'Description goes here'$4}/>"
    ]
  },
  "PageControl": {
    "prefix": "pageControl",
    "description": "Page indicator, typically used in paged scroll-views",
    "body": ["<PageControl numOfPages={5$1} currentPage={0$2}/>"]
  },
  "Overlay": {
    "prefix": "overlay",
    "description": "Overlay view with types",
    "body": [
      "<Image",
      " source={{uri: 'https://github.com/wix/react-native-ui-lib/blob/master/demo/src/assets/images/card-example.jpg'}$1}",
      " overlayType={Image.overlayTypes.BOTTOM$2}",
      "/>"
    ]
  },
  "Timeline": {
    "prefix": "timeline",
    "description": "A timeline item to render as part of a timeline list",
    "body": [
      "<Timeline ",
      "  renderContent={$1}",
      "  state={Timeline.states.NEXT$2}/>",
      "  topLine={{",
      "    state: Timeline.states.ERROR",
      "  }$3}",
      "  bottomLine={{",
      "    type: Timeline.lineTypes.DASHED,",
      "    color: Colors.orange40",
      "  }$4}",
      "  point={{",
      "    type: Timeline.pointTypes.OUTLINE,",
      "    color: Colors.orange40,",
      "    icon: Assets.icons.demo.camera,",
      "    targetContainerRef: targetContainer,",
      "    alignmentTargetRef: target",
      "  }$5}",
      "/>"
    ]
  },
  "TabController.TabPage": {
    "prefix": "tabController.TabPage",
    "description": "TabController's TabPage component",
    "body": ["<TabController.TabPage key={'key1'$1} lazy$2 index={index$3}>"]
  },
  "TabController": {
    "prefix": "tabController",
    "description": "A performant solution for a tab controller with lazy load mechanism",
    "body": [
      "<TabController items={[{label: 'First'}, {label: 'Second'}, {label: 'Third'}]$1}>",
      "  <TabController.TabBar enableShadows$2/>",
      "  <View flex>",
      "    <TabController.TabPage index={0}>{renderFirstPage()}</TabController.TabPage>",
      "    <TabController.TabPage index={1} lazy>{renderSecondPage()}</TabController.TabPage>",
      "    <TabController.TabPage index={2} lazy>{renderThirdPage()}</TabController.TabPage>",
      "  </View>",
      "</TabController>"
    ]
  },
  "TabController.TabBar": {
    "prefix": "tabController.TabBar",
    "description": "TabController's TabBar component",
    "body": ["<TabController.TabBar activeBackgroundColor={Colors.blue30$1}/>"]
  },
  "TabController.PageCarousel": {
    "prefix": "tabController.PageCarousel",
    "description": "TabController's PageCarousel component",
    "body": [
      "<TabController.PageCarousel>",
      "  {_.map(items, (item, key) => {",
      "   return ($1);",
      "  })}",
      "</TabController.PageCarousel>"
    ]
  },
  "TabController.TabBarItem": {
    "prefix": "tabController.TabBarItem",
    "description": "TabController's TabBarItem component",
    "body": ["<TabBarItem label={'Item'$1}/>"]
  },
  "Badge": {
    "prefix": "badge",
    "description": "Round colored badge, typically used to show a number",
    "body": ["<Badge label={'999'$1} size={16$2}/>"]
  },
  "Toast": {
    "prefix": "toast",
    "description": "A toast component for displaying non-disruptive messages to the user",
    "body": [
      "<Toast",
      "  visible={isVisible$1}",
      "  position={'top'$2}",
      "  autoDismiss={5000$2}",
      "  onDismiss={onDismiss$3}",
      ">"
    ]
  },
  "TextField": {
    "prefix": "textField",
    "description": "An enhanced customizable TextField with validation support",
    "body": [
      "<TextField",
      "  placeholder={'Placeholder'$1}",
      "  floatingPlaceholder$2",
      "  onChangeText={onChangeText$3}",
      "  enableErrors$4",
      "  validate={['required', 'email', (value) => value.length > 6]$5}",
      "  validationMessage={['Field is required', 'Email is invalid', 'Password is too short']$6}",
      "  showCharCounter$7",
      "  maxLength={30$8}",
      "/>"
    ]
  },
  "Dialog.Header": {
    "prefix": "dialog.Header",
    "description": "Component for displaying the header of a popup dialog",
    "body": ["<Dialog.Header title={'Title'$1} subtitle={'Subtitle'$2} trailingAccessory={renderAccessory$3}/>"]
  },
  "WheelPicker": {
    "prefix": "wheelPicker",
    "description": "A customizable WheelPicker component",
    "body": [
      "<WheelPicker",
      "  items={[{label: 'Yes', value: 'yes'}, {label: 'No', value: 'no'}, {label: 'Maybe', value: 'maybe'}]$1}",
      "  initialValue={'yes'$2}",
      "  onChange={() => console.log('changed')$3}",
      "/>"
    ]
  },
  "RNUilibImport": {
    "prefix": "rnuilib",
    "description": "Import react-native-ui-lib",
    "body": ["import {$1} from 'react-native-ui-lib';"]
  }
}
