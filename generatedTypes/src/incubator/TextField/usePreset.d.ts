/// <reference types="react" />
import { InternalTextFieldProps } from './index';
export default function usePreset({ preset, ...props }: InternalTextFieldProps): {
    [key: string]: boolean;
    margin?: boolean | undefined;
    marginL?: boolean | undefined;
    marginT?: boolean | undefined;
    marginR?: boolean | undefined;
    marginB?: boolean | undefined;
    marginH?: boolean | undefined;
    marginV?: boolean | undefined;
    padding?: boolean | undefined;
    paddingL?: boolean | undefined;
    paddingT?: boolean | undefined;
    paddingR?: boolean | undefined;
    paddingB?: boolean | undefined;
    paddingH?: boolean | undefined;
    paddingV?: boolean | undefined;
    hint?: string | undefined;
    color?: import("./types").ColorType | undefined;
    placeholderTextColor?: import("./types").ColorType | undefined;
    style?: import("react-native").StyleProp<import("react-native").TextStyle>;
    testID?: string | undefined;
    removeClippedSubviews?: boolean | undefined;
    onLayout?: ((event: import("react-native").LayoutChangeEvent) => void) | undefined;
    onContentSizeChange?: ((e: import("react-native").NativeSyntheticEvent<import("react-native").TextInputContentSizeChangeEventData>) => void) | undefined;
    onScroll?: ((e: import("react-native").NativeSyntheticEvent<import("react-native").TextInputScrollEventData>) => void) | undefined;
    scrollEnabled?: boolean | undefined;
    hitSlop?: import("react-native").Insets | undefined;
    pointerEvents?: "auto" | "none" | "box-none" | "box-only" | undefined;
    nativeID?: string | undefined;
    collapsable?: boolean | undefined;
    needsOffscreenAlphaCompositing?: boolean | undefined;
    renderToHardwareTextureAndroid?: boolean | undefined;
    focusable?: boolean | undefined;
    shouldRasterizeIOS?: boolean | undefined;
    isTVSelectable?: boolean | undefined;
    hasTVPreferredFocus?: boolean | undefined;
    tvParallaxProperties?: import("react-native").TVParallaxProperties | undefined;
    tvParallaxShiftDistanceX?: number | undefined;
    tvParallaxShiftDistanceY?: number | undefined;
    tvParallaxTiltAngle?: number | undefined;
    tvParallaxMagnification?: number | undefined;
    onStartShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
    onMoveShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
    onResponderEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onResponderGrant?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onResponderReject?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onResponderMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onResponderRelease?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onResponderStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onResponderTerminationRequest?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
    onResponderTerminate?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onStartShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
    onMoveShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
    onTouchStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onTouchMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onTouchEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onTouchCancel?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onTouchEndCapture?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    accessible?: boolean | undefined;
    accessibilityActions?: readonly Readonly<{
        name: string;
        label?: string | undefined;
    }>[] | undefined;
    accessibilityLabel?: string | undefined;
    accessibilityRole?: import("react-native").AccessibilityRole | undefined;
    accessibilityState?: import("react-native").AccessibilityState | undefined;
    accessibilityHint?: string | undefined;
    accessibilityValue?: import("react-native").AccessibilityValue | undefined;
    onAccessibilityAction?: ((event: import("react-native").AccessibilityActionEvent) => void) | undefined;
    accessibilityLiveRegion?: "none" | "polite" | "assertive" | undefined;
    importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | undefined;
    accessibilityElementsHidden?: boolean | undefined;
    accessibilityViewIsModal?: boolean | undefined;
    onAccessibilityEscape?: (() => void) | undefined;
    onAccessibilityTap?: (() => void) | undefined;
    onMagicTap?: (() => void) | undefined;
    accessibilityIgnoresInvertColors?: boolean | undefined;
    onBlur?: ((e: import("react-native").NativeSyntheticEvent<import("react-native").TextInputFocusEventData>) => void) | undefined;
    onFocus?: ((e: import("react-native").NativeSyntheticEvent<import("react-native").TextInputFocusEventData>) => void) | undefined;
    onPressIn?: ((e: import("react-native").NativeSyntheticEvent<import("react-native").NativeTouchEvent>) => void) | undefined;
    onPressOut?: ((e: import("react-native").NativeSyntheticEvent<import("react-native").NativeTouchEvent>) => void) | undefined;
    allowFontScaling?: boolean | undefined;
    numberOfLines?: number | undefined;
    maxFontSizeMultiplier?: number | null | undefined;
    selectionColor?: import("react-native").ColorValue | undefined;
    textBreakStrategy?: "simple" | "highQuality" | "balanced" | undefined;
    textAlign?: "left" | "right" | "center" | undefined;
    textAlignVertical?: "auto" | "center" | "top" | "bottom" | undefined;
    value?: string | undefined;
    autoCapitalize?: "none" | "characters" | "sentences" | "words" | undefined;
    autoCorrect?: boolean | undefined;
    autoFocus?: boolean | undefined;
    blurOnSubmit?: boolean | undefined;
    caretHidden?: boolean | undefined;
    contextMenuHidden?: boolean | undefined;
    defaultValue?: string | undefined;
    editable?: boolean | undefined;
    keyboardType?: import("react-native").KeyboardTypeOptions | undefined;
    maxLength?: number | undefined;
    multiline?: boolean | undefined;
    onChange?: ((e: import("react-native").NativeSyntheticEvent<import("react-native").TextInputChangeEventData>) => void) | undefined;
    onChangeText?: ((text: string) => void) | undefined;
    onEndEditing?: ((e: import("react-native").NativeSyntheticEvent<import("react-native").TextInputEndEditingEventData>) => void) | undefined;
    onSelectionChange?: ((e: import("react-native").NativeSyntheticEvent<import("react-native").TextInputSelectionChangeEventData>) => void) | undefined;
    onSubmitEditing?: ((e: import("react-native").NativeSyntheticEvent<import("react-native").TextInputSubmitEditingEventData>) => void) | undefined;
    onTextInput?: ((e: import("react-native").NativeSyntheticEvent<import("react-native").TextInputTextInputEventData>) => void) | undefined;
    onKeyPress?: ((e: import("react-native").NativeSyntheticEvent<import("react-native").TextInputKeyPressEventData>) => void) | undefined;
    placeholder?: string | undefined;
    returnKeyType?: import("react-native").ReturnKeyTypeOptions | undefined;
    secureTextEntry?: boolean | undefined;
    selectTextOnFocus?: boolean | undefined;
    selection?: {
        start: number;
        end?: number | undefined;
    } | undefined;
    inputAccessoryViewID?: string | undefined;
    clearButtonMode?: "always" | "never" | "while-editing" | "unless-editing" | undefined;
    clearTextOnFocus?: boolean | undefined;
    dataDetectorTypes?: import("react-native").DataDetectorTypes | import("react-native").DataDetectorTypes[] | undefined;
    enablesReturnKeyAutomatically?: boolean | undefined;
    keyboardAppearance?: "default" | "light" | "dark" | undefined;
    passwordRules?: string | null | undefined;
    rejectResponderTermination?: boolean | null | undefined;
    selectionState?: import("react-native").DocumentSelectionState | undefined;
    spellCheck?: boolean | undefined;
    textContentType?: "none" | "name" | "password" | "username" | "URL" | "addressCity" | "addressCityAndState" | "addressState" | "countryName" | "creditCardNumber" | "emailAddress" | "familyName" | "fullStreetAddress" | "givenName" | "jobTitle" | "location" | "middleName" | "namePrefix" | "nameSuffix" | "nickname" | "organizationName" | "postalCode" | "streetAddressLine1" | "streetAddressLine2" | "sublocality" | "telephoneNumber" | "newPassword" | "oneTimeCode" | undefined;
    autoCompleteType?: "name" | "password" | "username" | "email" | "off" | "cc-csc" | "cc-exp" | "cc-exp-month" | "cc-exp-year" | "cc-number" | "postal-code" | "street-address" | "tel" | undefined;
    importantForAutofill?: "auto" | "yes" | "no" | "noExcludeDescendants" | "yesExcludeDescendants" | undefined;
    disableFullscreenUI?: boolean | undefined;
    inlineImageLeft?: string | undefined;
    inlineImagePadding?: number | undefined;
    returnKeyLabel?: string | undefined;
    underlineColorAndroid?: import("react-native").ColorValue | undefined;
    showSoftInputOnFocus?: boolean | undefined;
    ref?: import("react").Ref<import("react-native").TextInput> | undefined;
    key?: import("react").Key | null | undefined;
    label?: string | undefined;
    labelColor?: import("./types").ColorType | undefined;
    labelStyle?: import("react-native").TextStyle | undefined;
    labelProps?: import("../../components/text").TextProps | undefined;
    validationMessagePosition?: import("./types").ValidationMessagePosition | undefined;
    floatingPlaceholder?: boolean | undefined;
    floatingPlaceholderColor?: import("./types").ColorType | undefined;
    floatingPlaceholderStyle?: ((false | import("react-native").TextStyle | import("react-native").RegisteredStyle<import("react-native").TextStyle> | import("react-native").RecursiveArray<import("react-native").TextStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<import("react-native").TextStyle>> | null) & import("react-native").TextStyle) | undefined;
    floatOnFocus?: boolean | undefined;
    enableErrors?: boolean | undefined;
    validationMessage?: string | string[] | undefined;
    validationMessageStyle?: import("react-native").TextStyle | undefined;
    retainSpace?: boolean | undefined;
    validate?: import("./types").Validator | import("./types").Validator[] | undefined;
    showCharCounter?: boolean | undefined;
    charCounterStyle?: import("react-native").TextStyle | undefined;
    leadingAccessory?: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | undefined;
    trailingAccessory?: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | undefined;
    validateOnStart?: boolean | undefined;
    validateOnChange?: boolean | undefined;
    validateOnBlur?: boolean | undefined;
    onChangeValidity?: ((isValid: boolean) => void) | undefined;
    fieldStyle?: import("react-native").ViewStyle | ((context: import("./FieldContext").FieldContextType) => import("react-native").ViewStyle) | undefined;
    containerStyle?: import("react-native").ViewStyle | undefined;
    modifiers: import("../../commons/modifiers").ExtractedStyle;
    forwardedRef: any;
} | {
    margin?: boolean | undefined;
    marginL?: boolean | undefined;
    marginT?: boolean | undefined;
    marginR?: boolean | undefined;
    marginB?: boolean | undefined;
    marginH?: boolean | undefined;
    marginV?: boolean | undefined;
    padding?: boolean | undefined;
    paddingL?: boolean | undefined;
    paddingT?: boolean | undefined;
    paddingR?: boolean | undefined;
    paddingB?: boolean | undefined;
    paddingH?: boolean | undefined;
    paddingV?: boolean | undefined;
    text10?: boolean | undefined;
    text20?: boolean | undefined;
    text30?: boolean | undefined;
    text40?: boolean | undefined;
    text50?: boolean | undefined;
    text60?: boolean | undefined;
    text65?: boolean | undefined;
    text70?: boolean | undefined;
    text80?: boolean | undefined;
    text90?: boolean | undefined;
    text100?: boolean | undefined;
    text10T?: boolean | undefined;
    text10L?: boolean | undefined;
    text10R?: boolean | undefined;
    text10M?: boolean | undefined;
    text10BO?: boolean | undefined;
    text10H?: boolean | undefined;
    text10BL?: boolean | undefined;
    text20T?: boolean | undefined;
    text20L?: boolean | undefined;
    text20R?: boolean | undefined;
    text20M?: boolean | undefined;
    text20BO?: boolean | undefined;
    text20H?: boolean | undefined;
    text20BL?: boolean | undefined;
    text30T?: boolean | undefined;
    text30L?: boolean | undefined;
    text30R?: boolean | undefined;
    text30M?: boolean | undefined;
    text30BO?: boolean | undefined;
    text30H?: boolean | undefined;
    text30BL?: boolean | undefined;
    text40T?: boolean | undefined;
    text40L?: boolean | undefined;
    text40R?: boolean | undefined;
    text40M?: boolean | undefined;
    text40BO?: boolean | undefined;
    text40H?: boolean | undefined;
    text40BL?: boolean | undefined;
    text50T?: boolean | undefined;
    text50L?: boolean | undefined;
    text50R?: boolean | undefined;
    text50M?: boolean | undefined;
    text50BO?: boolean | undefined;
    text50H?: boolean | undefined;
    text50BL?: boolean | undefined;
    text60T?: boolean | undefined;
    text60L?: boolean | undefined;
    text60R?: boolean | undefined;
    text60M?: boolean | undefined;
    text60BO?: boolean | undefined;
    text60H?: boolean | undefined;
    text60BL?: boolean | undefined;
    text65T?: boolean | undefined;
    text65L?: boolean | undefined;
    text65R?: boolean | undefined;
    text65M?: boolean | undefined;
    text65BO?: boolean | undefined;
    text65H?: boolean | undefined;
    text65BL?: boolean | undefined;
    text70T?: boolean | undefined;
    text70L?: boolean | undefined;
    text70R?: boolean | undefined;
    text70M?: boolean | undefined;
    text70BO?: boolean | undefined;
    text70H?: boolean | undefined;
    text70BL?: boolean | undefined;
    text80T?: boolean | undefined;
    text80L?: boolean | undefined;
    text80R?: boolean | undefined;
    text80M?: boolean | undefined;
    text80BO?: boolean | undefined;
    text80H?: boolean | undefined;
    text80BL?: boolean | undefined;
    text90T?: boolean | undefined;
    text90L?: boolean | undefined;
    text90R?: boolean | undefined;
    text90M?: boolean | undefined;
    text90BO?: boolean | undefined;
    text90H?: boolean | undefined;
    text90BL?: boolean | undefined;
    text100T?: boolean | undefined;
    text100L?: boolean | undefined;
    text100R?: boolean | undefined;
    text100M?: boolean | undefined;
    text100BO?: boolean | undefined;
    text100H?: boolean | undefined;
    text100BL?: boolean | undefined;
    transparent?: boolean | undefined;
    black?: boolean | undefined;
    white?: boolean | undefined;
    dark10?: boolean | undefined;
    dark20?: boolean | undefined;
    dark30?: boolean | undefined;
    dark40?: boolean | undefined;
    dark50?: boolean | undefined;
    dark60?: boolean | undefined;
    dark70?: boolean | undefined;
    dark80?: boolean | undefined;
    grey10?: boolean | undefined;
    grey20?: boolean | undefined;
    grey30?: boolean | undefined;
    grey40?: boolean | undefined;
    grey50?: boolean | undefined;
    grey60?: boolean | undefined;
    grey70?: boolean | undefined;
    grey80?: boolean | undefined;
    blue10?: boolean | undefined;
    blue20?: boolean | undefined;
    blue30?: boolean | undefined;
    blue40?: boolean | undefined;
    blue50?: boolean | undefined;
    blue60?: boolean | undefined;
    blue70?: boolean | undefined;
    blue80?: boolean | undefined;
    cyan10?: boolean | undefined;
    cyan20?: boolean | undefined;
    cyan30?: boolean | undefined;
    cyan40?: boolean | undefined;
    cyan50?: boolean | undefined;
    cyan60?: boolean | undefined;
    cyan70?: boolean | undefined;
    cyan80?: boolean | undefined;
    green10?: boolean | undefined;
    green20?: boolean | undefined;
    green30?: boolean | undefined;
    green40?: boolean | undefined;
    green50?: boolean | undefined;
    green60?: boolean | undefined;
    green70?: boolean | undefined;
    green80?: boolean | undefined;
    yellow10?: boolean | undefined;
    yellow20?: boolean | undefined;
    yellow30?: boolean | undefined;
    yellow40?: boolean | undefined;
    yellow50?: boolean | undefined;
    yellow60?: boolean | undefined;
    yellow70?: boolean | undefined;
    yellow80?: boolean | undefined;
    orange10?: boolean | undefined;
    orange20?: boolean | undefined;
    orange30?: boolean | undefined;
    orange40?: boolean | undefined;
    orange50?: boolean | undefined;
    orange60?: boolean | undefined;
    orange70?: boolean | undefined;
    orange80?: boolean | undefined;
    red10?: boolean | undefined;
    red20?: boolean | undefined;
    red30?: boolean | undefined;
    red40?: boolean | undefined;
    red50?: boolean | undefined;
    red60?: boolean | undefined;
    red70?: boolean | undefined;
    red80?: boolean | undefined;
    purple10?: boolean | undefined;
    purple20?: boolean | undefined;
    purple30?: boolean | undefined;
    purple40?: boolean | undefined;
    purple50?: boolean | undefined;
    purple60?: boolean | undefined;
    purple70?: boolean | undefined;
    purple80?: boolean | undefined;
    violet10?: boolean | undefined;
    violet20?: boolean | undefined;
    violet30?: boolean | undefined;
    violet40?: boolean | undefined;
    violet50?: boolean | undefined;
    violet60?: boolean | undefined;
    violet70?: boolean | undefined;
    violet80?: boolean | undefined;
    hint?: string | undefined;
    color?: import("./types").ColorType | undefined;
    placeholderTextColor?: import("./types").ColorType | undefined;
    style?: import("react-native").StyleProp<import("react-native").TextStyle>;
    testID?: string | undefined;
    removeClippedSubviews?: boolean | undefined;
    onLayout?: ((event: import("react-native").LayoutChangeEvent) => void) | undefined;
    onContentSizeChange?: ((e: import("react-native").NativeSyntheticEvent<import("react-native").TextInputContentSizeChangeEventData>) => void) | undefined;
    onScroll?: ((e: import("react-native").NativeSyntheticEvent<import("react-native").TextInputScrollEventData>) => void) | undefined;
    scrollEnabled?: boolean | undefined;
    hitSlop?: import("react-native").Insets | undefined;
    pointerEvents?: "auto" | "none" | "box-none" | "box-only" | undefined;
    nativeID?: string | undefined;
    collapsable?: boolean | undefined;
    needsOffscreenAlphaCompositing?: boolean | undefined;
    renderToHardwareTextureAndroid?: boolean | undefined;
    focusable?: boolean | undefined;
    shouldRasterizeIOS?: boolean | undefined;
    isTVSelectable?: boolean | undefined;
    hasTVPreferredFocus?: boolean | undefined;
    tvParallaxProperties?: import("react-native").TVParallaxProperties | undefined;
    tvParallaxShiftDistanceX?: number | undefined;
    tvParallaxShiftDistanceY?: number | undefined;
    tvParallaxTiltAngle?: number | undefined;
    tvParallaxMagnification?: number | undefined;
    onStartShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
    onMoveShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
    onResponderEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onResponderGrant?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onResponderReject?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onResponderMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onResponderRelease?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onResponderStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onResponderTerminationRequest?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
    onResponderTerminate?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onStartShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
    onMoveShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
    onTouchStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onTouchMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onTouchEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onTouchCancel?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onTouchEndCapture?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    accessible?: boolean | undefined;
    accessibilityActions?: readonly Readonly<{
        name: string;
        label?: string | undefined;
    }>[] | undefined;
    accessibilityLabel?: string | undefined;
    accessibilityRole?: import("react-native").AccessibilityRole | undefined;
    accessibilityState?: import("react-native").AccessibilityState | undefined;
    accessibilityHint?: string | undefined;
    accessibilityValue?: import("react-native").AccessibilityValue | undefined;
    onAccessibilityAction?: ((event: import("react-native").AccessibilityActionEvent) => void) | undefined;
    accessibilityLiveRegion?: "none" | "polite" | "assertive" | undefined;
    importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | undefined;
    accessibilityElementsHidden?: boolean | undefined;
    accessibilityViewIsModal?: boolean | undefined;
    onAccessibilityEscape?: (() => void) | undefined;
    onAccessibilityTap?: (() => void) | undefined;
    onMagicTap?: (() => void) | undefined;
    accessibilityIgnoresInvertColors?: boolean | undefined;
    onBlur?: ((e: import("react-native").NativeSyntheticEvent<import("react-native").TextInputFocusEventData>) => void) | undefined;
    onFocus?: ((e: import("react-native").NativeSyntheticEvent<import("react-native").TextInputFocusEventData>) => void) | undefined;
    onPressIn?: ((e: import("react-native").NativeSyntheticEvent<import("react-native").NativeTouchEvent>) => void) | undefined;
    onPressOut?: ((e: import("react-native").NativeSyntheticEvent<import("react-native").NativeTouchEvent>) => void) | undefined;
    allowFontScaling?: boolean | undefined;
    numberOfLines?: number | undefined;
    maxFontSizeMultiplier?: number | null | undefined;
    selectionColor?: import("react-native").ColorValue | undefined;
    textBreakStrategy?: "simple" | "highQuality" | "balanced" | undefined;
    textAlign?: "left" | "right" | "center" | undefined;
    textAlignVertical?: "auto" | "center" | "top" | "bottom" | undefined;
    value?: string | undefined;
    autoCapitalize?: "none" | "characters" | "sentences" | "words" | undefined;
    autoCorrect?: boolean | undefined;
    autoFocus?: boolean | undefined;
    blurOnSubmit?: boolean | undefined;
    caretHidden?: boolean | undefined;
    contextMenuHidden?: boolean | undefined;
    defaultValue?: string | undefined;
    editable?: boolean | undefined;
    keyboardType?: import("react-native").KeyboardTypeOptions | undefined;
    maxLength?: number | undefined;
    multiline?: boolean | undefined;
    onChange?: ((e: import("react-native").NativeSyntheticEvent<import("react-native").TextInputChangeEventData>) => void) | undefined;
    onChangeText?: ((text: string) => void) | undefined;
    onEndEditing?: ((e: import("react-native").NativeSyntheticEvent<import("react-native").TextInputEndEditingEventData>) => void) | undefined;
    onSelectionChange?: ((e: import("react-native").NativeSyntheticEvent<import("react-native").TextInputSelectionChangeEventData>) => void) | undefined;
    onSubmitEditing?: ((e: import("react-native").NativeSyntheticEvent<import("react-native").TextInputSubmitEditingEventData>) => void) | undefined;
    onTextInput?: ((e: import("react-native").NativeSyntheticEvent<import("react-native").TextInputTextInputEventData>) => void) | undefined;
    onKeyPress?: ((e: import("react-native").NativeSyntheticEvent<import("react-native").TextInputKeyPressEventData>) => void) | undefined;
    placeholder?: string | undefined;
    returnKeyType?: import("react-native").ReturnKeyTypeOptions | undefined;
    secureTextEntry?: boolean | undefined;
    selectTextOnFocus?: boolean | undefined;
    selection?: {
        start: number;
        end?: number | undefined;
    } | undefined;
    inputAccessoryViewID?: string | undefined;
    clearButtonMode?: "always" | "never" | "while-editing" | "unless-editing" | undefined;
    clearTextOnFocus?: boolean | undefined;
    dataDetectorTypes?: import("react-native").DataDetectorTypes | import("react-native").DataDetectorTypes[] | undefined;
    enablesReturnKeyAutomatically?: boolean | undefined;
    keyboardAppearance?: "default" | "light" | "dark" | undefined;
    passwordRules?: string | null | undefined;
    rejectResponderTermination?: boolean | null | undefined;
    selectionState?: import("react-native").DocumentSelectionState | undefined;
    spellCheck?: boolean | undefined;
    textContentType?: "none" | "name" | "password" | "username" | "URL" | "addressCity" | "addressCityAndState" | "addressState" | "countryName" | "creditCardNumber" | "emailAddress" | "familyName" | "fullStreetAddress" | "givenName" | "jobTitle" | "location" | "middleName" | "namePrefix" | "nameSuffix" | "nickname" | "organizationName" | "postalCode" | "streetAddressLine1" | "streetAddressLine2" | "sublocality" | "telephoneNumber" | "newPassword" | "oneTimeCode" | undefined;
    autoCompleteType?: "name" | "password" | "username" | "email" | "off" | "cc-csc" | "cc-exp" | "cc-exp-month" | "cc-exp-year" | "cc-number" | "postal-code" | "street-address" | "tel" | undefined;
    importantForAutofill?: "auto" | "yes" | "no" | "noExcludeDescendants" | "yesExcludeDescendants" | undefined;
    disableFullscreenUI?: boolean | undefined;
    inlineImageLeft?: string | undefined;
    inlineImagePadding?: number | undefined;
    returnKeyLabel?: string | undefined;
    underlineColorAndroid?: import("react-native").ColorValue | undefined;
    showSoftInputOnFocus?: boolean | undefined;
    ref?: import("react").Ref<import("react-native").TextInput> | undefined;
    key?: import("react").Key | null | undefined;
    label?: string | undefined;
    labelColor?: import("./types").ColorType | undefined;
    labelStyle?: import("react-native").TextStyle | undefined;
    labelProps?: import("../../components/text").TextProps | undefined;
    validationMessagePosition?: import("./types").ValidationMessagePosition | undefined;
    floatingPlaceholder?: boolean | undefined;
    floatingPlaceholderColor?: import("./types").ColorType | undefined;
    floatingPlaceholderStyle?: ((false | import("react-native").TextStyle | import("react-native").RegisteredStyle<import("react-native").TextStyle> | import("react-native").RecursiveArray<import("react-native").TextStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<import("react-native").TextStyle>> | null) & import("react-native").TextStyle) | undefined;
    floatOnFocus?: boolean | undefined;
    enableErrors?: boolean | undefined;
    validationMessage?: string | string[] | undefined;
    validationMessageStyle?: import("react-native").TextStyle | undefined;
    retainSpace?: boolean | undefined;
    validate?: import("./types").Validator | import("./types").Validator[] | undefined;
    showCharCounter?: boolean | undefined;
    charCounterStyle?: import("react-native").TextStyle | undefined;
    leadingAccessory?: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | undefined;
    trailingAccessory?: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | undefined;
    validateOnStart?: boolean | undefined;
    validateOnChange?: boolean | undefined;
    validateOnBlur?: boolean | undefined;
    onChangeValidity?: ((isValid: boolean) => void) | undefined;
    fieldStyle?: import("react-native").ViewStyle | ((context: import("./FieldContext").FieldContextType) => import("react-native").ViewStyle) | undefined;
    containerStyle?: import("react-native").ViewStyle | undefined;
    modifiers: import("../../commons/modifiers").ExtractedStyle;
    forwardedRef: any;
} | {
    margin?: boolean | undefined;
    marginL?: boolean | undefined;
    marginT?: boolean | undefined;
    marginR?: boolean | undefined;
    marginB?: boolean | undefined;
    marginH?: boolean | undefined;
    marginV?: boolean | undefined;
    padding?: boolean | undefined;
    paddingL?: boolean | undefined;
    paddingT?: boolean | undefined;
    paddingR?: boolean | undefined;
    paddingB?: boolean | undefined;
    paddingH?: boolean | undefined;
    paddingV?: boolean | undefined;
    text10?: boolean | undefined;
    text20?: boolean | undefined;
    text30?: boolean | undefined;
    text40?: boolean | undefined;
    text50?: boolean | undefined;
    text60?: boolean | undefined;
    text65?: boolean | undefined;
    text70?: boolean | undefined;
    text80?: boolean | undefined;
    text90?: boolean | undefined;
    text100?: boolean | undefined;
    text10T?: boolean | undefined;
    text10L?: boolean | undefined;
    text10R?: boolean | undefined;
    text10M?: boolean | undefined;
    text10BO?: boolean | undefined;
    text10H?: boolean | undefined;
    text10BL?: boolean | undefined;
    text20T?: boolean | undefined;
    text20L?: boolean | undefined;
    text20R?: boolean | undefined;
    text20M?: boolean | undefined;
    text20BO?: boolean | undefined;
    text20H?: boolean | undefined;
    text20BL?: boolean | undefined;
    text30T?: boolean | undefined;
    text30L?: boolean | undefined;
    text30R?: boolean | undefined;
    text30M?: boolean | undefined;
    text30BO?: boolean | undefined;
    text30H?: boolean | undefined;
    text30BL?: boolean | undefined;
    text40T?: boolean | undefined;
    text40L?: boolean | undefined;
    text40R?: boolean | undefined;
    text40M?: boolean | undefined;
    text40BO?: boolean | undefined;
    text40H?: boolean | undefined;
    text40BL?: boolean | undefined;
    text50T?: boolean | undefined;
    text50L?: boolean | undefined;
    text50R?: boolean | undefined;
    text50M?: boolean | undefined;
    text50BO?: boolean | undefined;
    text50H?: boolean | undefined;
    text50BL?: boolean | undefined;
    text60T?: boolean | undefined;
    text60L?: boolean | undefined;
    text60R?: boolean | undefined;
    text60M?: boolean | undefined;
    text60BO?: boolean | undefined;
    text60H?: boolean | undefined;
    text60BL?: boolean | undefined;
    text65T?: boolean | undefined;
    text65L?: boolean | undefined;
    text65R?: boolean | undefined;
    text65M?: boolean | undefined;
    text65BO?: boolean | undefined;
    text65H?: boolean | undefined;
    text65BL?: boolean | undefined;
    text70T?: boolean | undefined;
    text70L?: boolean | undefined;
    text70R?: boolean | undefined;
    text70M?: boolean | undefined;
    text70BO?: boolean | undefined;
    text70H?: boolean | undefined;
    text70BL?: boolean | undefined;
    text80T?: boolean | undefined;
    text80L?: boolean | undefined;
    text80R?: boolean | undefined;
    text80M?: boolean | undefined;
    text80BO?: boolean | undefined;
    text80H?: boolean | undefined;
    text80BL?: boolean | undefined;
    text90T?: boolean | undefined;
    text90L?: boolean | undefined;
    text90R?: boolean | undefined;
    text90M?: boolean | undefined;
    text90BO?: boolean | undefined;
    text90H?: boolean | undefined;
    text90BL?: boolean | undefined;
    text100T?: boolean | undefined;
    text100L?: boolean | undefined;
    text100R?: boolean | undefined;
    text100M?: boolean | undefined;
    text100BO?: boolean | undefined;
    text100H?: boolean | undefined;
    text100BL?: boolean | undefined;
    transparent?: boolean | undefined;
    black?: boolean | undefined;
    white?: boolean | undefined;
    dark10?: boolean | undefined;
    dark20?: boolean | undefined;
    dark30?: boolean | undefined;
    dark40?: boolean | undefined;
    dark50?: boolean | undefined;
    dark60?: boolean | undefined;
    dark70?: boolean | undefined;
    dark80?: boolean | undefined;
    grey10?: boolean | undefined;
    grey20?: boolean | undefined;
    grey30?: boolean | undefined;
    grey40?: boolean | undefined;
    grey50?: boolean | undefined;
    grey60?: boolean | undefined;
    grey70?: boolean | undefined;
    grey80?: boolean | undefined;
    blue10?: boolean | undefined;
    blue20?: boolean | undefined;
    blue30?: boolean | undefined;
    blue40?: boolean | undefined;
    blue50?: boolean | undefined;
    blue60?: boolean | undefined;
    blue70?: boolean | undefined;
    blue80?: boolean | undefined;
    cyan10?: boolean | undefined;
    cyan20?: boolean | undefined;
    cyan30?: boolean | undefined;
    cyan40?: boolean | undefined;
    cyan50?: boolean | undefined;
    cyan60?: boolean | undefined;
    cyan70?: boolean | undefined;
    cyan80?: boolean | undefined;
    green10?: boolean | undefined;
    green20?: boolean | undefined;
    green30?: boolean | undefined;
    green40?: boolean | undefined;
    green50?: boolean | undefined;
    green60?: boolean | undefined;
    green70?: boolean | undefined;
    green80?: boolean | undefined;
    yellow10?: boolean | undefined;
    yellow20?: boolean | undefined;
    yellow30?: boolean | undefined;
    yellow40?: boolean | undefined;
    yellow50?: boolean | undefined;
    yellow60?: boolean | undefined;
    yellow70?: boolean | undefined;
    yellow80?: boolean | undefined;
    orange10?: boolean | undefined;
    orange20?: boolean | undefined;
    orange30?: boolean | undefined;
    orange40?: boolean | undefined;
    orange50?: boolean | undefined;
    orange60?: boolean | undefined;
    orange70?: boolean | undefined;
    orange80?: boolean | undefined;
    red10?: boolean | undefined;
    red20?: boolean | undefined;
    red30?: boolean | undefined;
    red40?: boolean | undefined;
    red50?: boolean | undefined;
    red60?: boolean | undefined;
    red70?: boolean | undefined;
    red80?: boolean | undefined;
    purple10?: boolean | undefined;
    purple20?: boolean | undefined;
    purple30?: boolean | undefined;
    purple40?: boolean | undefined;
    purple50?: boolean | undefined;
    purple60?: boolean | undefined;
    purple70?: boolean | undefined;
    purple80?: boolean | undefined;
    violet10?: boolean | undefined;
    violet20?: boolean | undefined;
    violet30?: boolean | undefined;
    violet40?: boolean | undefined;
    violet50?: boolean | undefined;
    violet60?: boolean | undefined;
    violet70?: boolean | undefined;
    violet80?: boolean | undefined;
    hint?: string | undefined;
    color?: import("./types").ColorType | undefined;
    placeholderTextColor?: import("./types").ColorType | undefined;
    style: false | import("react-native").TextStyle | import("react-native").RegisteredStyle<import("react-native").TextStyle> | import("react-native").RecursiveArray<import("react-native").TextStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<import("react-native").TextStyle>> | {
        lineHeight: undefined;
        height: number | undefined;
        color?: import("react-native").ColorValue | undefined;
        fontFamily?: string | undefined;
        fontSize?: number | undefined;
        fontStyle?: "normal" | "italic" | undefined;
        fontWeight?: "normal" | "bold" | "100" | "200" | "300" | "400" | "500" | "600" | "700" | "800" | "900" | undefined;
        letterSpacing?: number | undefined;
        textAlign?: "auto" | "left" | "right" | "center" | "justify" | undefined;
        textDecorationLine?: "none" | "underline" | "line-through" | "underline line-through" | undefined;
        textDecorationStyle?: "solid" | "double" | "dotted" | "dashed" | undefined;
        textDecorationColor?: import("react-native").ColorValue | undefined;
        textShadowColor?: import("react-native").ColorValue | undefined;
        textShadowOffset?: {
            width: number;
            height: number;
        } | undefined;
        textShadowRadius?: number | undefined;
        textTransform?: "none" | "capitalize" | "uppercase" | "lowercase" | undefined;
        testID?: string | undefined;
        fontVariant?: import("react-native").FontVariant[] | undefined;
        writingDirection?: "auto" | "ltr" | "rtl" | undefined;
        backfaceVisibility?: "visible" | "hidden" | undefined;
        backgroundColor?: import("react-native").ColorValue | undefined;
        borderBottomColor?: import("react-native").ColorValue | undefined;
        borderBottomEndRadius?: number | undefined;
        borderBottomLeftRadius?: number | undefined;
        borderBottomRightRadius?: number | undefined;
        borderBottomStartRadius?: number | undefined;
        borderBottomWidth?: number | undefined;
        borderColor?: import("react-native").ColorValue | undefined;
        borderEndColor?: import("react-native").ColorValue | undefined;
        borderLeftColor?: import("react-native").ColorValue | undefined;
        borderLeftWidth?: number | undefined;
        borderRadius?: number | undefined;
        borderRightColor?: import("react-native").ColorValue | undefined;
        borderRightWidth?: number | undefined;
        borderStartColor?: import("react-native").ColorValue | undefined;
        borderStyle?: "solid" | "dotted" | "dashed" | undefined;
        borderTopColor?: import("react-native").ColorValue | undefined;
        borderTopEndRadius?: number | undefined;
        borderTopLeftRadius?: number | undefined;
        borderTopRightRadius?: number | undefined;
        borderTopStartRadius?: number | undefined;
        borderTopWidth?: number | undefined;
        borderWidth?: number | undefined;
        opacity?: number | undefined;
        elevation?: number | undefined;
        alignContent?: "center" | "flex-start" | "flex-end" | "stretch" | "space-between" | "space-around" | undefined;
        alignItems?: import("react-native").FlexAlignType | undefined;
        alignSelf?: "auto" | import("react-native").FlexAlignType | undefined;
        aspectRatio?: number | undefined;
        borderEndWidth?: string | number | undefined;
        borderStartWidth?: string | number | undefined;
        bottom?: string | number | undefined;
        display?: "none" | "flex" | undefined;
        end?: string | number | undefined;
        flex?: number | undefined;
        flexBasis?: string | number | undefined;
        flexDirection?: "row" | "column" | "row-reverse" | "column-reverse" | undefined;
        flexGrow?: number | undefined;
        flexShrink?: number | undefined;
        flexWrap?: "wrap" | "nowrap" | "wrap-reverse" | undefined;
        justifyContent?: "center" | "flex-start" | "flex-end" | "space-between" | "space-around" | "space-evenly" | undefined;
        left?: string | number | undefined;
        margin?: string | number | undefined;
        marginBottom?: string | number | undefined;
        marginEnd?: string | number | undefined;
        marginHorizontal?: string | number | undefined;
        marginLeft?: string | number | undefined;
        marginRight?: string | number | undefined;
        marginStart?: string | number | undefined;
        marginTop?: string | number | undefined;
        marginVertical?: string | number | undefined;
        maxHeight?: string | number | undefined;
        maxWidth?: string | number | undefined;
        minHeight?: string | number | undefined;
        minWidth?: string | number | undefined;
        overflow?: "visible" | "hidden" | "scroll" | undefined;
        padding?: string | number | undefined;
        paddingBottom?: string | number | undefined;
        paddingEnd?: string | number | undefined;
        paddingHorizontal?: string | number | undefined;
        paddingLeft?: string | number | undefined;
        paddingRight?: string | number | undefined;
        paddingStart?: string | number | undefined;
        paddingTop?: string | number | undefined;
        paddingVertical?: string | number | undefined;
        position?: "absolute" | "relative" | undefined;
        right?: string | number | undefined;
        start?: string | number | undefined;
        top?: string | number | undefined;
        width?: string | number | undefined;
        zIndex?: number | undefined;
        direction?: "ltr" | "rtl" | "inherit" | undefined;
        shadowColor?: import("react-native").ColorValue | undefined;
        shadowOffset?: {
            width: number;
            height: number;
        } | undefined;
        shadowOpacity?: number | undefined;
        shadowRadius?: number | undefined;
        transform?: (import("react-native").PerpectiveTransform | import("react-native").RotateTransform | import("react-native").RotateXTransform | import("react-native").RotateYTransform | import("react-native").RotateZTransform | import("react-native").ScaleTransform | import("react-native").ScaleXTransform | import("react-native").ScaleYTransform | import("react-native").TranslateXTransform | import("react-native").TranslateYTransform | import("react-native").SkewXTransform | import("react-native").SkewYTransform | import("react-native").MatrixTransform)[] | undefined;
        transformMatrix?: number[] | undefined;
        rotation?: number | undefined;
        scaleX?: number | undefined;
        scaleY?: number | undefined;
        translateX?: number | undefined;
        translateY?: number | undefined;
        textAlignVertical?: "auto" | "center" | "top" | "bottom" | undefined;
        includeFontPadding?: boolean | undefined;
    } | null;
    testID?: string | undefined;
    removeClippedSubviews?: boolean | undefined;
    onLayout?: ((event: import("react-native").LayoutChangeEvent) => void) | undefined;
    onContentSizeChange?: ((e: import("react-native").NativeSyntheticEvent<import("react-native").TextInputContentSizeChangeEventData>) => void) | undefined;
    onScroll?: ((e: import("react-native").NativeSyntheticEvent<import("react-native").TextInputScrollEventData>) => void) | undefined;
    scrollEnabled?: boolean | undefined;
    hitSlop?: import("react-native").Insets | undefined;
    pointerEvents?: "auto" | "none" | "box-none" | "box-only" | undefined;
    nativeID?: string | undefined;
    collapsable?: boolean | undefined;
    needsOffscreenAlphaCompositing?: boolean | undefined;
    renderToHardwareTextureAndroid?: boolean | undefined;
    focusable?: boolean | undefined;
    shouldRasterizeIOS?: boolean | undefined;
    isTVSelectable?: boolean | undefined;
    hasTVPreferredFocus?: boolean | undefined;
    tvParallaxProperties?: import("react-native").TVParallaxProperties | undefined;
    tvParallaxShiftDistanceX?: number | undefined;
    tvParallaxShiftDistanceY?: number | undefined;
    tvParallaxTiltAngle?: number | undefined;
    tvParallaxMagnification?: number | undefined;
    onStartShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
    onMoveShouldSetResponder?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
    onResponderEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onResponderGrant?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onResponderReject?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onResponderMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onResponderRelease?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onResponderStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onResponderTerminationRequest?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
    onResponderTerminate?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onStartShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
    onMoveShouldSetResponderCapture?: ((event: import("react-native").GestureResponderEvent) => boolean) | undefined;
    onTouchStart?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onTouchMove?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onTouchEnd?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onTouchCancel?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    onTouchEndCapture?: ((event: import("react-native").GestureResponderEvent) => void) | undefined;
    accessible?: boolean | undefined;
    accessibilityActions?: readonly Readonly<{
        name: string;
        label?: string | undefined;
    }>[] | undefined;
    accessibilityLabel?: string | undefined;
    accessibilityRole?: import("react-native").AccessibilityRole | undefined;
    accessibilityState?: import("react-native").AccessibilityState | undefined;
    accessibilityHint?: string | undefined;
    accessibilityValue?: import("react-native").AccessibilityValue | undefined;
    onAccessibilityAction?: ((event: import("react-native").AccessibilityActionEvent) => void) | undefined;
    accessibilityLiveRegion?: "none" | "polite" | "assertive" | undefined;
    importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | undefined;
    accessibilityElementsHidden?: boolean | undefined;
    accessibilityViewIsModal?: boolean | undefined;
    onAccessibilityEscape?: (() => void) | undefined;
    onAccessibilityTap?: (() => void) | undefined;
    onMagicTap?: (() => void) | undefined;
    accessibilityIgnoresInvertColors?: boolean | undefined;
    onBlur?: ((e: import("react-native").NativeSyntheticEvent<import("react-native").TextInputFocusEventData>) => void) | undefined;
    onFocus?: ((e: import("react-native").NativeSyntheticEvent<import("react-native").TextInputFocusEventData>) => void) | undefined;
    onPressIn?: ((e: import("react-native").NativeSyntheticEvent<import("react-native").NativeTouchEvent>) => void) | undefined;
    onPressOut?: ((e: import("react-native").NativeSyntheticEvent<import("react-native").NativeTouchEvent>) => void) | undefined;
    allowFontScaling?: boolean | undefined;
    numberOfLines?: number | undefined;
    maxFontSizeMultiplier?: number | null | undefined;
    selectionColor?: import("react-native").ColorValue | undefined;
    textBreakStrategy?: "simple" | "highQuality" | "balanced" | undefined;
    textAlign?: "left" | "right" | "center" | undefined;
    textAlignVertical?: "auto" | "center" | "top" | "bottom" | undefined;
    value?: string | undefined;
    autoCapitalize?: "none" | "characters" | "sentences" | "words" | undefined;
    autoCorrect?: boolean | undefined;
    autoFocus?: boolean | undefined;
    blurOnSubmit?: boolean | undefined;
    caretHidden?: boolean | undefined;
    contextMenuHidden?: boolean | undefined;
    defaultValue?: string | undefined;
    editable?: boolean | undefined;
    keyboardType?: import("react-native").KeyboardTypeOptions | undefined;
    maxLength?: number | undefined;
    multiline?: boolean | undefined;
    onChange?: ((e: import("react-native").NativeSyntheticEvent<import("react-native").TextInputChangeEventData>) => void) | undefined;
    onChangeText?: ((text: string) => void) | undefined;
    onEndEditing?: ((e: import("react-native").NativeSyntheticEvent<import("react-native").TextInputEndEditingEventData>) => void) | undefined;
    onSelectionChange?: ((e: import("react-native").NativeSyntheticEvent<import("react-native").TextInputSelectionChangeEventData>) => void) | undefined;
    onSubmitEditing?: ((e: import("react-native").NativeSyntheticEvent<import("react-native").TextInputSubmitEditingEventData>) => void) | undefined;
    onTextInput?: ((e: import("react-native").NativeSyntheticEvent<import("react-native").TextInputTextInputEventData>) => void) | undefined;
    onKeyPress?: ((e: import("react-native").NativeSyntheticEvent<import("react-native").TextInputKeyPressEventData>) => void) | undefined;
    placeholder?: string | undefined;
    returnKeyType?: import("react-native").ReturnKeyTypeOptions | undefined;
    secureTextEntry?: boolean | undefined;
    selectTextOnFocus?: boolean | undefined;
    selection?: {
        start: number;
        end?: number | undefined;
    } | undefined;
    inputAccessoryViewID?: string | undefined;
    clearButtonMode?: "always" | "never" | "while-editing" | "unless-editing" | undefined;
    clearTextOnFocus?: boolean | undefined;
    dataDetectorTypes?: import("react-native").DataDetectorTypes | import("react-native").DataDetectorTypes[] | undefined;
    enablesReturnKeyAutomatically?: boolean | undefined;
    keyboardAppearance?: "default" | "light" | "dark" | undefined;
    passwordRules?: string | null | undefined;
    rejectResponderTermination?: boolean | null | undefined;
    selectionState?: import("react-native").DocumentSelectionState | undefined;
    spellCheck?: boolean | undefined;
    textContentType?: "none" | "name" | "password" | "username" | "URL" | "addressCity" | "addressCityAndState" | "addressState" | "countryName" | "creditCardNumber" | "emailAddress" | "familyName" | "fullStreetAddress" | "givenName" | "jobTitle" | "location" | "middleName" | "namePrefix" | "nameSuffix" | "nickname" | "organizationName" | "postalCode" | "streetAddressLine1" | "streetAddressLine2" | "sublocality" | "telephoneNumber" | "newPassword" | "oneTimeCode" | undefined;
    autoCompleteType?: "name" | "password" | "username" | "email" | "off" | "cc-csc" | "cc-exp" | "cc-exp-month" | "cc-exp-year" | "cc-number" | "postal-code" | "street-address" | "tel" | undefined;
    importantForAutofill?: "auto" | "yes" | "no" | "noExcludeDescendants" | "yesExcludeDescendants" | undefined;
    disableFullscreenUI?: boolean | undefined;
    inlineImageLeft?: string | undefined;
    inlineImagePadding?: number | undefined;
    returnKeyLabel?: string | undefined;
    underlineColorAndroid?: import("react-native").ColorValue | undefined;
    showSoftInputOnFocus?: boolean | undefined;
    ref?: import("react").Ref<import("react-native").TextInput> | undefined;
    key?: import("react").Key | null | undefined;
    label?: string | undefined;
    labelColor: import("./types").ColorType | {
        focus: string;
        error: any;
        disabled: string;
    };
    labelStyle?: import("react-native").TextStyle | undefined;
    labelProps?: import("../../components/text").TextProps | undefined;
    validationMessagePosition?: import("./types").ValidationMessagePosition | undefined;
    floatingPlaceholder?: boolean | undefined;
    floatingPlaceholderColor: import("./types").ColorType | {
        focus: string;
        error: any;
        disabled: string;
    };
    floatingPlaceholderStyle: {
        color?: import("react-native").ColorValue | undefined;
        fontFamily?: string | undefined;
        fontSize?: number | undefined;
        fontStyle?: "normal" | "italic" | undefined;
        fontWeight?: "normal" | "bold" | "100" | "200" | "300" | "400" | "500" | "600" | "700" | "800" | "900" | undefined;
        letterSpacing?: number | undefined;
        lineHeight?: number | undefined;
        textAlign?: "auto" | "left" | "right" | "center" | "justify" | undefined;
        textDecorationLine?: "none" | "underline" | "line-through" | "underline line-through" | undefined;
        textDecorationStyle?: "solid" | "double" | "dotted" | "dashed" | undefined;
        textDecorationColor?: import("react-native").ColorValue | undefined;
        textShadowColor?: import("react-native").ColorValue | undefined;
        textShadowOffset?: {
            width: number;
            height: number;
        } | undefined;
        textShadowRadius?: number | undefined;
        textTransform?: "none" | "capitalize" | "uppercase" | "lowercase" | undefined;
        testID?: string | undefined;
        fontVariant?: import("react-native").FontVariant[] | undefined;
        writingDirection?: "auto" | "ltr" | "rtl" | undefined;
        backfaceVisibility?: "visible" | "hidden" | undefined;
        backgroundColor?: import("react-native").ColorValue | undefined;
        borderBottomColor?: import("react-native").ColorValue | undefined;
        borderBottomEndRadius?: number | undefined;
        borderBottomLeftRadius?: number | undefined;
        borderBottomRightRadius?: number | undefined;
        borderBottomStartRadius?: number | undefined;
        borderBottomWidth?: number | undefined;
        borderColor?: import("react-native").ColorValue | undefined;
        borderEndColor?: import("react-native").ColorValue | undefined;
        borderLeftColor?: import("react-native").ColorValue | undefined;
        borderLeftWidth?: number | undefined;
        borderRadius?: number | undefined;
        borderRightColor?: import("react-native").ColorValue | undefined;
        borderRightWidth?: number | undefined;
        borderStartColor?: import("react-native").ColorValue | undefined;
        borderStyle?: "solid" | "dotted" | "dashed" | undefined;
        borderTopColor?: import("react-native").ColorValue | undefined;
        borderTopEndRadius?: number | undefined;
        borderTopLeftRadius?: number | undefined;
        borderTopRightRadius?: number | undefined;
        borderTopStartRadius?: number | undefined;
        borderTopWidth?: number | undefined;
        borderWidth?: number | undefined;
        opacity?: number | undefined;
        elevation?: number | undefined;
        alignContent?: "center" | "flex-start" | "flex-end" | "stretch" | "space-between" | "space-around" | undefined;
        alignItems?: import("react-native").FlexAlignType | undefined;
        alignSelf?: "auto" | import("react-native").FlexAlignType | undefined;
        aspectRatio?: number | undefined;
        borderEndWidth?: string | number | undefined;
        borderStartWidth?: string | number | undefined;
        bottom?: string | number | undefined;
        display?: "none" | "flex" | undefined;
        end?: string | number | undefined;
        flex?: number | undefined;
        flexBasis?: string | number | undefined;
        flexDirection?: "row" | "column" | "row-reverse" | "column-reverse" | undefined;
        flexGrow?: number | undefined;
        flexShrink?: number | undefined;
        flexWrap?: "wrap" | "nowrap" | "wrap-reverse" | undefined;
        height?: string | number | undefined;
        justifyContent?: "center" | "flex-start" | "flex-end" | "space-between" | "space-around" | "space-evenly" | undefined;
        left?: string | number | undefined;
        margin?: string | number | undefined;
        marginBottom?: string | number | undefined;
        marginEnd?: string | number | undefined;
        marginHorizontal?: string | number | undefined;
        marginLeft?: string | number | undefined;
        marginRight?: string | number | undefined;
        marginStart?: string | number | undefined;
        marginTop?: string | number | undefined;
        marginVertical?: string | number | undefined;
        maxHeight?: string | number | undefined;
        maxWidth?: string | number | undefined;
        minHeight?: string | number | undefined;
        minWidth?: string | number | undefined;
        overflow?: "visible" | "hidden" | "scroll" | undefined;
        padding?: string | number | undefined;
        paddingBottom?: string | number | undefined;
        paddingEnd?: string | number | undefined;
        paddingHorizontal?: string | number | undefined;
        paddingLeft?: string | number | undefined;
        paddingRight?: string | number | undefined;
        paddingStart?: string | number | undefined;
        paddingTop?: string | number | undefined;
        paddingVertical?: string | number | undefined;
        position?: "absolute" | "relative" | undefined;
        right?: string | number | undefined;
        start?: string | number | undefined;
        top?: string | number | undefined;
        width?: string | number | undefined;
        zIndex?: number | undefined;
        direction?: "ltr" | "rtl" | "inherit" | undefined;
        shadowColor?: import("react-native").ColorValue | undefined;
        shadowOffset?: {
            width: number;
            height: number;
        } | undefined;
        shadowOpacity?: number | undefined;
        shadowRadius?: number | undefined;
        transform?: (import("react-native").PerpectiveTransform | import("react-native").RotateTransform | import("react-native").RotateXTransform | import("react-native").RotateYTransform | import("react-native").RotateZTransform | import("react-native").ScaleTransform | import("react-native").ScaleXTransform | import("react-native").ScaleYTransform | import("react-native").TranslateXTransform | import("react-native").TranslateYTransform | import("react-native").SkewXTransform | import("react-native").SkewYTransform | import("react-native").MatrixTransform)[] | undefined;
        transformMatrix?: number[] | undefined;
        rotation?: number | undefined;
        scaleX?: number | undefined;
        scaleY?: number | undefined;
        translateX?: number | undefined;
        translateY?: number | undefined;
        textAlignVertical?: "auto" | "center" | "top" | "bottom" | undefined;
        includeFontPadding?: boolean | undefined;
    } | ((false | import("react-native").TextStyle | import("react-native").RegisteredStyle<import("react-native").TextStyle> | import("react-native").RecursiveArray<import("react-native").TextStyle | import("react-native").Falsy | import("react-native").RegisteredStyle<import("react-native").TextStyle>> | null) & import("react-native").TextStyle);
    floatOnFocus?: boolean | undefined;
    enableErrors: boolean;
    validationMessage?: string | string[] | undefined;
    validationMessageStyle?: import("react-native").TextStyle | undefined;
    retainSpace?: boolean | undefined;
    validate?: import("./types").Validator | import("./types").Validator[] | undefined;
    showCharCounter?: boolean | undefined;
    charCounterStyle?: import("react-native").TextStyle | undefined;
    leadingAccessory?: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | undefined;
    trailingAccessory?: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | undefined;
    validateOnStart?: boolean | undefined;
    validateOnChange?: boolean | undefined;
    validateOnBlur: boolean;
    onChangeValidity?: ((isValid: boolean) => void) | undefined;
    fieldStyle: import("react-native").ViewStyle | {
        borderBottomWidth: number;
        borderBottomColor: string;
        paddingBottom: number;
    } | ((context: import("./FieldContext").FieldContextType) => import("react-native").ViewStyle);
    containerStyle?: import("react-native").ViewStyle | undefined;
    modifiers: import("../../commons/modifiers").ExtractedStyle;
    forwardedRef: any;
};
