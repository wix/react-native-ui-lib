{
  "RadioGroup": {
    "prefix": "radioGroup",
    "description": "Wrap a group of Radio Buttons to automatically control their selection",
    "body": ["<RadioGroup initialValue={$1} onValueChange={$2}>", " $3", "</RadioGroup>"]
  },
  "SectionsWheelPicker": {
    "prefix": "sectionsWheelPicker",
    "description": "SectionsWheelPicker component for presenting set of WheelPickers",
    "body": ["<SectionsWheelPicker sections={$1}/>"]
  },
  "Hint": {
    "prefix": "hint",
    "description": "Hint component for displaying a tooltip over wrapped component",
    "body": ["<Hint visible={$1} message={$2} color={$3}/>"]
  },
  "FeatureHighlight": {
    "prefix": "featureHighlight",
    "description": "Component for feature discovery",
    "body": [
      "<FeatureHighlight",
      " visible={$1}",
      " title={$2}",
      " message={$3}",
      " getTarget={$4}",
      " confirmButtonProps={$5}",
      " onBackgroundPress={$6}",
      "/>"
    ]
  },
  "Drawer": {"prefix": "drawer", "description": "Drawer Component", "body": ["<Drawer $1>", " $2", "</Drawer>"]},
  "ActionSheet": {
    "prefix": "actionSheet",
    "description": "Cross platform Action Sheet, with a support for native iOS solutions",
    "body": [
      "<ActionSheet",
      " title={$1}",
      " message={$2}",
      " cancelButtonIndex={$3}",
      " destructiveButtonIndex={$4}",
      " options={[",
      "  {label: '$5', onPress: $6},",
      "  {label: '$7', onPress: $8},",
      "  {label: 'Cancel', onPress: $9}",
      " ]}",
      "/>"
    ]
  },
  "Card.Image": {
    "prefix": "card.Image",
    "description": "Inner component for the Card component (better be a direct child)",
    "body": ["<Card.Image source={$1} height={$2}/>"]
  },
  "Card.Section": {
    "prefix": "card.Section",
    "description": "Inner component for rendering content easily inside a Card component",
    "body": ["<Card.Section", " content={$1}", " contentStyle={$2}", "/>"]
  },
  "Card": {
    "prefix": "card",
    "description": "Customizable card component that handles press events",
    "body": ["<Card $1>", " $2", "</Card>"]
  },
  "RadioButton": {
    "prefix": "radioButton",
    "description": "A Radio Button component, should be wrapped with a RadioGroup",
    "body": ["<RadioButton value={$1} label={$2}/>"]
  },
  "SkeletonView": {
    "prefix": "skeletonView",
    "description": "Allows showing a temporary skeleton view while your real view is loading",
    "body": ["<SkeletonView", " template={$1}", " showContent={$2}", " renderContent={$3}", " times={$4}", "/>"]
  },
  "ConnectionStatusBar": {
    "prefix": "connectionStatusBar",
    "description": "Top bar to show a 'no internet' connection status",
    "body": ["<ConnectionStatusBar onConnectionChange={$1}/>"]
  },
  "Picker.Item": {
    "prefix": "picker.Item",
    "description": "Picker.Item, for configuring the Picker's selectable options",
    "body": ["<Picker.Item key={$1} value={$2} disabled={$3}/>"]
  },
  "Picker": {
    "prefix": "picker",
    "description": "Picker Component, support single or multiple selection, blurModel and native wheel picker",
    "body": [
      "<Picker",
      " value={$1}",
      " placeholder={$2}",
      " onChange={$3}",
      ">",
      " {_.map(items, item => (",
      "  return this.renderItem(item, index);",
      " ))}",
      "</Picker>"
    ]
  },
  "FloatingButton": {
    "prefix": "floatingButton",
    "description": "Hovering button with gradient background",
    "body": ["<FloatingButton visible={$1} button={$2} secondaryButton={$3}/>"]
  },
  "MaskedInput": {
    "prefix": "maskedInput",
    "description": "Mask Input to create custom looking inputs with custom formats",
    "body": ["<MaskedInput ref={$1} renderMaskedText={$2}/>"]
  },
  "Toast": {
    "prefix": "toast",
    "description": "A toast component for displaying non-disruptive messages to the user",
    "body": ["<Toast", " visible={$1}", " position={$2}", " onDismiss={$3}", ">"]
  },
  "Chip": {"prefix": "chip", "description": "Chip component", "body": ["<Chip label={$1} onPress={$2}/>"]},
  "Wizard.Step": {
    "prefix": "wizard.Step",
    "description": "A wizard presents a series of steps in  prescribed order. That the user needs to complete in order to accomplish a goal (e.g. purchase a product)",
    "body": ["<Wizard.Step state={$1} label={$2}/>"]
  },
  "Wizard": {
    "prefix": "wizard",
    "description": "A wizard presents a series of steps in  prescribed order. That the user needs to complete in order to accomplish a goal (e.g. purchase a product)",
    "body": ["<Wizard activeIndex={$1} onActiveIndexChanged={$2}>", " $3", "</Wizard>"]
  },
  "ColorPalette": {
    "prefix": "colorPalette",
    "description": "A component for displaying a color palette",
    "body": ["<ColorPalette", " colors={$1}", " value={$2}", " onValueChange={$3}", "/>"]
  },
  "Checkbox": {
    "prefix": "checkbox",
    "description": "Checkbox component for toggling boolean value related to some context",
    "body": ["<Checkbox value={$1} onValueChange={$2}/>"]
  },
  "TextField": {
    "prefix": "textField",
    "description": "An enhanced customizable TextField with validation support",
    "body": ["<TextField", " placeholder={$1}", " onChangeText={$2}", "/>"]
  },
  "Slider": {
    "prefix": "slider",
    "description": "A Slider component",
    "body": ["<Slider", " value={$1}", " minimumValue={$2}", " maximumValue={$3}", " onValueChange={$4}", "/>"]
  },
  "StackAggregator": {
    "prefix": "stackAggregator",
    "description": "Stack aggregator component",
    "body": [
      "<StackAggregator",
      " onItemPress={$1}",
      ">",
      " {_.map(items, (item, index) => {",
      "  return this.renderItem(item, index);",
      " })}",
      "</StackAggregator>"
    ]
  },
  "Stepper": {"prefix": "stepper", "description": "A stepper component", "body": ["<Stepper $1/>"]},
  "ProgressiveImage": {
    "prefix": "progressiveImage",
    "description": "Image component that loads first a small thumbnail of the images, and fades-in the full-sized image with animation once it's loaded",
    "body": [
      "<ProgressiveImage",
      " source={{uri: $1, cache: 'reload'}}",
      " thumbnailSource={{uri: $2, cache: 'reload'}}",
      "/>"
    ]
  },
  "ProgressBar": {
    "prefix": "progressBar",
    "description": "Progress bar",
    "body": ["<ProgressBar progress={$1} progressColor={$2}/>"]
  },
  "Carousel": {
    "prefix": "carousel",
    "description": "Carousel for scrolling pages",
    "body": ["<Carousel onChangePage={$1}>", " $2", "</Carousel>"]
  },
  "Image": {
    "prefix": "image",
    "description": "Image wrapper with extra functionality like source transform and assets support",
    "body": ["<Image source={$1}/>"]
  },
  "ListItem": {
    "prefix": "listItem",
    "description": "List item component to render inside a List component",
    "body": ["<ListItem onPress={$1}>", " $2", "</ListItem>"]
  },
  "ListItem.Part": {
    "prefix": "listItem.Part",
    "description": "A sub ListItem component for layout-ing inside a ListItem",
    "body": ["<ListItem.Part $1>", " $2", "</ListItem.Part>"]
  },
  "Dialog": {
    "prefix": "dialog",
    "description": "Component for displaying custom content inside a popup dialog",
    "body": ["<Dialog", " visible={$1}", " onDismiss={$2}", " panDirection={$3}", ">", " $4", "</Dialog>"]
  },
  "GridView": {
    "prefix": "gridView",
    "description": "An auto-generated grid view that calculate item size according to given props",
    "body": ["<GridView", " items={$1}", " numColumns={$2}", " lastItemLabel={$3}", "/>"]
  },
  "Button": {
    "prefix": "button",
    "description": "Customizable button component that handles press events",
    "body": ["<Button label={$1} size={$2} backgroundColor={$3}/>"]
  },
  "AnimatedScanner": {
    "prefix": "animatedScanner",
    "description": "description",
    "body": ["<AnimatedScanner progress={$1} duration={$2}/>"]
  },
  "AnimatedImage": {
    "prefix": "animatedImage",
    "description": "Image component that fades-in the image with animation once it's loaded",
    "body": ["<AnimatedImage source={{uri: $1}}/>"]
  },
  "SegmentedControl": {
    "prefix": "segmentedControl",
    "description": "SegmentedControl component for toggling two values or more",
    "body": ["<SegmentedControl segments={$1}/>"]
  },
  "ColorSwatch": {
    "prefix": "colorSwatch",
    "description": "A color swatch component",
    "body": ["<ColorSwatch color={$1} selected={$2} onPress={$3}/>"]
  },
  "TouchableOpacity": {
    "prefix": "touchableOpacity",
    "description": "A wrapper for TouchableOpacity component. Support onPress, throttling and activeBackgroundColor",
    "body": ["<TouchableOpacity onPress={$1}/>"]
  },
  "StateScreen": {
    "prefix": "stateScreen",
    "description": "Component that shows a full screen for a certain state, like an empty state",
    "body": ["<StateScreen", " title={$1}", " subtitle={$2}", " ctaLabel={$3}", " imageSource={$4}", "/>"]
  },
  "Avatar": {
    "prefix": "avatar",
    "description": "Avatar component for displaying user profile images",
    "body": ["<Avatar source={uri: $1} label={$2}/>"]
  },
  "ColorPicker": {
    "prefix": "colorPicker",
    "description": "A picker component for color selection",
    "body": [
      "<ColorPicker",
      " colors={$1}",
      " initialColor={$2}",
      " value={$3}",
      " onDismiss={$4}",
      " onSubmit={$5}",
      " onValueChange={$6}",
      "/>"
    ]
  },
  "Fader": {
    "prefix": "fader",
    "description": "A gradient fading overlay to render on top of overflowing content (like scroll component)",
    "body": ["<Fader visible={$1} position={$2} tintColor={$3}/>"]
  },
  "View": {"prefix": "view", "description": "An enhanced View component"},
  "Switch": {
    "prefix": "switch",
    "description": "Switch component for toggling boolean value related to some context",
    "body": ["<Switch value={$1} onValueChange={$2}/>"]
  },
  "DateTimePicker": {
    "prefix": "dateTimePicker",
    "description": "Date and Time Picker Component that wraps RNDateTimePicker for date and time modes. See: https://github.com/react-native-community/react-native-datetimepicker#react-native-datetimepicker",
    "body": ["<DateTimePicker title={$1} placeholder={$2} mode={$3}/>"]
  },
  "LoaderScreen": {
    "prefix": "loaderScreen",
    "description": "Component that shows a full screen with an activity indicator",
    "body": ["<LoaderScreen message={$1} color={$2}/>"]
  },
  "ActionBar": {
    "prefix": "actionBar",
    "description": "Quick actions bar, each action support Button component props",
    "body": [
      "<ActionBar",
      "  actions={[",
      "    {label: $1, onPress: $2},",
      "    {label: $3, onPress: $4},",
      "    {label: $5, onPress: $6}",
      "  ]}",
      "/>"
    ]
  },
  "Text": {
    "prefix": "text",
    "description": "A wrapper for Text component with extra functionality like modifiers support",
    "body": ["<Text $1>$2</Text>"]
  },
  "Icon": {"prefix": "icon", "description": "Icon component", "body": ["<Icon source={$1} size={$2} tintColor={$3}/>"]},
  "ChipsInput": {
    "prefix": "chipsInput",
    "description": "A chips input",
    "body": ["<ChipsInput", " placeholder={$1}", " chips={$2}", "/>"]
  },
  "Modal.TopBar": {
    "prefix": "modal.TopBar",
    "description": "Modal.TopBar, inner component for configuring the Modal component's title, buttons and statusBar",
    "body": ["<Modal.TopBar", " title={$1}", " onCancel={$2}", " onDone={$3}", "/>"]
  },
  "Modal": {
    "prefix": "modal",
    "description": "Component that present content on top of the invoking screen",
    "body": ["<Modal visible={$1} animationType={$2} onBackgroundPress={$3}>", " $4", "</Modal>"]
  },
  "ExpandableSection": {
    "prefix": "expandableSection",
    "description": "Component to render expanded section below or above the SectionHeader",
    "body": ["<ExpandableSection", " top={$1}", " expanded={$2}", " sectionHeader={$3}", " onPress={$4}", ">"]
  },
  "GridListItem": {
    "prefix": "gridListItem",
    "description": "A single grid view/list item component",
    "body": ["<GridListItem key={$1} title={$2} subtitle={$3} description={$4}/>"]
  },
  "PageControl": {
    "prefix": "pageControl",
    "description": "Page indicator, typically used in paged scroll-views",
    "body": ["<PageControl numOfPages={$1} currentPage={$2} containerStyle={$3} />"]
  },
  "Overlay": {
    "prefix": "overlay",
    "description": "Overlay view with types",
    "body": ["<Image", " source={$1}", " overlayType={$2}", " style={$3}", "/>"]
  },
  "TabController.TabPage": {
    "prefix": "tabController.TabPage",
    "description": "TabController's TabPage component",
    "body": ["<TabController.TabPage key={$1} lazy={$2} index={$3}>"]
  },
  "TabController": {
    "prefix": "tabController",
    "description": "A performant solution for a tab controller with lazy load mechanism",
    "body": ["<TabController items={$1}>", " $2", "</TabController>"]
  },
  "TabController.TabBar": {
    "prefix": "tabController.TabBar",
    "description": "TabController's TabBar component",
    "body": ["<TabController.TabBar activeBackgroundColor={$1}/>"]
  },
  "TabController.PageCarousel": {
    "prefix": "tabController.PageCarousel",
    "description": "TabController's PageCarousel component",
    "body": [
      "<TabController.PageCarousel>",
      " {_.map(items, (item, key) => {",
      "  return ($1);",
      " })}",
      "</TabController.PageCarousel>"
    ]
  },
  "TabController.TabBarItem": {
    "prefix": "tabController.TabBarItem",
    "description": "TabController's TabBarItem component",
    "body": ["<TabBarItem label={$1}/>"]
  },
  "Badge": {
    "prefix": "badge",
    "description": "Round colored badge, typically used to show a number",
    "body": ["<Badge label={$1} size={$2}/>"]
  },
  "WheelPicker": {
    "prefix": "wheelPicker",
    "description": "A customizable WheelPicker component",
    "body": ["<WheelPicker", " items={$1}", " initialValue={$2}", " onChange={$3}", "/>"]
  },
  "RNUilibImport": {
    "prefix": "rnuilib",
    "description": "Import react-native-ui-lib",
    "body": ["import {$1} from 'react-native-ui-lib';"]
  }
}
