apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = false

/**
 * Set this to true to enable Hermes JS Engine
 */
def hermesEnabled = true

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US. Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'

android {
    ndkVersion rootProject.ext.ndkVersion

    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion

    namespace "com.rnuilib"
    
    buildFeatures {
        buildConfig true
    }

    defaultConfig {
        applicationId "com.rnuilib"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        
        buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED", "false"
        buildConfigField "boolean", "IS_HERMES_ENABLED", "true"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
    }

    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://reactnative.dev/docs/signed-apk-android.
            signingConfig signingConfigs.debug
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }
}

dependencies {
    // React Native dependencies with specific versions for 0.79
    implementation("com.facebook.react:react-android:0.79.0")    
    // Flipper is deprecated in RN 0.79+
    // implementation("com.facebook.react:flipper-integration:0.79.0")

    implementation 'com.facebook.fresco:fresco:2.5.0'
    implementation 'com.facebook.fresco:animated-gif:2.5.0'

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android:0.79.0")
    } else {
        implementation jscFlavor
    }
}

// For React Native 0.76, try to use the autolinking system if available
def autolinkedLibraries = []
try {
    apply from: file("../../node_modules/react-native/scripts/autolinking/autolinking.gradle")
    autolinkedLibraries = getReactNativeLibraries()
} catch (Exception ignored) {
    // Fallback if autolinking fails
}

android.buildTypes.all { buildType ->
    buildType.resValue 'string', "rn_config_reader_custom_package", '""'
}
