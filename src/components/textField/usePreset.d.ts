/// <reference types="react" />
import { InternalTextFieldProps } from './types';
export default function usePreset({ preset, ...props }: InternalTextFieldProps): {
    [key: string]: boolean;
    margin?: boolean | undefined;
    marginL?: boolean | undefined;
    marginT?: boolean | undefined;
    marginR?: boolean | undefined;
    marginB?: boolean | undefined;
    marginH?: boolean | undefined;
    marginV?: boolean | undefined;
    padding?: boolean | undefined;
    paddingL?: boolean | undefined;
    paddingT?: boolean | undefined;
    paddingR?: boolean | undefined;
    paddingB?: boolean | undefined;
    paddingH?: boolean | undefined;
    paddingV?: boolean | undefined;
    hint?: string | undefined;
    color?: import("./types").ColorType | undefined;
    placeholderTextColor?: import("./types").ColorType | undefined;
    formatter?: ((value?: string | undefined) => string | undefined) | undefined;
    useGestureHandlerInput?: boolean | undefined;
    readonly?: boolean | undefined;
    value?: string | undefined;
    textAlign?: "left" | "right" | "center" | undefined;
    pointerEvents?: "auto" | "none" | "box-none" | "box-only" | undefined;
    textAlignVertical?: "auto" | "center" | "top" | "bottom" | undefined;
    verticalAlign?: "auto" | "top" | "bottom" | "middle" | undefined;
    selection?: {
        start: number;
        end?: number | undefined;
    } | undefined;
    children?: import("react").ReactNode;
    style?: import("react-native/types").StyleProp<import("react-native/types").TextStyle>;
    testID?: string | undefined;
    removeClippedSubviews?: boolean | undefined;
    onLayout?: ((event: import("react-native/types").LayoutChangeEvent) => void) | undefined;
    onContentSizeChange?: ((e: import("react-native/types").NativeSyntheticEvent<import("react-native/types").TextInputContentSizeChangeEventData>) => void) | undefined;
    onScroll?: ((e: import("react-native/types").NativeSyntheticEvent<import("react-native/types").TextInputScrollEventData>) => void) | undefined;
    scrollEnabled?: boolean | undefined;
    hitSlop?: number | import("react-native/types").Insets | null | undefined;
    id?: string | undefined;
    needsOffscreenAlphaCompositing?: boolean | undefined;
    nativeID?: string | undefined;
    collapsable?: boolean | undefined;
    collapsableChildren?: boolean | undefined;
    renderToHardwareTextureAndroid?: boolean | undefined;
    focusable?: boolean | undefined;
    tabIndex?: 0 | -1 | undefined;
    shouldRasterizeIOS?: boolean | undefined;
    isTVSelectable?: boolean | undefined;
    hasTVPreferredFocus?: boolean | undefined;
    tvParallaxShiftDistanceX?: number | undefined;
    tvParallaxShiftDistanceY?: number | undefined;
    tvParallaxTiltAngle?: number | undefined;
    tvParallaxMagnification?: number | undefined;
    onStartShouldSetResponder?: ((event: import("react-native/types").GestureResponderEvent) => boolean) | undefined;
    onMoveShouldSetResponder?: ((event: import("react-native/types").GestureResponderEvent) => boolean) | undefined;
    onResponderEnd?: ((event: import("react-native/types").GestureResponderEvent) => void) | undefined;
    onResponderGrant?: ((event: import("react-native/types").GestureResponderEvent) => void) | undefined;
    onResponderReject?: ((event: import("react-native/types").GestureResponderEvent) => void) | undefined;
    onResponderMove?: ((event: import("react-native/types").GestureResponderEvent) => void) | undefined;
    onResponderRelease?: ((event: import("react-native/types").GestureResponderEvent) => void) | undefined;
    onResponderStart?: ((event: import("react-native/types").GestureResponderEvent) => void) | undefined;
    onResponderTerminationRequest?: ((event: import("react-native/types").GestureResponderEvent) => boolean) | undefined;
    onResponderTerminate?: ((event: import("react-native/types").GestureResponderEvent) => void) | undefined;
    onStartShouldSetResponderCapture?: ((event: import("react-native/types").GestureResponderEvent) => boolean) | undefined;
    onMoveShouldSetResponderCapture?: ((event: import("react-native/types").GestureResponderEvent) => boolean) | undefined;
    onTouchStart?: ((event: import("react-native/types").GestureResponderEvent) => void) | undefined;
    onTouchMove?: ((event: import("react-native/types").GestureResponderEvent) => void) | undefined;
    onTouchEnd?: ((event: import("react-native/types").GestureResponderEvent) => void) | undefined;
    onTouchCancel?: ((event: import("react-native/types").GestureResponderEvent) => void) | undefined;
    onTouchEndCapture?: ((event: import("react-native/types").GestureResponderEvent) => void) | undefined;
    onPointerEnter?: ((event: import("react-native/types").PointerEvent) => void) | undefined;
    onPointerEnterCapture?: ((event: import("react-native/types").PointerEvent) => void) | undefined;
    onPointerLeave?: ((event: import("react-native/types").PointerEvent) => void) | undefined;
    onPointerLeaveCapture?: ((event: import("react-native/types").PointerEvent) => void) | undefined;
    onPointerMove?: ((event: import("react-native/types").PointerEvent) => void) | undefined;
    onPointerMoveCapture?: ((event: import("react-native/types").PointerEvent) => void) | undefined;
    onPointerCancel?: ((event: import("react-native/types").PointerEvent) => void) | undefined;
    onPointerCancelCapture?: ((event: import("react-native/types").PointerEvent) => void) | undefined;
    onPointerDown?: ((event: import("react-native/types").PointerEvent) => void) | undefined;
    onPointerDownCapture?: ((event: import("react-native/types").PointerEvent) => void) | undefined;
    onPointerUp?: ((event: import("react-native/types").PointerEvent) => void) | undefined;
    onPointerUpCapture?: ((event: import("react-native/types").PointerEvent) => void) | undefined;
    accessible?: boolean | undefined;
    accessibilityActions?: readonly Readonly<{
        name: string;
        label?: string | undefined;
    }>[] | undefined;
    accessibilityLabel?: string | undefined;
    'aria-label'?: string | undefined;
    accessibilityRole?: import("react-native/types").AccessibilityRole | undefined;
    accessibilityState?: import("react-native/types").AccessibilityState | undefined;
    'aria-busy'?: boolean | undefined;
    'aria-checked'?: boolean | "mixed" | undefined;
    'aria-disabled'?: boolean | undefined;
    'aria-expanded'?: boolean | undefined;
    'aria-selected'?: boolean | undefined;
    accessibilityHint?: string | undefined;
    accessibilityValue?: import("react-native/types").AccessibilityValue | undefined;
    'aria-valuemax'?: number | undefined;
    'aria-valuemin'?: number | undefined;
    'aria-valuenow'?: number | undefined;
    'aria-valuetext'?: string | undefined;
    onAccessibilityAction?: ((event: import("react-native/types").AccessibilityActionEvent) => void) | undefined;
    importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | undefined;
    'aria-hidden'?: boolean | undefined;
    'aria-modal'?: boolean | undefined;
    role?: import("react-native/types").Role | undefined;
    accessibilityLabelledBy?: string | string[] | undefined;
    'aria-labelledby'?: string | undefined;
    accessibilityLiveRegion?: "none" | "polite" | "assertive" | undefined;
    'aria-live'?: "polite" | "assertive" | "off" | undefined;
    accessibilityElementsHidden?: boolean | undefined;
    accessibilityViewIsModal?: boolean | undefined;
    onAccessibilityEscape?: (() => void) | undefined;
    onAccessibilityTap?: (() => void) | undefined;
    onMagicTap?: (() => void) | undefined;
    accessibilityIgnoresInvertColors?: boolean | undefined;
    accessibilityLanguage?: string | undefined;
    accessibilityShowsLargeContentViewer?: boolean | undefined;
    accessibilityLargeContentTitle?: string | undefined;
    onPress?: ((e: import("react-native/types").NativeSyntheticEvent<import("react-native/types").NativeTouchEvent>) => void) | undefined;
    onPressIn?: ((e: import("react-native/types").NativeSyntheticEvent<import("react-native/types").NativeTouchEvent>) => void) | undefined;
    onPressOut?: ((e: import("react-native/types").NativeSyntheticEvent<import("react-native/types").NativeTouchEvent>) => void) | undefined;
    rejectResponderTermination?: boolean | null | undefined;
    onBlur?: ((e: import("react-native/types").NativeSyntheticEvent<import("react-native/types").TextInputFocusEventData>) => void) | undefined;
    onFocus?: ((e: import("react-native/types").NativeSyntheticEvent<import("react-native/types").TextInputFocusEventData>) => void) | undefined;
    allowFontScaling?: boolean | undefined;
    numberOfLines?: number | undefined;
    maxFontSizeMultiplier?: number | null | undefined;
    lineBreakStrategyIOS?: "none" | "standard" | "hangul-word" | "push-out" | undefined;
    selectionColor?: import("react-native/types").ColorValue | undefined;
    textBreakStrategy?: "simple" | "highQuality" | "balanced" | undefined;
    autoCapitalize?: "none" | "sentences" | "words" | "characters" | undefined;
    autoComplete?: "name" | "off" | "email" | "url" | "additional-name" | "address-line1" | "address-line2" | "birthdate-day" | "birthdate-full" | "birthdate-month" | "birthdate-year" | "cc-csc" | "cc-exp" | "cc-exp-day" | "cc-exp-month" | "cc-exp-year" | "cc-number" | "cc-name" | "cc-given-name" | "cc-middle-name" | "cc-family-name" | "cc-type" | "country" | "current-password" | "family-name" | "gender" | "given-name" | "honorific-prefix" | "honorific-suffix" | "name-family" | "name-given" | "name-middle" | "name-middle-initial" | "name-prefix" | "name-suffix" | "new-password" | "nickname" | "one-time-code" | "organization" | "organization-title" | "password" | "password-new" | "postal-address" | "postal-address-country" | "postal-address-extended" | "postal-address-extended-postal-code" | "postal-address-locality" | "postal-address-region" | "postal-code" | "street-address" | "sms-otp" | "tel" | "tel-country-code" | "tel-national" | "tel-device" | "username" | "username-new" | undefined;
    autoCorrect?: boolean | undefined;
    autoFocus?: boolean | undefined;
    blurOnSubmit?: boolean | undefined;
    submitBehavior?: import("react-native/types").SubmitBehavior | undefined;
    caretHidden?: boolean | undefined;
    contextMenuHidden?: boolean | undefined;
    defaultValue?: string | undefined;
    editable?: boolean | undefined;
    keyboardType?: import("react-native/types").KeyboardTypeOptions | undefined;
    inputMode?: import("react-native/types").InputModeOptions | undefined;
    maxLength?: number | undefined;
    multiline?: boolean | undefined;
    onChange?: ((e: import("react-native/types").NativeSyntheticEvent<import("react-native/types").TextInputChangeEventData>) => void) | undefined;
    onChangeText?: ((text: string) => void) | undefined;
    onEndEditing?: ((e: import("react-native/types").NativeSyntheticEvent<import("react-native/types").TextInputEndEditingEventData>) => void) | undefined;
    onSelectionChange?: ((e: import("react-native/types").NativeSyntheticEvent<import("react-native/types").TextInputSelectionChangeEventData>) => void) | undefined;
    onSubmitEditing?: ((e: import("react-native/types").NativeSyntheticEvent<import("react-native/types").TextInputSubmitEditingEventData>) => void) | undefined;
    onKeyPress?: ((e: import("react-native/types").NativeSyntheticEvent<import("react-native/types").TextInputKeyPressEventData>) => void) | undefined;
    placeholder?: string | undefined;
    readOnly?: boolean | undefined;
    returnKeyType?: import("react-native/types").ReturnKeyTypeOptions | undefined;
    enterKeyHint?: import("react-native/types").EnterKeyHintTypeOptions | undefined;
    secureTextEntry?: boolean | undefined;
    selectTextOnFocus?: boolean | undefined;
    inputAccessoryViewID?: string | undefined;
    disableKeyboardShortcuts?: boolean | undefined;
    clearButtonMode?: "always" | "never" | "while-editing" | "unless-editing" | undefined;
    clearTextOnFocus?: boolean | undefined;
    dataDetectorTypes?: import("react-native/types").DataDetectorTypes | import("react-native/types").DataDetectorTypes[] | undefined;
    enablesReturnKeyAutomatically?: boolean | undefined;
    keyboardAppearance?: "default" | "light" | "dark" | undefined;
    passwordRules?: string | null | undefined;
    selectionState?: import("react-native/types").DocumentSelectionState | undefined;
    spellCheck?: boolean | undefined;
    textContentType?: "none" | "name" | "nickname" | "password" | "username" | "flightNumber" | "URL" | "addressCity" | "addressCityAndState" | "addressState" | "countryName" | "creditCardNumber" | "creditCardExpiration" | "creditCardExpirationMonth" | "creditCardExpirationYear" | "creditCardSecurityCode" | "creditCardType" | "creditCardName" | "creditCardGivenName" | "creditCardMiddleName" | "creditCardFamilyName" | "emailAddress" | "familyName" | "fullStreetAddress" | "givenName" | "jobTitle" | "location" | "middleName" | "namePrefix" | "nameSuffix" | "organizationName" | "postalCode" | "streetAddressLine1" | "streetAddressLine2" | "sublocality" | "telephoneNumber" | "newPassword" | "oneTimeCode" | "birthdate" | "birthdateDay" | "birthdateMonth" | "birthdateYear" | "cellularEID" | "cellularIMEI" | "dateTime" | "shipmentTrackingNumber" | undefined;
    lineBreakModeIOS?: "middle" | "head" | "tail" | "clip" | "wordWrapping" | "char" | undefined;
    smartInsertDelete?: boolean | undefined;
    cursorColor?: import("react-native/types").ColorValue | null | undefined;
    selectionHandleColor?: import("react-native/types").ColorValue | null | undefined;
    importantForAutofill?: "auto" | "yes" | "no" | "noExcludeDescendants" | "yesExcludeDescendants" | undefined;
    disableFullscreenUI?: boolean | undefined;
    inlineImageLeft?: string | undefined;
    inlineImagePadding?: number | undefined;
    returnKeyLabel?: string | undefined;
    underlineColorAndroid?: import("react-native/types").ColorValue | undefined;
    showSoftInputOnFocus?: boolean | undefined;
    showMandatoryIndication?: boolean | undefined;
    recorderTag?: import("../../typings/recorderTypes").RecorderTag | undefined;
    label?: string | undefined;
    labelColor?: import("./types").ColorType | undefined;
    labelStyle?: import("react-native/types").StyleProp<import("react-native/types").TextStyle>;
    labelProps?: import("../text").TextProps | undefined;
    validationMessagePosition?: import("./types").ValidationMessagePositionType | undefined;
    floatingPlaceholder?: boolean | undefined;
    enableErrors?: boolean | undefined;
    floatingPlaceholderColor?: import("./types").ColorType | undefined;
    floatingPlaceholderStyle?: ((false | "" | import("react-native/types").TextStyle | import("react-native/types").RegisteredStyle<import("react-native/types").TextStyle> | import("react-native/types").RecursiveArray<import("react-native/types").TextStyle | import("react-native/types").Falsy | import("react-native/types").RegisteredStyle<import("react-native/types").TextStyle>> | null) & import("react-native/types").TextStyle) | undefined;
    floatOnFocus?: boolean | undefined;
    extraOffset?: number | undefined;
    onClear?: (() => void) | undefined;
    clearButtonStyle?: import("react-native/types").StyleProp<import("react-native/types").ViewStyle>;
    validationMessage?: string | string[] | undefined;
    validationMessageStyle?: import("react-native/types").StyleProp<import("react-native/types").TextStyle>;
    validationIcon?: import("../icon").IconProps | undefined;
    retainValidationSpace?: boolean | undefined;
    validate?: import("./types").Validator | import("./types").Validator[] | undefined;
    showCharCounter?: boolean | undefined;
    charCounterStyle?: import("react-native/types").TextStyle | undefined;
    leadingAccessory?: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | undefined;
    trailingAccessory?: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | undefined;
    topTrailingAccessory?: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | undefined;
    bottomAccessory?: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | undefined;
    showClearButton?: boolean | undefined;
    helperText?: string | undefined;
    validateOnStart?: boolean | undefined;
    validateOnChange?: boolean | undefined;
    validationDebounceTime?: number | undefined;
    validateOnBlur?: boolean | undefined;
    onValidationFailed?: ((failedValidatorIndex: number) => void) | undefined;
    onChangeValidity?: ((isValid: boolean) => void) | undefined;
    fieldStyle?: import("react-native/types").StyleProp<import("react-native/types").ViewStyle>;
    dynamicFieldStyle?: ((context: import("./types").FieldContextType, props: {
        preset: string | null | undefined;
    }) => import("react-native/types").StyleProp<import("react-native/types").ViewStyle>) | undefined;
    containerProps?: Omit<import("../view").ViewProps, "style"> | undefined;
    containerStyle?: import("react-native/types").StyleProp<import("react-native/types").ViewStyle>;
    centered?: boolean | undefined;
    innerFlexBehavior?: boolean | undefined;
    modifiers: import("../../commons/modifiers").ExtractedStyle;
    forwardedRef: import("react").ForwardedRef<any>;
} | {
    margin?: boolean | undefined;
    marginL?: boolean | undefined;
    marginT?: boolean | undefined;
    marginR?: boolean | undefined;
    marginB?: boolean | undefined;
    marginH?: boolean | undefined;
    marginV?: boolean | undefined;
    padding?: boolean | undefined;
    paddingL?: boolean | undefined;
    paddingT?: boolean | undefined;
    paddingR?: boolean | undefined;
    paddingB?: boolean | undefined;
    paddingH?: boolean | undefined;
    paddingV?: boolean | undefined;
    text10?: boolean | undefined;
    text20?: boolean | undefined;
    text30?: boolean | undefined;
    text40?: boolean | undefined;
    text50?: boolean | undefined;
    text60?: boolean | undefined;
    text65?: boolean | undefined;
    text70?: boolean | undefined;
    text80?: boolean | undefined;
    text90?: boolean | undefined;
    text100?: boolean | undefined;
    text10T?: boolean | undefined;
    text10L?: boolean | undefined;
    text10R?: boolean | undefined;
    text10M?: boolean | undefined;
    text10BO?: boolean | undefined;
    text10H?: boolean | undefined;
    text10BL?: boolean | undefined;
    text20T?: boolean | undefined;
    text20L?: boolean | undefined;
    text20R?: boolean | undefined;
    text20M?: boolean | undefined;
    text20BO?: boolean | undefined;
    text20H?: boolean | undefined;
    text20BL?: boolean | undefined;
    text30T?: boolean | undefined;
    text30L?: boolean | undefined;
    text30R?: boolean | undefined;
    text30M?: boolean | undefined;
    text30BO?: boolean | undefined;
    text30H?: boolean | undefined;
    text30BL?: boolean | undefined;
    text40T?: boolean | undefined;
    text40L?: boolean | undefined;
    text40R?: boolean | undefined;
    text40M?: boolean | undefined;
    text40BO?: boolean | undefined;
    text40H?: boolean | undefined;
    text40BL?: boolean | undefined;
    text50T?: boolean | undefined;
    text50L?: boolean | undefined;
    text50R?: boolean | undefined;
    text50M?: boolean | undefined;
    text50BO?: boolean | undefined;
    text50H?: boolean | undefined;
    text50BL?: boolean | undefined;
    text60T?: boolean | undefined;
    text60L?: boolean | undefined;
    text60R?: boolean | undefined;
    text60M?: boolean | undefined;
    text60BO?: boolean | undefined;
    text60H?: boolean | undefined;
    text60BL?: boolean | undefined;
    text65T?: boolean | undefined;
    text65L?: boolean | undefined;
    text65R?: boolean | undefined;
    text65M?: boolean | undefined;
    text65BO?: boolean | undefined;
    text65H?: boolean | undefined;
    text65BL?: boolean | undefined;
    text70T?: boolean | undefined;
    text70L?: boolean | undefined;
    text70R?: boolean | undefined;
    text70M?: boolean | undefined;
    text70BO?: boolean | undefined;
    text70H?: boolean | undefined;
    text70BL?: boolean | undefined;
    text80T?: boolean | undefined;
    text80L?: boolean | undefined;
    text80R?: boolean | undefined;
    text80M?: boolean | undefined;
    text80BO?: boolean | undefined;
    text80H?: boolean | undefined;
    text80BL?: boolean | undefined;
    text90T?: boolean | undefined;
    text90L?: boolean | undefined;
    text90R?: boolean | undefined;
    text90M?: boolean | undefined;
    text90BO?: boolean | undefined;
    text90H?: boolean | undefined;
    text90BL?: boolean | undefined;
    text100T?: boolean | undefined;
    text100L?: boolean | undefined;
    text100R?: boolean | undefined;
    text100M?: boolean | undefined;
    text100BO?: boolean | undefined;
    text100H?: boolean | undefined;
    text100BL?: boolean | undefined;
    transparent?: boolean | undefined;
    black?: boolean | undefined;
    white?: boolean | undefined;
    dark?: boolean | undefined;
    $backgroundDefault?: boolean | undefined;
    $backgroundElevated?: boolean | undefined;
    $backgroundElevatedLight?: boolean | undefined;
    $backgroundNeutralHeavy?: boolean | undefined;
    $backgroundNeutralIdle?: boolean | undefined;
    $backgroundNeutralMedium?: boolean | undefined;
    $backgroundNeutral?: boolean | undefined;
    $backgroundNeutralLight?: boolean | undefined;
    $backgroundPrimaryHeavy?: boolean | undefined;
    $backgroundPrimaryMedium?: boolean | undefined;
    $backgroundPrimaryLight?: boolean | undefined;
    $backgroundGeneralHeavy?: boolean | undefined;
    $backgroundGeneralMedium?: boolean | undefined;
    $backgroundGeneralLight?: boolean | undefined;
    $backgroundSuccessHeavy?: boolean | undefined;
    $backgroundSuccessLight?: boolean | undefined;
    $backgroundWarningHeavy?: boolean | undefined;
    $backgroundWarningLight?: boolean | undefined;
    $backgroundMajorLight?: boolean | undefined;
    $backgroundMajorHeavy?: boolean | undefined;
    $backgroundDangerHeavy?: boolean | undefined;
    $backgroundDangerLight?: boolean | undefined;
    $backgroundDisabled?: boolean | undefined;
    $backgroundDark?: boolean | undefined;
    $backgroundDarkElevated?: boolean | undefined;
    $backgroundDarkActive?: boolean | undefined;
    $backgroundInverted?: boolean | undefined;
    $textDisabled?: boolean | undefined;
    $textDefault?: boolean | undefined;
    $textNeutralHeavy?: boolean | undefined;
    $textNeutral?: boolean | undefined;
    $textNeutralLight?: boolean | undefined;
    $textDefaultLight?: boolean | undefined;
    $textPrimary?: boolean | undefined;
    $textGeneral?: boolean | undefined;
    $textSuccess?: boolean | undefined;
    $textSuccessLight?: boolean | undefined;
    $textMajor?: boolean | undefined;
    $textDanger?: boolean | undefined;
    $textDangerLight?: boolean | undefined;
    $iconDefault?: boolean | undefined;
    $iconNeutral?: boolean | undefined;
    $iconDefaultLight?: boolean | undefined;
    $iconPrimary?: boolean | undefined;
    $iconPrimaryLight?: boolean | undefined;
    $iconGeneral?: boolean | undefined;
    $iconGeneralLight?: boolean | undefined;
    $iconSuccess?: boolean | undefined;
    $iconSuccessLight?: boolean | undefined;
    $iconMajor?: boolean | undefined;
    $iconDanger?: boolean | undefined;
    $iconDangerLight?: boolean | undefined;
    $iconDisabled?: boolean | undefined;
    $outlineDefault?: boolean | undefined;
    $outlineDisabled?: boolean | undefined;
    $outlineDisabledHeavy?: boolean | undefined;
    $outlineNeutral?: boolean | undefined;
    $outlineNeutralHeavy?: boolean | undefined;
    $outlinePrimary?: boolean | undefined;
    $outlinePrimaryMedium?: boolean | undefined;
    $outlineGeneral?: boolean | undefined;
    $outlineWarning?: boolean | undefined;
    $outlineDanger?: boolean | undefined;
    $outlineInverted?: boolean | undefined;
    $black?: boolean | undefined;
    $white?: boolean | undefined;
    grey1?: boolean | undefined;
    grey5?: boolean | undefined;
    grey10?: boolean | undefined;
    grey20?: boolean | undefined;
    grey30?: boolean | undefined;
    grey40?: boolean | undefined;
    grey50?: boolean | undefined;
    grey60?: boolean | undefined;
    grey70?: boolean | undefined;
    grey80?: boolean | undefined;
    blue1?: boolean | undefined;
    blue5?: boolean | undefined;
    blue10?: boolean | undefined;
    blue20?: boolean | undefined;
    blue30?: boolean | undefined;
    blue40?: boolean | undefined;
    blue50?: boolean | undefined;
    blue60?: boolean | undefined;
    blue70?: boolean | undefined;
    blue80?: boolean | undefined;
    cyan10?: boolean | undefined;
    cyan20?: boolean | undefined;
    cyan30?: boolean | undefined;
    cyan40?: boolean | undefined;
    cyan50?: boolean | undefined;
    cyan60?: boolean | undefined;
    cyan70?: boolean | undefined;
    cyan80?: boolean | undefined;
    green1?: boolean | undefined;
    green5?: boolean | undefined;
    green10?: boolean | undefined;
    green20?: boolean | undefined;
    green30?: boolean | undefined;
    green40?: boolean | undefined;
    green50?: boolean | undefined;
    green60?: boolean | undefined;
    green70?: boolean | undefined;
    green80?: boolean | undefined;
    yellow1?: boolean | undefined;
    yellow5?: boolean | undefined;
    yellow10?: boolean | undefined;
    yellow20?: boolean | undefined;
    yellow30?: boolean | undefined;
    yellow40?: boolean | undefined;
    yellow50?: boolean | undefined;
    yellow60?: boolean | undefined;
    yellow70?: boolean | undefined;
    yellow80?: boolean | undefined;
    orange1?: boolean | undefined;
    orange5?: boolean | undefined;
    orange10?: boolean | undefined;
    orange20?: boolean | undefined;
    orange30?: boolean | undefined;
    orange40?: boolean | undefined;
    orange50?: boolean | undefined;
    orange60?: boolean | undefined;
    orange70?: boolean | undefined;
    orange80?: boolean | undefined;
    red1?: boolean | undefined;
    red5?: boolean | undefined;
    red10?: boolean | undefined;
    red20?: boolean | undefined;
    red30?: boolean | undefined;
    red40?: boolean | undefined;
    red50?: boolean | undefined;
    red60?: boolean | undefined;
    red70?: boolean | undefined;
    red80?: boolean | undefined;
    purple1?: boolean | undefined;
    purple5?: boolean | undefined;
    purple10?: boolean | undefined;
    purple20?: boolean | undefined;
    purple30?: boolean | undefined;
    purple40?: boolean | undefined;
    purple50?: boolean | undefined;
    purple60?: boolean | undefined;
    purple70?: boolean | undefined;
    purple80?: boolean | undefined;
    violet1?: boolean | undefined;
    violet5?: boolean | undefined;
    violet10?: boolean | undefined;
    violet20?: boolean | undefined;
    violet30?: boolean | undefined;
    violet40?: boolean | undefined;
    violet50?: boolean | undefined;
    violet60?: boolean | undefined;
    violet70?: boolean | undefined;
    violet80?: boolean | undefined;
    hint?: string | undefined;
    color?: import("./types").ColorType | undefined;
    placeholderTextColor?: import("./types").ColorType | undefined;
    formatter?: ((value?: string | undefined) => string | undefined) | undefined;
    useGestureHandlerInput?: boolean | undefined;
    readonly?: boolean | undefined;
    value?: string | undefined;
    textAlign?: "left" | "right" | "center" | undefined;
    pointerEvents?: "auto" | "none" | "box-none" | "box-only" | undefined;
    textAlignVertical?: "auto" | "center" | "top" | "bottom" | undefined;
    verticalAlign?: "auto" | "top" | "bottom" | "middle" | undefined;
    selection?: {
        start: number;
        end?: number | undefined;
    } | undefined;
    children?: import("react").ReactNode;
    style?: import("react-native/types").StyleProp<import("react-native/types").TextStyle>;
    testID?: string | undefined;
    removeClippedSubviews?: boolean | undefined;
    onLayout?: ((event: import("react-native/types").LayoutChangeEvent) => void) | undefined;
    onContentSizeChange?: ((e: import("react-native/types").NativeSyntheticEvent<import("react-native/types").TextInputContentSizeChangeEventData>) => void) | undefined;
    onScroll?: ((e: import("react-native/types").NativeSyntheticEvent<import("react-native/types").TextInputScrollEventData>) => void) | undefined;
    scrollEnabled?: boolean | undefined;
    hitSlop?: number | import("react-native/types").Insets | null | undefined;
    id?: string | undefined;
    needsOffscreenAlphaCompositing?: boolean | undefined;
    nativeID?: string | undefined;
    collapsable?: boolean | undefined;
    collapsableChildren?: boolean | undefined;
    renderToHardwareTextureAndroid?: boolean | undefined;
    focusable?: boolean | undefined;
    tabIndex?: 0 | -1 | undefined;
    shouldRasterizeIOS?: boolean | undefined;
    isTVSelectable?: boolean | undefined;
    hasTVPreferredFocus?: boolean | undefined;
    tvParallaxShiftDistanceX?: number | undefined;
    tvParallaxShiftDistanceY?: number | undefined;
    tvParallaxTiltAngle?: number | undefined;
    tvParallaxMagnification?: number | undefined;
    onStartShouldSetResponder?: ((event: import("react-native/types").GestureResponderEvent) => boolean) | undefined;
    onMoveShouldSetResponder?: ((event: import("react-native/types").GestureResponderEvent) => boolean) | undefined;
    onResponderEnd?: ((event: import("react-native/types").GestureResponderEvent) => void) | undefined;
    onResponderGrant?: ((event: import("react-native/types").GestureResponderEvent) => void) | undefined;
    onResponderReject?: ((event: import("react-native/types").GestureResponderEvent) => void) | undefined;
    onResponderMove?: ((event: import("react-native/types").GestureResponderEvent) => void) | undefined;
    onResponderRelease?: ((event: import("react-native/types").GestureResponderEvent) => void) | undefined;
    onResponderStart?: ((event: import("react-native/types").GestureResponderEvent) => void) | undefined;
    onResponderTerminationRequest?: ((event: import("react-native/types").GestureResponderEvent) => boolean) | undefined;
    onResponderTerminate?: ((event: import("react-native/types").GestureResponderEvent) => void) | undefined;
    onStartShouldSetResponderCapture?: ((event: import("react-native/types").GestureResponderEvent) => boolean) | undefined;
    onMoveShouldSetResponderCapture?: ((event: import("react-native/types").GestureResponderEvent) => boolean) | undefined;
    onTouchStart?: ((event: import("react-native/types").GestureResponderEvent) => void) | undefined;
    onTouchMove?: ((event: import("react-native/types").GestureResponderEvent) => void) | undefined;
    onTouchEnd?: ((event: import("react-native/types").GestureResponderEvent) => void) | undefined;
    onTouchCancel?: ((event: import("react-native/types").GestureResponderEvent) => void) | undefined;
    onTouchEndCapture?: ((event: import("react-native/types").GestureResponderEvent) => void) | undefined;
    onPointerEnter?: ((event: import("react-native/types").PointerEvent) => void) | undefined;
    onPointerEnterCapture?: ((event: import("react-native/types").PointerEvent) => void) | undefined;
    onPointerLeave?: ((event: import("react-native/types").PointerEvent) => void) | undefined;
    onPointerLeaveCapture?: ((event: import("react-native/types").PointerEvent) => void) | undefined;
    onPointerMove?: ((event: import("react-native/types").PointerEvent) => void) | undefined;
    onPointerMoveCapture?: ((event: import("react-native/types").PointerEvent) => void) | undefined;
    onPointerCancel?: ((event: import("react-native/types").PointerEvent) => void) | undefined;
    onPointerCancelCapture?: ((event: import("react-native/types").PointerEvent) => void) | undefined;
    onPointerDown?: ((event: import("react-native/types").PointerEvent) => void) | undefined;
    onPointerDownCapture?: ((event: import("react-native/types").PointerEvent) => void) | undefined;
    onPointerUp?: ((event: import("react-native/types").PointerEvent) => void) | undefined;
    onPointerUpCapture?: ((event: import("react-native/types").PointerEvent) => void) | undefined;
    accessible?: boolean | undefined;
    accessibilityActions?: readonly Readonly<{
        name: string;
        label?: string | undefined;
    }>[] | undefined;
    accessibilityLabel?: string | undefined;
    'aria-label'?: string | undefined;
    accessibilityRole?: import("react-native/types").AccessibilityRole | undefined;
    accessibilityState?: import("react-native/types").AccessibilityState | undefined;
    'aria-busy'?: boolean | undefined;
    'aria-checked'?: boolean | "mixed" | undefined;
    'aria-disabled'?: boolean | undefined;
    'aria-expanded'?: boolean | undefined;
    'aria-selected'?: boolean | undefined;
    accessibilityHint?: string | undefined;
    accessibilityValue?: import("react-native/types").AccessibilityValue | undefined;
    'aria-valuemax'?: number | undefined;
    'aria-valuemin'?: number | undefined;
    'aria-valuenow'?: number | undefined;
    'aria-valuetext'?: string | undefined;
    onAccessibilityAction?: ((event: import("react-native/types").AccessibilityActionEvent) => void) | undefined;
    importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | undefined;
    'aria-hidden'?: boolean | undefined;
    'aria-modal'?: boolean | undefined;
    role?: import("react-native/types").Role | undefined;
    accessibilityLabelledBy?: string | string[] | undefined;
    'aria-labelledby'?: string | undefined;
    accessibilityLiveRegion?: "none" | "polite" | "assertive" | undefined;
    'aria-live'?: "polite" | "assertive" | "off" | undefined;
    accessibilityElementsHidden?: boolean | undefined;
    accessibilityViewIsModal?: boolean | undefined;
    onAccessibilityEscape?: (() => void) | undefined;
    onAccessibilityTap?: (() => void) | undefined;
    onMagicTap?: (() => void) | undefined;
    accessibilityIgnoresInvertColors?: boolean | undefined;
    accessibilityLanguage?: string | undefined;
    accessibilityShowsLargeContentViewer?: boolean | undefined;
    accessibilityLargeContentTitle?: string | undefined;
    onPress?: ((e: import("react-native/types").NativeSyntheticEvent<import("react-native/types").NativeTouchEvent>) => void) | undefined;
    onPressIn?: ((e: import("react-native/types").NativeSyntheticEvent<import("react-native/types").NativeTouchEvent>) => void) | undefined;
    onPressOut?: ((e: import("react-native/types").NativeSyntheticEvent<import("react-native/types").NativeTouchEvent>) => void) | undefined;
    rejectResponderTermination?: boolean | null | undefined;
    onBlur?: ((e: import("react-native/types").NativeSyntheticEvent<import("react-native/types").TextInputFocusEventData>) => void) | undefined;
    onFocus?: ((e: import("react-native/types").NativeSyntheticEvent<import("react-native/types").TextInputFocusEventData>) => void) | undefined;
    allowFontScaling?: boolean | undefined;
    numberOfLines?: number | undefined;
    maxFontSizeMultiplier?: number | null | undefined;
    lineBreakStrategyIOS?: "none" | "standard" | "hangul-word" | "push-out" | undefined;
    selectionColor?: import("react-native/types").ColorValue | undefined;
    textBreakStrategy?: "simple" | "highQuality" | "balanced" | undefined;
    autoCapitalize?: "none" | "sentences" | "words" | "characters" | undefined;
    autoComplete?: "name" | "off" | "email" | "url" | "additional-name" | "address-line1" | "address-line2" | "birthdate-day" | "birthdate-full" | "birthdate-month" | "birthdate-year" | "cc-csc" | "cc-exp" | "cc-exp-day" | "cc-exp-month" | "cc-exp-year" | "cc-number" | "cc-name" | "cc-given-name" | "cc-middle-name" | "cc-family-name" | "cc-type" | "country" | "current-password" | "family-name" | "gender" | "given-name" | "honorific-prefix" | "honorific-suffix" | "name-family" | "name-given" | "name-middle" | "name-middle-initial" | "name-prefix" | "name-suffix" | "new-password" | "nickname" | "one-time-code" | "organization" | "organization-title" | "password" | "password-new" | "postal-address" | "postal-address-country" | "postal-address-extended" | "postal-address-extended-postal-code" | "postal-address-locality" | "postal-address-region" | "postal-code" | "street-address" | "sms-otp" | "tel" | "tel-country-code" | "tel-national" | "tel-device" | "username" | "username-new" | undefined;
    autoCorrect?: boolean | undefined;
    autoFocus?: boolean | undefined;
    blurOnSubmit?: boolean | undefined;
    submitBehavior?: import("react-native/types").SubmitBehavior | undefined;
    caretHidden?: boolean | undefined;
    contextMenuHidden?: boolean | undefined;
    defaultValue?: string | undefined;
    editable?: boolean | undefined;
    keyboardType?: import("react-native/types").KeyboardTypeOptions | undefined;
    inputMode?: import("react-native/types").InputModeOptions | undefined;
    maxLength?: number | undefined;
    multiline?: boolean | undefined;
    onChange?: ((e: import("react-native/types").NativeSyntheticEvent<import("react-native/types").TextInputChangeEventData>) => void) | undefined;
    onChangeText?: ((text: string) => void) | undefined;
    onEndEditing?: ((e: import("react-native/types").NativeSyntheticEvent<import("react-native/types").TextInputEndEditingEventData>) => void) | undefined;
    onSelectionChange?: ((e: import("react-native/types").NativeSyntheticEvent<import("react-native/types").TextInputSelectionChangeEventData>) => void) | undefined;
    onSubmitEditing?: ((e: import("react-native/types").NativeSyntheticEvent<import("react-native/types").TextInputSubmitEditingEventData>) => void) | undefined;
    onKeyPress?: ((e: import("react-native/types").NativeSyntheticEvent<import("react-native/types").TextInputKeyPressEventData>) => void) | undefined;
    placeholder?: string | undefined;
    readOnly?: boolean | undefined;
    returnKeyType?: import("react-native/types").ReturnKeyTypeOptions | undefined;
    enterKeyHint?: import("react-native/types").EnterKeyHintTypeOptions | undefined;
    secureTextEntry?: boolean | undefined;
    selectTextOnFocus?: boolean | undefined;
    inputAccessoryViewID?: string | undefined;
    disableKeyboardShortcuts?: boolean | undefined;
    clearButtonMode?: "always" | "never" | "while-editing" | "unless-editing" | undefined;
    clearTextOnFocus?: boolean | undefined;
    dataDetectorTypes?: import("react-native/types").DataDetectorTypes | import("react-native/types").DataDetectorTypes[] | undefined;
    enablesReturnKeyAutomatically?: boolean | undefined;
    keyboardAppearance?: "default" | "light" | "dark" | undefined;
    passwordRules?: string | null | undefined;
    selectionState?: import("react-native/types").DocumentSelectionState | undefined;
    spellCheck?: boolean | undefined;
    textContentType?: "none" | "name" | "nickname" | "password" | "username" | "flightNumber" | "URL" | "addressCity" | "addressCityAndState" | "addressState" | "countryName" | "creditCardNumber" | "creditCardExpiration" | "creditCardExpirationMonth" | "creditCardExpirationYear" | "creditCardSecurityCode" | "creditCardType" | "creditCardName" | "creditCardGivenName" | "creditCardMiddleName" | "creditCardFamilyName" | "emailAddress" | "familyName" | "fullStreetAddress" | "givenName" | "jobTitle" | "location" | "middleName" | "namePrefix" | "nameSuffix" | "organizationName" | "postalCode" | "streetAddressLine1" | "streetAddressLine2" | "sublocality" | "telephoneNumber" | "newPassword" | "oneTimeCode" | "birthdate" | "birthdateDay" | "birthdateMonth" | "birthdateYear" | "cellularEID" | "cellularIMEI" | "dateTime" | "shipmentTrackingNumber" | undefined;
    lineBreakModeIOS?: "middle" | "head" | "tail" | "clip" | "wordWrapping" | "char" | undefined;
    smartInsertDelete?: boolean | undefined;
    cursorColor?: import("react-native/types").ColorValue | null | undefined;
    selectionHandleColor?: import("react-native/types").ColorValue | null | undefined;
    importantForAutofill?: "auto" | "yes" | "no" | "noExcludeDescendants" | "yesExcludeDescendants" | undefined;
    disableFullscreenUI?: boolean | undefined;
    inlineImageLeft?: string | undefined;
    inlineImagePadding?: number | undefined;
    returnKeyLabel?: string | undefined;
    underlineColorAndroid?: import("react-native/types").ColorValue | undefined;
    showSoftInputOnFocus?: boolean | undefined;
    showMandatoryIndication?: boolean | undefined;
    recorderTag?: import("../../typings/recorderTypes").RecorderTag | undefined;
    label?: string | undefined;
    labelColor?: import("./types").ColorType | undefined;
    labelStyle?: import("react-native/types").StyleProp<import("react-native/types").TextStyle>;
    labelProps?: import("../text").TextProps | undefined;
    validationMessagePosition?: import("./types").ValidationMessagePositionType | undefined;
    floatingPlaceholder?: boolean | undefined;
    enableErrors?: boolean | undefined;
    floatingPlaceholderColor?: import("./types").ColorType | undefined;
    floatingPlaceholderStyle?: ((false | "" | import("react-native/types").TextStyle | import("react-native/types").RegisteredStyle<import("react-native/types").TextStyle> | import("react-native/types").RecursiveArray<import("react-native/types").TextStyle | import("react-native/types").Falsy | import("react-native/types").RegisteredStyle<import("react-native/types").TextStyle>> | null) & import("react-native/types").TextStyle) | undefined;
    floatOnFocus?: boolean | undefined;
    extraOffset?: number | undefined;
    onClear?: (() => void) | undefined;
    clearButtonStyle?: import("react-native/types").StyleProp<import("react-native/types").ViewStyle>;
    validationMessage?: string | string[] | undefined;
    validationMessageStyle?: import("react-native/types").StyleProp<import("react-native/types").TextStyle>;
    validationIcon?: import("../icon").IconProps | undefined;
    retainValidationSpace?: boolean | undefined;
    validate?: import("./types").Validator | import("./types").Validator[] | undefined;
    showCharCounter?: boolean | undefined;
    charCounterStyle?: import("react-native/types").TextStyle | undefined;
    leadingAccessory?: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | undefined;
    trailingAccessory?: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | undefined;
    topTrailingAccessory?: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | undefined;
    bottomAccessory?: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | undefined;
    showClearButton?: boolean | undefined;
    helperText?: string | undefined;
    validateOnStart?: boolean | undefined;
    validateOnChange?: boolean | undefined;
    validationDebounceTime?: number | undefined;
    validateOnBlur?: boolean | undefined;
    onValidationFailed?: ((failedValidatorIndex: number) => void) | undefined;
    onChangeValidity?: ((isValid: boolean) => void) | undefined;
    fieldStyle?: import("react-native/types").StyleProp<import("react-native/types").ViewStyle>;
    dynamicFieldStyle?: ((context: import("./types").FieldContextType, props: {
        preset: string | null | undefined;
    }) => import("react-native/types").StyleProp<import("react-native/types").ViewStyle>) | undefined;
    containerProps?: Omit<import("../view").ViewProps, "style"> | undefined;
    containerStyle?: import("react-native/types").StyleProp<import("react-native/types").ViewStyle>;
    centered?: boolean | undefined;
    innerFlexBehavior?: boolean | undefined;
    modifiers: import("../../commons/modifiers").ExtractedStyle;
    forwardedRef: import("react").ForwardedRef<any>;
} | {
    fieldStyle: (import("react-native/types").StyleProp<import("react-native/types").ViewStyle> | {
        borderBottomWidth: number;
        borderBottomColor: string;
        paddingBottom: number;
    } | {
        borderWidth: number;
        borderColor: string;
        borderRadius: number;
        paddingHorizontal: number;
        paddingVertical: number;
    })[];
    margin?: boolean | undefined;
    marginL?: boolean | undefined;
    marginT?: boolean | undefined;
    marginR?: boolean | undefined;
    marginB?: boolean | undefined;
    marginH?: boolean | undefined;
    marginV?: boolean | undefined;
    padding?: boolean | undefined;
    paddingL?: boolean | undefined;
    paddingT?: boolean | undefined;
    paddingR?: boolean | undefined;
    paddingB?: boolean | undefined;
    paddingH?: boolean | undefined;
    paddingV?: boolean | undefined;
    text10?: boolean | undefined;
    text20?: boolean | undefined;
    text30?: boolean | undefined;
    text40?: boolean | undefined;
    text50?: boolean | undefined;
    text60?: boolean | undefined;
    text65?: boolean | undefined;
    text70?: boolean | undefined;
    text80?: boolean | undefined;
    text90?: boolean | undefined;
    text100?: boolean | undefined;
    text10T?: boolean | undefined;
    text10L?: boolean | undefined;
    text10R?: boolean | undefined;
    text10M?: boolean | undefined;
    text10BO?: boolean | undefined;
    text10H?: boolean | undefined;
    text10BL?: boolean | undefined;
    text20T?: boolean | undefined;
    text20L?: boolean | undefined;
    text20R?: boolean | undefined;
    text20M?: boolean | undefined;
    text20BO?: boolean | undefined;
    text20H?: boolean | undefined;
    text20BL?: boolean | undefined;
    text30T?: boolean | undefined;
    text30L?: boolean | undefined;
    text30R?: boolean | undefined;
    text30M?: boolean | undefined;
    text30BO?: boolean | undefined;
    text30H?: boolean | undefined;
    text30BL?: boolean | undefined;
    text40T?: boolean | undefined;
    text40L?: boolean | undefined;
    text40R?: boolean | undefined;
    text40M?: boolean | undefined;
    text40BO?: boolean | undefined;
    text40H?: boolean | undefined;
    text40BL?: boolean | undefined;
    text50T?: boolean | undefined;
    text50L?: boolean | undefined;
    text50R?: boolean | undefined;
    text50M?: boolean | undefined;
    text50BO?: boolean | undefined;
    text50H?: boolean | undefined;
    text50BL?: boolean | undefined;
    text60T?: boolean | undefined;
    text60L?: boolean | undefined;
    text60R?: boolean | undefined;
    text60M?: boolean | undefined;
    text60BO?: boolean | undefined;
    text60H?: boolean | undefined;
    text60BL?: boolean | undefined;
    text65T?: boolean | undefined;
    text65L?: boolean | undefined;
    text65R?: boolean | undefined;
    text65M?: boolean | undefined;
    text65BO?: boolean | undefined;
    text65H?: boolean | undefined;
    text65BL?: boolean | undefined;
    text70T?: boolean | undefined;
    text70L?: boolean | undefined;
    text70R?: boolean | undefined;
    text70M?: boolean | undefined;
    text70BO?: boolean | undefined;
    text70H?: boolean | undefined;
    text70BL?: boolean | undefined;
    text80T?: boolean | undefined;
    text80L?: boolean | undefined;
    text80R?: boolean | undefined;
    text80M?: boolean | undefined;
    text80BO?: boolean | undefined;
    text80H?: boolean | undefined;
    text80BL?: boolean | undefined;
    text90T?: boolean | undefined;
    text90L?: boolean | undefined;
    text90R?: boolean | undefined;
    text90M?: boolean | undefined;
    text90BO?: boolean | undefined;
    text90H?: boolean | undefined;
    text90BL?: boolean | undefined;
    text100T?: boolean | undefined;
    text100L?: boolean | undefined;
    text100R?: boolean | undefined;
    text100M?: boolean | undefined;
    text100BO?: boolean | undefined;
    text100H?: boolean | undefined;
    text100BL?: boolean | undefined;
    transparent?: boolean | undefined;
    black?: boolean | undefined;
    white?: boolean | undefined;
    dark?: boolean | undefined;
    $backgroundDefault?: boolean | undefined;
    $backgroundElevated?: boolean | undefined;
    $backgroundElevatedLight?: boolean | undefined;
    $backgroundNeutralHeavy?: boolean | undefined;
    $backgroundNeutralIdle?: boolean | undefined;
    $backgroundNeutralMedium?: boolean | undefined;
    $backgroundNeutral?: boolean | undefined;
    $backgroundNeutralLight?: boolean | undefined;
    $backgroundPrimaryHeavy?: boolean | undefined;
    $backgroundPrimaryMedium?: boolean | undefined;
    $backgroundPrimaryLight?: boolean | undefined;
    $backgroundGeneralHeavy?: boolean | undefined;
    $backgroundGeneralMedium?: boolean | undefined;
    $backgroundGeneralLight?: boolean | undefined;
    $backgroundSuccessHeavy?: boolean | undefined;
    $backgroundSuccessLight?: boolean | undefined;
    $backgroundWarningHeavy?: boolean | undefined;
    $backgroundWarningLight?: boolean | undefined;
    $backgroundMajorLight?: boolean | undefined;
    $backgroundMajorHeavy?: boolean | undefined;
    $backgroundDangerHeavy?: boolean | undefined;
    $backgroundDangerLight?: boolean | undefined;
    $backgroundDisabled?: boolean | undefined;
    $backgroundDark?: boolean | undefined;
    $backgroundDarkElevated?: boolean | undefined;
    $backgroundDarkActive?: boolean | undefined;
    $backgroundInverted?: boolean | undefined;
    $textDisabled?: boolean | undefined;
    $textDefault?: boolean | undefined;
    $textNeutralHeavy?: boolean | undefined;
    $textNeutral?: boolean | undefined;
    $textNeutralLight?: boolean | undefined;
    $textDefaultLight?: boolean | undefined;
    $textPrimary?: boolean | undefined;
    $textGeneral?: boolean | undefined;
    $textSuccess?: boolean | undefined;
    $textSuccessLight?: boolean | undefined;
    $textMajor?: boolean | undefined;
    $textDanger?: boolean | undefined;
    $textDangerLight?: boolean | undefined;
    $iconDefault?: boolean | undefined;
    $iconNeutral?: boolean | undefined;
    $iconDefaultLight?: boolean | undefined;
    $iconPrimary?: boolean | undefined;
    $iconPrimaryLight?: boolean | undefined;
    $iconGeneral?: boolean | undefined;
    $iconGeneralLight?: boolean | undefined;
    $iconSuccess?: boolean | undefined;
    $iconSuccessLight?: boolean | undefined;
    $iconMajor?: boolean | undefined;
    $iconDanger?: boolean | undefined;
    $iconDangerLight?: boolean | undefined;
    $iconDisabled?: boolean | undefined;
    $outlineDefault?: boolean | undefined;
    $outlineDisabled?: boolean | undefined;
    $outlineDisabledHeavy?: boolean | undefined;
    $outlineNeutral?: boolean | undefined;
    $outlineNeutralHeavy?: boolean | undefined;
    $outlinePrimary?: boolean | undefined;
    $outlinePrimaryMedium?: boolean | undefined;
    $outlineGeneral?: boolean | undefined;
    $outlineWarning?: boolean | undefined;
    $outlineDanger?: boolean | undefined;
    $outlineInverted?: boolean | undefined;
    $black?: boolean | undefined;
    $white?: boolean | undefined;
    grey1?: boolean | undefined;
    grey5?: boolean | undefined;
    grey10?: boolean | undefined;
    grey20?: boolean | undefined;
    grey30?: boolean | undefined;
    grey40?: boolean | undefined;
    grey50?: boolean | undefined;
    grey60?: boolean | undefined;
    grey70?: boolean | undefined;
    grey80?: boolean | undefined;
    blue1?: boolean | undefined;
    blue5?: boolean | undefined;
    blue10?: boolean | undefined;
    blue20?: boolean | undefined;
    blue30?: boolean | undefined;
    blue40?: boolean | undefined;
    blue50?: boolean | undefined;
    blue60?: boolean | undefined;
    blue70?: boolean | undefined;
    blue80?: boolean | undefined;
    cyan10?: boolean | undefined;
    cyan20?: boolean | undefined;
    cyan30?: boolean | undefined;
    cyan40?: boolean | undefined;
    cyan50?: boolean | undefined;
    cyan60?: boolean | undefined;
    cyan70?: boolean | undefined;
    cyan80?: boolean | undefined;
    green1?: boolean | undefined;
    green5?: boolean | undefined;
    green10?: boolean | undefined;
    green20?: boolean | undefined;
    green30?: boolean | undefined;
    green40?: boolean | undefined;
    green50?: boolean | undefined;
    green60?: boolean | undefined;
    green70?: boolean | undefined;
    green80?: boolean | undefined;
    yellow1?: boolean | undefined;
    yellow5?: boolean | undefined;
    yellow10?: boolean | undefined;
    yellow20?: boolean | undefined;
    yellow30?: boolean | undefined;
    yellow40?: boolean | undefined;
    yellow50?: boolean | undefined;
    yellow60?: boolean | undefined;
    yellow70?: boolean | undefined;
    yellow80?: boolean | undefined;
    orange1?: boolean | undefined;
    orange5?: boolean | undefined;
    orange10?: boolean | undefined;
    orange20?: boolean | undefined;
    orange30?: boolean | undefined;
    orange40?: boolean | undefined;
    orange50?: boolean | undefined;
    orange60?: boolean | undefined;
    orange70?: boolean | undefined;
    orange80?: boolean | undefined;
    red1?: boolean | undefined;
    red5?: boolean | undefined;
    red10?: boolean | undefined;
    red20?: boolean | undefined;
    red30?: boolean | undefined;
    red40?: boolean | undefined;
    red50?: boolean | undefined;
    red60?: boolean | undefined;
    red70?: boolean | undefined;
    red80?: boolean | undefined;
    purple1?: boolean | undefined;
    purple5?: boolean | undefined;
    purple10?: boolean | undefined;
    purple20?: boolean | undefined;
    purple30?: boolean | undefined;
    purple40?: boolean | undefined;
    purple50?: boolean | undefined;
    purple60?: boolean | undefined;
    purple70?: boolean | undefined;
    purple80?: boolean | undefined;
    violet1?: boolean | undefined;
    violet5?: boolean | undefined;
    violet10?: boolean | undefined;
    violet20?: boolean | undefined;
    violet30?: boolean | undefined;
    violet40?: boolean | undefined;
    violet50?: boolean | undefined;
    violet60?: boolean | undefined;
    violet70?: boolean | undefined;
    violet80?: boolean | undefined;
    hint?: string | undefined;
    color?: import("./types").ColorType | undefined;
    placeholderTextColor: import("./types").ColorType | {
        default: string;
        error: string;
        focus: string;
        disabled: string;
    };
    formatter?: ((value?: string | undefined) => string | undefined) | undefined;
    useGestureHandlerInput?: boolean | undefined;
    readonly?: boolean | undefined;
    value?: string | undefined;
    textAlign?: "left" | "right" | "center" | undefined;
    pointerEvents?: "auto" | "none" | "box-none" | "box-only" | undefined;
    textAlignVertical?: "auto" | "center" | "top" | "bottom" | undefined;
    verticalAlign?: "auto" | "top" | "bottom" | "middle" | undefined;
    selection?: {
        start: number;
        end?: number | undefined;
    } | undefined;
    children?: import("react").ReactNode;
    style: false | "" | import("react-native/types").TextStyle | import("react-native/types").RegisteredStyle<import("react-native/types").TextStyle> | import("react-native/types").RecursiveArray<import("react-native/types").TextStyle | import("react-native/types").Falsy | import("react-native/types").RegisteredStyle<import("react-native/types").TextStyle>> | null;
    testID?: string | undefined;
    removeClippedSubviews?: boolean | undefined;
    onLayout?: ((event: import("react-native/types").LayoutChangeEvent) => void) | undefined;
    onContentSizeChange?: ((e: import("react-native/types").NativeSyntheticEvent<import("react-native/types").TextInputContentSizeChangeEventData>) => void) | undefined;
    onScroll?: ((e: import("react-native/types").NativeSyntheticEvent<import("react-native/types").TextInputScrollEventData>) => void) | undefined;
    scrollEnabled?: boolean | undefined;
    hitSlop?: number | import("react-native/types").Insets | null | undefined;
    id?: string | undefined;
    needsOffscreenAlphaCompositing?: boolean | undefined;
    nativeID?: string | undefined;
    collapsable?: boolean | undefined;
    collapsableChildren?: boolean | undefined;
    renderToHardwareTextureAndroid?: boolean | undefined;
    focusable?: boolean | undefined;
    tabIndex?: 0 | -1 | undefined;
    shouldRasterizeIOS?: boolean | undefined;
    isTVSelectable?: boolean | undefined;
    hasTVPreferredFocus?: boolean | undefined;
    tvParallaxShiftDistanceX?: number | undefined;
    tvParallaxShiftDistanceY?: number | undefined;
    tvParallaxTiltAngle?: number | undefined;
    tvParallaxMagnification?: number | undefined;
    onStartShouldSetResponder?: ((event: import("react-native/types").GestureResponderEvent) => boolean) | undefined;
    onMoveShouldSetResponder?: ((event: import("react-native/types").GestureResponderEvent) => boolean) | undefined;
    onResponderEnd?: ((event: import("react-native/types").GestureResponderEvent) => void) | undefined;
    onResponderGrant?: ((event: import("react-native/types").GestureResponderEvent) => void) | undefined;
    onResponderReject?: ((event: import("react-native/types").GestureResponderEvent) => void) | undefined;
    onResponderMove?: ((event: import("react-native/types").GestureResponderEvent) => void) | undefined;
    onResponderRelease?: ((event: import("react-native/types").GestureResponderEvent) => void) | undefined;
    onResponderStart?: ((event: import("react-native/types").GestureResponderEvent) => void) | undefined;
    onResponderTerminationRequest?: ((event: import("react-native/types").GestureResponderEvent) => boolean) | undefined;
    onResponderTerminate?: ((event: import("react-native/types").GestureResponderEvent) => void) | undefined;
    onStartShouldSetResponderCapture?: ((event: import("react-native/types").GestureResponderEvent) => boolean) | undefined;
    onMoveShouldSetResponderCapture?: ((event: import("react-native/types").GestureResponderEvent) => boolean) | undefined;
    onTouchStart?: ((event: import("react-native/types").GestureResponderEvent) => void) | undefined;
    onTouchMove?: ((event: import("react-native/types").GestureResponderEvent) => void) | undefined;
    onTouchEnd?: ((event: import("react-native/types").GestureResponderEvent) => void) | undefined;
    onTouchCancel?: ((event: import("react-native/types").GestureResponderEvent) => void) | undefined;
    onTouchEndCapture?: ((event: import("react-native/types").GestureResponderEvent) => void) | undefined;
    onPointerEnter?: ((event: import("react-native/types").PointerEvent) => void) | undefined;
    onPointerEnterCapture?: ((event: import("react-native/types").PointerEvent) => void) | undefined;
    onPointerLeave?: ((event: import("react-native/types").PointerEvent) => void) | undefined;
    onPointerLeaveCapture?: ((event: import("react-native/types").PointerEvent) => void) | undefined;
    onPointerMove?: ((event: import("react-native/types").PointerEvent) => void) | undefined;
    onPointerMoveCapture?: ((event: import("react-native/types").PointerEvent) => void) | undefined;
    onPointerCancel?: ((event: import("react-native/types").PointerEvent) => void) | undefined;
    onPointerCancelCapture?: ((event: import("react-native/types").PointerEvent) => void) | undefined;
    onPointerDown?: ((event: import("react-native/types").PointerEvent) => void) | undefined;
    onPointerDownCapture?: ((event: import("react-native/types").PointerEvent) => void) | undefined;
    onPointerUp?: ((event: import("react-native/types").PointerEvent) => void) | undefined;
    onPointerUpCapture?: ((event: import("react-native/types").PointerEvent) => void) | undefined;
    accessible?: boolean | undefined;
    accessibilityActions?: readonly Readonly<{
        name: string;
        label?: string | undefined;
    }>[] | undefined;
    accessibilityLabel?: string | undefined;
    'aria-label'?: string | undefined;
    accessibilityRole?: import("react-native/types").AccessibilityRole | undefined;
    accessibilityState?: import("react-native/types").AccessibilityState | undefined;
    'aria-busy'?: boolean | undefined;
    'aria-checked'?: boolean | "mixed" | undefined;
    'aria-disabled'?: boolean | undefined;
    'aria-expanded'?: boolean | undefined;
    'aria-selected'?: boolean | undefined;
    accessibilityHint?: string | undefined;
    accessibilityValue?: import("react-native/types").AccessibilityValue | undefined;
    'aria-valuemax'?: number | undefined;
    'aria-valuemin'?: number | undefined;
    'aria-valuenow'?: number | undefined;
    'aria-valuetext'?: string | undefined;
    onAccessibilityAction?: ((event: import("react-native/types").AccessibilityActionEvent) => void) | undefined;
    importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | undefined;
    'aria-hidden'?: boolean | undefined;
    'aria-modal'?: boolean | undefined;
    role?: import("react-native/types").Role | undefined;
    accessibilityLabelledBy?: string | string[] | undefined;
    'aria-labelledby'?: string | undefined;
    accessibilityLiveRegion?: "none" | "polite" | "assertive" | undefined;
    'aria-live'?: "polite" | "assertive" | "off" | undefined;
    accessibilityElementsHidden?: boolean | undefined;
    accessibilityViewIsModal?: boolean | undefined;
    onAccessibilityEscape?: (() => void) | undefined;
    onAccessibilityTap?: (() => void) | undefined;
    onMagicTap?: (() => void) | undefined;
    accessibilityIgnoresInvertColors?: boolean | undefined;
    accessibilityLanguage?: string | undefined;
    accessibilityShowsLargeContentViewer?: boolean | undefined;
    accessibilityLargeContentTitle?: string | undefined;
    onPress?: ((e: import("react-native/types").NativeSyntheticEvent<import("react-native/types").NativeTouchEvent>) => void) | undefined;
    onPressIn?: ((e: import("react-native/types").NativeSyntheticEvent<import("react-native/types").NativeTouchEvent>) => void) | undefined;
    onPressOut?: ((e: import("react-native/types").NativeSyntheticEvent<import("react-native/types").NativeTouchEvent>) => void) | undefined;
    rejectResponderTermination?: boolean | null | undefined;
    onBlur?: ((e: import("react-native/types").NativeSyntheticEvent<import("react-native/types").TextInputFocusEventData>) => void) | undefined;
    onFocus?: ((e: import("react-native/types").NativeSyntheticEvent<import("react-native/types").TextInputFocusEventData>) => void) | undefined;
    allowFontScaling?: boolean | undefined;
    numberOfLines?: number | undefined;
    maxFontSizeMultiplier?: number | null | undefined;
    lineBreakStrategyIOS?: "none" | "standard" | "hangul-word" | "push-out" | undefined;
    selectionColor?: import("react-native/types").ColorValue | undefined;
    textBreakStrategy?: "simple" | "highQuality" | "balanced" | undefined;
    autoCapitalize?: "none" | "sentences" | "words" | "characters" | undefined;
    autoComplete?: "name" | "off" | "email" | "url" | "additional-name" | "address-line1" | "address-line2" | "birthdate-day" | "birthdate-full" | "birthdate-month" | "birthdate-year" | "cc-csc" | "cc-exp" | "cc-exp-day" | "cc-exp-month" | "cc-exp-year" | "cc-number" | "cc-name" | "cc-given-name" | "cc-middle-name" | "cc-family-name" | "cc-type" | "country" | "current-password" | "family-name" | "gender" | "given-name" | "honorific-prefix" | "honorific-suffix" | "name-family" | "name-given" | "name-middle" | "name-middle-initial" | "name-prefix" | "name-suffix" | "new-password" | "nickname" | "one-time-code" | "organization" | "organization-title" | "password" | "password-new" | "postal-address" | "postal-address-country" | "postal-address-extended" | "postal-address-extended-postal-code" | "postal-address-locality" | "postal-address-region" | "postal-code" | "street-address" | "sms-otp" | "tel" | "tel-country-code" | "tel-national" | "tel-device" | "username" | "username-new" | undefined;
    autoCorrect?: boolean | undefined;
    autoFocus?: boolean | undefined;
    blurOnSubmit?: boolean | undefined;
    submitBehavior?: import("react-native/types").SubmitBehavior | undefined;
    caretHidden?: boolean | undefined;
    contextMenuHidden?: boolean | undefined;
    defaultValue?: string | undefined;
    editable?: boolean | undefined;
    keyboardType?: import("react-native/types").KeyboardTypeOptions | undefined;
    inputMode?: import("react-native/types").InputModeOptions | undefined;
    maxLength?: number | undefined;
    multiline?: boolean | undefined;
    onChange?: ((e: import("react-native/types").NativeSyntheticEvent<import("react-native/types").TextInputChangeEventData>) => void) | undefined;
    onChangeText?: ((text: string) => void) | undefined;
    onEndEditing?: ((e: import("react-native/types").NativeSyntheticEvent<import("react-native/types").TextInputEndEditingEventData>) => void) | undefined;
    onSelectionChange?: ((e: import("react-native/types").NativeSyntheticEvent<import("react-native/types").TextInputSelectionChangeEventData>) => void) | undefined;
    onSubmitEditing?: ((e: import("react-native/types").NativeSyntheticEvent<import("react-native/types").TextInputSubmitEditingEventData>) => void) | undefined;
    onKeyPress?: ((e: import("react-native/types").NativeSyntheticEvent<import("react-native/types").TextInputKeyPressEventData>) => void) | undefined;
    placeholder?: string | undefined;
    readOnly?: boolean | undefined;
    returnKeyType?: import("react-native/types").ReturnKeyTypeOptions | undefined;
    enterKeyHint?: import("react-native/types").EnterKeyHintTypeOptions | undefined;
    secureTextEntry?: boolean | undefined;
    selectTextOnFocus?: boolean | undefined;
    inputAccessoryViewID?: string | undefined;
    disableKeyboardShortcuts?: boolean | undefined;
    clearButtonMode?: "always" | "never" | "while-editing" | "unless-editing" | undefined;
    clearTextOnFocus?: boolean | undefined;
    dataDetectorTypes?: import("react-native/types").DataDetectorTypes | import("react-native/types").DataDetectorTypes[] | undefined;
    enablesReturnKeyAutomatically?: boolean | undefined;
    keyboardAppearance?: "default" | "light" | "dark" | undefined;
    passwordRules?: string | null | undefined;
    selectionState?: import("react-native/types").DocumentSelectionState | undefined;
    spellCheck?: boolean | undefined;
    textContentType?: "none" | "name" | "nickname" | "password" | "username" | "flightNumber" | "URL" | "addressCity" | "addressCityAndState" | "addressState" | "countryName" | "creditCardNumber" | "creditCardExpiration" | "creditCardExpirationMonth" | "creditCardExpirationYear" | "creditCardSecurityCode" | "creditCardType" | "creditCardName" | "creditCardGivenName" | "creditCardMiddleName" | "creditCardFamilyName" | "emailAddress" | "familyName" | "fullStreetAddress" | "givenName" | "jobTitle" | "location" | "middleName" | "namePrefix" | "nameSuffix" | "organizationName" | "postalCode" | "streetAddressLine1" | "streetAddressLine2" | "sublocality" | "telephoneNumber" | "newPassword" | "oneTimeCode" | "birthdate" | "birthdateDay" | "birthdateMonth" | "birthdateYear" | "cellularEID" | "cellularIMEI" | "dateTime" | "shipmentTrackingNumber" | undefined;
    lineBreakModeIOS?: "middle" | "head" | "tail" | "clip" | "wordWrapping" | "char" | undefined;
    smartInsertDelete?: boolean | undefined;
    cursorColor?: import("react-native/types").ColorValue | null | undefined;
    selectionHandleColor?: import("react-native/types").ColorValue | null | undefined;
    importantForAutofill?: "auto" | "yes" | "no" | "noExcludeDescendants" | "yesExcludeDescendants" | undefined;
    disableFullscreenUI?: boolean | undefined;
    inlineImageLeft?: string | undefined;
    inlineImagePadding?: number | undefined;
    returnKeyLabel?: string | undefined;
    underlineColorAndroid?: import("react-native/types").ColorValue | undefined;
    showSoftInputOnFocus?: boolean | undefined;
    showMandatoryIndication?: boolean | undefined;
    recorderTag?: import("../../typings/recorderTypes").RecorderTag | undefined;
    label?: string | undefined;
    labelColor: import("./types").ColorType | {
        focus: string;
        error: string;
        disabled: string;
        readonly: string;
    };
    labelStyle?: import("react-native/types").StyleProp<import("react-native/types").TextStyle>;
    labelProps?: import("../text").TextProps | undefined;
    validationMessagePosition?: import("./types").ValidationMessagePositionType | undefined;
    floatingPlaceholder?: boolean | undefined;
    enableErrors: boolean;
    floatingPlaceholderColor: import("./types").ColorType | {
        focus: string;
        error: string;
        disabled: string;
        readonly: string;
    };
    floatingPlaceholderStyle: (false | "" | import("react-native/types").TextStyle | import("react-native/types").RegisteredStyle<import("react-native/types").TextStyle> | import("react-native/types").RecursiveArray<import("react-native/types").TextStyle | import("react-native/types").Falsy | import("react-native/types").RegisteredStyle<import("react-native/types").TextStyle>> | null) & import("react-native/types").TextStyle;
    floatOnFocus?: boolean | undefined;
    extraOffset?: number | undefined;
    onClear?: (() => void) | undefined;
    clearButtonStyle: false | "" | import("react-native/types").ViewStyle | import("react-native/types").RegisteredStyle<import("react-native/types").ViewStyle> | import("react-native/types").RecursiveArray<import("react-native/types").ViewStyle | import("react-native/types").Falsy | import("react-native/types").RegisteredStyle<import("react-native/types").ViewStyle>> | {
        marginHorizontal: number;
    } | null;
    validationMessage?: string | string[] | undefined;
    validationMessageStyle?: import("react-native/types").StyleProp<import("react-native/types").TextStyle>;
    validationIcon?: import("../icon").IconProps | undefined;
    retainValidationSpace?: boolean | undefined;
    validate?: import("./types").Validator | import("./types").Validator[] | undefined;
    showCharCounter?: boolean | undefined;
    charCounterStyle?: import("react-native/types").TextStyle | undefined;
    leadingAccessory?: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | undefined;
    trailingAccessory?: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | undefined;
    topTrailingAccessory?: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | undefined;
    bottomAccessory?: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | undefined;
    showClearButton?: boolean | undefined;
    helperText?: string | undefined;
    validateOnStart?: boolean | undefined;
    validateOnChange?: boolean | undefined;
    validationDebounceTime?: number | undefined;
    validateOnBlur: boolean;
    onValidationFailed?: ((failedValidatorIndex: number) => void) | undefined;
    onChangeValidity?: ((isValid: boolean) => void) | undefined;
    dynamicFieldStyle?: ((context: import("./types").FieldContextType, props: {
        preset: string | null | undefined;
    }) => import("react-native/types").StyleProp<import("react-native/types").ViewStyle>) | undefined;
    containerProps?: Omit<import("../view").ViewProps, "style"> | undefined;
    containerStyle?: import("react-native/types").StyleProp<import("react-native/types").ViewStyle>;
    centered?: boolean | undefined;
    innerFlexBehavior?: boolean | undefined;
    modifiers: import("../../commons/modifiers").ExtractedStyle;
    forwardedRef: import("react").ForwardedRef<any>;
} | {
    fieldStyle: (import("react-native/types").StyleProp<import("react-native/types").ViewStyle> | {
        borderBottomWidth: number;
        borderBottomColor: string;
        paddingBottom: number;
    } | {
        borderWidth: number;
        borderColor: string;
        borderRadius: number;
        paddingHorizontal: number;
        paddingVertical: number;
    })[];
    margin?: boolean | undefined;
    marginL?: boolean | undefined;
    marginT?: boolean | undefined;
    marginR?: boolean | undefined;
    marginB?: boolean | undefined;
    marginH?: boolean | undefined;
    marginV?: boolean | undefined;
    padding?: boolean | undefined;
    paddingL?: boolean | undefined;
    paddingT?: boolean | undefined;
    paddingR?: boolean | undefined;
    paddingB?: boolean | undefined;
    paddingH?: boolean | undefined;
    paddingV?: boolean | undefined;
    text10?: boolean | undefined;
    text20?: boolean | undefined;
    text30?: boolean | undefined;
    text40?: boolean | undefined;
    text50?: boolean | undefined;
    text60?: boolean | undefined;
    text65?: boolean | undefined;
    text70?: boolean | undefined;
    text80?: boolean | undefined;
    text90?: boolean | undefined;
    text100?: boolean | undefined;
    text10T?: boolean | undefined;
    text10L?: boolean | undefined;
    text10R?: boolean | undefined;
    text10M?: boolean | undefined;
    text10BO?: boolean | undefined;
    text10H?: boolean | undefined;
    text10BL?: boolean | undefined;
    text20T?: boolean | undefined;
    text20L?: boolean | undefined;
    text20R?: boolean | undefined;
    text20M?: boolean | undefined;
    text20BO?: boolean | undefined;
    text20H?: boolean | undefined;
    text20BL?: boolean | undefined;
    text30T?: boolean | undefined;
    text30L?: boolean | undefined;
    text30R?: boolean | undefined;
    text30M?: boolean | undefined;
    text30BO?: boolean | undefined;
    text30H?: boolean | undefined;
    text30BL?: boolean | undefined;
    text40T?: boolean | undefined;
    text40L?: boolean | undefined;
    text40R?: boolean | undefined;
    text40M?: boolean | undefined;
    text40BO?: boolean | undefined;
    text40H?: boolean | undefined;
    text40BL?: boolean | undefined;
    text50T?: boolean | undefined;
    text50L?: boolean | undefined;
    text50R?: boolean | undefined;
    text50M?: boolean | undefined;
    text50BO?: boolean | undefined;
    text50H?: boolean | undefined;
    text50BL?: boolean | undefined;
    text60T?: boolean | undefined;
    text60L?: boolean | undefined;
    text60R?: boolean | undefined;
    text60M?: boolean | undefined;
    text60BO?: boolean | undefined;
    text60H?: boolean | undefined;
    text60BL?: boolean | undefined;
    text65T?: boolean | undefined;
    text65L?: boolean | undefined;
    text65R?: boolean | undefined;
    text65M?: boolean | undefined;
    text65BO?: boolean | undefined;
    text65H?: boolean | undefined;
    text65BL?: boolean | undefined;
    text70T?: boolean | undefined;
    text70L?: boolean | undefined;
    text70R?: boolean | undefined;
    text70M?: boolean | undefined;
    text70BO?: boolean | undefined;
    text70H?: boolean | undefined;
    text70BL?: boolean | undefined;
    text80T?: boolean | undefined;
    text80L?: boolean | undefined;
    text80R?: boolean | undefined;
    text80M?: boolean | undefined;
    text80BO?: boolean | undefined;
    text80H?: boolean | undefined;
    text80BL?: boolean | undefined;
    text90T?: boolean | undefined;
    text90L?: boolean | undefined;
    text90R?: boolean | undefined;
    text90M?: boolean | undefined;
    text90BO?: boolean | undefined;
    text90H?: boolean | undefined;
    text90BL?: boolean | undefined;
    text100T?: boolean | undefined;
    text100L?: boolean | undefined;
    text100R?: boolean | undefined;
    text100M?: boolean | undefined;
    text100BO?: boolean | undefined;
    text100H?: boolean | undefined;
    text100BL?: boolean | undefined;
    transparent?: boolean | undefined;
    black?: boolean | undefined;
    white?: boolean | undefined;
    dark?: boolean | undefined;
    $backgroundDefault?: boolean | undefined;
    $backgroundElevated?: boolean | undefined;
    $backgroundElevatedLight?: boolean | undefined;
    $backgroundNeutralHeavy?: boolean | undefined;
    $backgroundNeutralIdle?: boolean | undefined;
    $backgroundNeutralMedium?: boolean | undefined;
    $backgroundNeutral?: boolean | undefined;
    $backgroundNeutralLight?: boolean | undefined;
    $backgroundPrimaryHeavy?: boolean | undefined;
    $backgroundPrimaryMedium?: boolean | undefined;
    $backgroundPrimaryLight?: boolean | undefined;
    $backgroundGeneralHeavy?: boolean | undefined;
    $backgroundGeneralMedium?: boolean | undefined;
    $backgroundGeneralLight?: boolean | undefined;
    $backgroundSuccessHeavy?: boolean | undefined;
    $backgroundSuccessLight?: boolean | undefined;
    $backgroundWarningHeavy?: boolean | undefined;
    $backgroundWarningLight?: boolean | undefined;
    $backgroundMajorLight?: boolean | undefined;
    $backgroundMajorHeavy?: boolean | undefined;
    $backgroundDangerHeavy?: boolean | undefined;
    $backgroundDangerLight?: boolean | undefined;
    $backgroundDisabled?: boolean | undefined;
    $backgroundDark?: boolean | undefined;
    $backgroundDarkElevated?: boolean | undefined;
    $backgroundDarkActive?: boolean | undefined;
    $backgroundInverted?: boolean | undefined;
    $textDisabled?: boolean | undefined;
    $textDefault?: boolean | undefined;
    $textNeutralHeavy?: boolean | undefined;
    $textNeutral?: boolean | undefined;
    $textNeutralLight?: boolean | undefined;
    $textDefaultLight?: boolean | undefined;
    $textPrimary?: boolean | undefined;
    $textGeneral?: boolean | undefined;
    $textSuccess?: boolean | undefined;
    $textSuccessLight?: boolean | undefined;
    $textMajor?: boolean | undefined;
    $textDanger?: boolean | undefined;
    $textDangerLight?: boolean | undefined;
    $iconDefault?: boolean | undefined;
    $iconNeutral?: boolean | undefined;
    $iconDefaultLight?: boolean | undefined;
    $iconPrimary?: boolean | undefined;
    $iconPrimaryLight?: boolean | undefined;
    $iconGeneral?: boolean | undefined;
    $iconGeneralLight?: boolean | undefined;
    $iconSuccess?: boolean | undefined;
    $iconSuccessLight?: boolean | undefined;
    $iconMajor?: boolean | undefined;
    $iconDanger?: boolean | undefined;
    $iconDangerLight?: boolean | undefined;
    $iconDisabled?: boolean | undefined;
    $outlineDefault?: boolean | undefined;
    $outlineDisabled?: boolean | undefined;
    $outlineDisabledHeavy?: boolean | undefined;
    $outlineNeutral?: boolean | undefined;
    $outlineNeutralHeavy?: boolean | undefined;
    $outlinePrimary?: boolean | undefined;
    $outlinePrimaryMedium?: boolean | undefined;
    $outlineGeneral?: boolean | undefined;
    $outlineWarning?: boolean | undefined;
    $outlineDanger?: boolean | undefined;
    $outlineInverted?: boolean | undefined;
    $black?: boolean | undefined;
    $white?: boolean | undefined;
    grey1?: boolean | undefined;
    grey5?: boolean | undefined;
    grey10?: boolean | undefined;
    grey20?: boolean | undefined;
    grey30?: boolean | undefined;
    grey40?: boolean | undefined;
    grey50?: boolean | undefined;
    grey60?: boolean | undefined;
    grey70?: boolean | undefined;
    grey80?: boolean | undefined;
    blue1?: boolean | undefined;
    blue5?: boolean | undefined;
    blue10?: boolean | undefined;
    blue20?: boolean | undefined;
    blue30?: boolean | undefined;
    blue40?: boolean | undefined;
    blue50?: boolean | undefined;
    blue60?: boolean | undefined;
    blue70?: boolean | undefined;
    blue80?: boolean | undefined;
    cyan10?: boolean | undefined;
    cyan20?: boolean | undefined;
    cyan30?: boolean | undefined;
    cyan40?: boolean | undefined;
    cyan50?: boolean | undefined;
    cyan60?: boolean | undefined;
    cyan70?: boolean | undefined;
    cyan80?: boolean | undefined;
    green1?: boolean | undefined;
    green5?: boolean | undefined;
    green10?: boolean | undefined;
    green20?: boolean | undefined;
    green30?: boolean | undefined;
    green40?: boolean | undefined;
    green50?: boolean | undefined;
    green60?: boolean | undefined;
    green70?: boolean | undefined;
    green80?: boolean | undefined;
    yellow1?: boolean | undefined;
    yellow5?: boolean | undefined;
    yellow10?: boolean | undefined;
    yellow20?: boolean | undefined;
    yellow30?: boolean | undefined;
    yellow40?: boolean | undefined;
    yellow50?: boolean | undefined;
    yellow60?: boolean | undefined;
    yellow70?: boolean | undefined;
    yellow80?: boolean | undefined;
    orange1?: boolean | undefined;
    orange5?: boolean | undefined;
    orange10?: boolean | undefined;
    orange20?: boolean | undefined;
    orange30?: boolean | undefined;
    orange40?: boolean | undefined;
    orange50?: boolean | undefined;
    orange60?: boolean | undefined;
    orange70?: boolean | undefined;
    orange80?: boolean | undefined;
    red1?: boolean | undefined;
    red5?: boolean | undefined;
    red10?: boolean | undefined;
    red20?: boolean | undefined;
    red30?: boolean | undefined;
    red40?: boolean | undefined;
    red50?: boolean | undefined;
    red60?: boolean | undefined;
    red70?: boolean | undefined;
    red80?: boolean | undefined;
    purple1?: boolean | undefined;
    purple5?: boolean | undefined;
    purple10?: boolean | undefined;
    purple20?: boolean | undefined;
    purple30?: boolean | undefined;
    purple40?: boolean | undefined;
    purple50?: boolean | undefined;
    purple60?: boolean | undefined;
    purple70?: boolean | undefined;
    purple80?: boolean | undefined;
    violet1?: boolean | undefined;
    violet5?: boolean | undefined;
    violet10?: boolean | undefined;
    violet20?: boolean | undefined;
    violet30?: boolean | undefined;
    violet40?: boolean | undefined;
    violet50?: boolean | undefined;
    violet60?: boolean | undefined;
    violet70?: boolean | undefined;
    violet80?: boolean | undefined;
    hint?: string | undefined;
    color?: import("./types").ColorType | undefined;
    placeholderTextColor: import("./types").ColorType | {
        default: string;
        error: string;
        focus: string;
        disabled: string;
    };
    formatter?: ((value?: string | undefined) => string | undefined) | undefined;
    useGestureHandlerInput?: boolean | undefined;
    readonly?: boolean | undefined;
    value?: string | undefined;
    textAlign?: "left" | "right" | "center" | undefined;
    pointerEvents?: "auto" | "none" | "box-none" | "box-only" | undefined;
    textAlignVertical?: "auto" | "center" | "top" | "bottom" | undefined;
    verticalAlign?: "auto" | "top" | "bottom" | "middle" | undefined;
    selection?: {
        start: number;
        end?: number | undefined;
    } | undefined;
    children?: import("react").ReactNode;
    style: false | "" | import("react-native/types").TextStyle | import("react-native/types").RegisteredStyle<import("react-native/types").TextStyle> | import("react-native/types").RecursiveArray<import("react-native/types").TextStyle | import("react-native/types").Falsy | import("react-native/types").RegisteredStyle<import("react-native/types").TextStyle>> | null;
    testID?: string | undefined;
    removeClippedSubviews?: boolean | undefined;
    onLayout?: ((event: import("react-native/types").LayoutChangeEvent) => void) | undefined;
    onContentSizeChange?: ((e: import("react-native/types").NativeSyntheticEvent<import("react-native/types").TextInputContentSizeChangeEventData>) => void) | undefined;
    onScroll?: ((e: import("react-native/types").NativeSyntheticEvent<import("react-native/types").TextInputScrollEventData>) => void) | undefined;
    scrollEnabled?: boolean | undefined;
    hitSlop?: number | import("react-native/types").Insets | null | undefined;
    id?: string | undefined;
    needsOffscreenAlphaCompositing?: boolean | undefined;
    nativeID?: string | undefined;
    collapsable?: boolean | undefined;
    collapsableChildren?: boolean | undefined;
    renderToHardwareTextureAndroid?: boolean | undefined;
    focusable?: boolean | undefined;
    tabIndex?: 0 | -1 | undefined;
    shouldRasterizeIOS?: boolean | undefined;
    isTVSelectable?: boolean | undefined;
    hasTVPreferredFocus?: boolean | undefined;
    tvParallaxShiftDistanceX?: number | undefined;
    tvParallaxShiftDistanceY?: number | undefined;
    tvParallaxTiltAngle?: number | undefined;
    tvParallaxMagnification?: number | undefined;
    onStartShouldSetResponder?: ((event: import("react-native/types").GestureResponderEvent) => boolean) | undefined;
    onMoveShouldSetResponder?: ((event: import("react-native/types").GestureResponderEvent) => boolean) | undefined;
    onResponderEnd?: ((event: import("react-native/types").GestureResponderEvent) => void) | undefined;
    onResponderGrant?: ((event: import("react-native/types").GestureResponderEvent) => void) | undefined;
    onResponderReject?: ((event: import("react-native/types").GestureResponderEvent) => void) | undefined;
    onResponderMove?: ((event: import("react-native/types").GestureResponderEvent) => void) | undefined;
    onResponderRelease?: ((event: import("react-native/types").GestureResponderEvent) => void) | undefined;
    onResponderStart?: ((event: import("react-native/types").GestureResponderEvent) => void) | undefined;
    onResponderTerminationRequest?: ((event: import("react-native/types").GestureResponderEvent) => boolean) | undefined;
    onResponderTerminate?: ((event: import("react-native/types").GestureResponderEvent) => void) | undefined;
    onStartShouldSetResponderCapture?: ((event: import("react-native/types").GestureResponderEvent) => boolean) | undefined;
    onMoveShouldSetResponderCapture?: ((event: import("react-native/types").GestureResponderEvent) => boolean) | undefined;
    onTouchStart?: ((event: import("react-native/types").GestureResponderEvent) => void) | undefined;
    onTouchMove?: ((event: import("react-native/types").GestureResponderEvent) => void) | undefined;
    onTouchEnd?: ((event: import("react-native/types").GestureResponderEvent) => void) | undefined;
    onTouchCancel?: ((event: import("react-native/types").GestureResponderEvent) => void) | undefined;
    onTouchEndCapture?: ((event: import("react-native/types").GestureResponderEvent) => void) | undefined;
    onPointerEnter?: ((event: import("react-native/types").PointerEvent) => void) | undefined;
    onPointerEnterCapture?: ((event: import("react-native/types").PointerEvent) => void) | undefined;
    onPointerLeave?: ((event: import("react-native/types").PointerEvent) => void) | undefined;
    onPointerLeaveCapture?: ((event: import("react-native/types").PointerEvent) => void) | undefined;
    onPointerMove?: ((event: import("react-native/types").PointerEvent) => void) | undefined;
    onPointerMoveCapture?: ((event: import("react-native/types").PointerEvent) => void) | undefined;
    onPointerCancel?: ((event: import("react-native/types").PointerEvent) => void) | undefined;
    onPointerCancelCapture?: ((event: import("react-native/types").PointerEvent) => void) | undefined;
    onPointerDown?: ((event: import("react-native/types").PointerEvent) => void) | undefined;
    onPointerDownCapture?: ((event: import("react-native/types").PointerEvent) => void) | undefined;
    onPointerUp?: ((event: import("react-native/types").PointerEvent) => void) | undefined;
    onPointerUpCapture?: ((event: import("react-native/types").PointerEvent) => void) | undefined;
    accessible?: boolean | undefined;
    accessibilityActions?: readonly Readonly<{
        name: string;
        label?: string | undefined;
    }>[] | undefined;
    accessibilityLabel?: string | undefined;
    'aria-label'?: string | undefined;
    accessibilityRole?: import("react-native/types").AccessibilityRole | undefined;
    accessibilityState?: import("react-native/types").AccessibilityState | undefined;
    'aria-busy'?: boolean | undefined;
    'aria-checked'?: boolean | "mixed" | undefined;
    'aria-disabled'?: boolean | undefined;
    'aria-expanded'?: boolean | undefined;
    'aria-selected'?: boolean | undefined;
    accessibilityHint?: string | undefined;
    accessibilityValue?: import("react-native/types").AccessibilityValue | undefined;
    'aria-valuemax'?: number | undefined;
    'aria-valuemin'?: number | undefined;
    'aria-valuenow'?: number | undefined;
    'aria-valuetext'?: string | undefined;
    onAccessibilityAction?: ((event: import("react-native/types").AccessibilityActionEvent) => void) | undefined;
    importantForAccessibility?: "auto" | "yes" | "no" | "no-hide-descendants" | undefined;
    'aria-hidden'?: boolean | undefined;
    'aria-modal'?: boolean | undefined;
    role?: import("react-native/types").Role | undefined;
    accessibilityLabelledBy?: string | string[] | undefined;
    'aria-labelledby'?: string | undefined;
    accessibilityLiveRegion?: "none" | "polite" | "assertive" | undefined;
    'aria-live'?: "polite" | "assertive" | "off" | undefined;
    accessibilityElementsHidden?: boolean | undefined;
    accessibilityViewIsModal?: boolean | undefined;
    onAccessibilityEscape?: (() => void) | undefined;
    onAccessibilityTap?: (() => void) | undefined;
    onMagicTap?: (() => void) | undefined;
    accessibilityIgnoresInvertColors?: boolean | undefined;
    accessibilityLanguage?: string | undefined;
    accessibilityShowsLargeContentViewer?: boolean | undefined;
    accessibilityLargeContentTitle?: string | undefined;
    onPress?: ((e: import("react-native/types").NativeSyntheticEvent<import("react-native/types").NativeTouchEvent>) => void) | undefined;
    onPressIn?: ((e: import("react-native/types").NativeSyntheticEvent<import("react-native/types").NativeTouchEvent>) => void) | undefined;
    onPressOut?: ((e: import("react-native/types").NativeSyntheticEvent<import("react-native/types").NativeTouchEvent>) => void) | undefined;
    rejectResponderTermination?: boolean | null | undefined;
    onBlur?: ((e: import("react-native/types").NativeSyntheticEvent<import("react-native/types").TextInputFocusEventData>) => void) | undefined;
    onFocus?: ((e: import("react-native/types").NativeSyntheticEvent<import("react-native/types").TextInputFocusEventData>) => void) | undefined;
    allowFontScaling?: boolean | undefined;
    numberOfLines?: number | undefined;
    maxFontSizeMultiplier?: number | null | undefined;
    lineBreakStrategyIOS?: "none" | "standard" | "hangul-word" | "push-out" | undefined;
    selectionColor?: import("react-native/types").ColorValue | undefined;
    textBreakStrategy?: "simple" | "highQuality" | "balanced" | undefined;
    autoCapitalize?: "none" | "sentences" | "words" | "characters" | undefined;
    autoComplete?: "name" | "off" | "email" | "url" | "additional-name" | "address-line1" | "address-line2" | "birthdate-day" | "birthdate-full" | "birthdate-month" | "birthdate-year" | "cc-csc" | "cc-exp" | "cc-exp-day" | "cc-exp-month" | "cc-exp-year" | "cc-number" | "cc-name" | "cc-given-name" | "cc-middle-name" | "cc-family-name" | "cc-type" | "country" | "current-password" | "family-name" | "gender" | "given-name" | "honorific-prefix" | "honorific-suffix" | "name-family" | "name-given" | "name-middle" | "name-middle-initial" | "name-prefix" | "name-suffix" | "new-password" | "nickname" | "one-time-code" | "organization" | "organization-title" | "password" | "password-new" | "postal-address" | "postal-address-country" | "postal-address-extended" | "postal-address-extended-postal-code" | "postal-address-locality" | "postal-address-region" | "postal-code" | "street-address" | "sms-otp" | "tel" | "tel-country-code" | "tel-national" | "tel-device" | "username" | "username-new" | undefined;
    autoCorrect?: boolean | undefined;
    autoFocus?: boolean | undefined;
    blurOnSubmit?: boolean | undefined;
    submitBehavior?: import("react-native/types").SubmitBehavior | undefined;
    caretHidden?: boolean | undefined;
    contextMenuHidden?: boolean | undefined;
    defaultValue?: string | undefined;
    editable?: boolean | undefined;
    keyboardType?: import("react-native/types").KeyboardTypeOptions | undefined;
    inputMode?: import("react-native/types").InputModeOptions | undefined;
    maxLength?: number | undefined;
    multiline?: boolean | undefined;
    onChange?: ((e: import("react-native/types").NativeSyntheticEvent<import("react-native/types").TextInputChangeEventData>) => void) | undefined;
    onChangeText?: ((text: string) => void) | undefined;
    onEndEditing?: ((e: import("react-native/types").NativeSyntheticEvent<import("react-native/types").TextInputEndEditingEventData>) => void) | undefined;
    onSelectionChange?: ((e: import("react-native/types").NativeSyntheticEvent<import("react-native/types").TextInputSelectionChangeEventData>) => void) | undefined;
    onSubmitEditing?: ((e: import("react-native/types").NativeSyntheticEvent<import("react-native/types").TextInputSubmitEditingEventData>) => void) | undefined;
    onKeyPress?: ((e: import("react-native/types").NativeSyntheticEvent<import("react-native/types").TextInputKeyPressEventData>) => void) | undefined;
    placeholder?: string | undefined;
    readOnly?: boolean | undefined;
    returnKeyType?: import("react-native/types").ReturnKeyTypeOptions | undefined;
    enterKeyHint?: import("react-native/types").EnterKeyHintTypeOptions | undefined;
    secureTextEntry?: boolean | undefined;
    selectTextOnFocus?: boolean | undefined;
    inputAccessoryViewID?: string | undefined;
    disableKeyboardShortcuts?: boolean | undefined;
    clearButtonMode?: "always" | "never" | "while-editing" | "unless-editing" | undefined;
    clearTextOnFocus?: boolean | undefined;
    dataDetectorTypes?: import("react-native/types").DataDetectorTypes | import("react-native/types").DataDetectorTypes[] | undefined;
    enablesReturnKeyAutomatically?: boolean | undefined;
    keyboardAppearance?: "default" | "light" | "dark" | undefined;
    passwordRules?: string | null | undefined;
    selectionState?: import("react-native/types").DocumentSelectionState | undefined;
    spellCheck?: boolean | undefined;
    textContentType?: "none" | "name" | "nickname" | "password" | "username" | "flightNumber" | "URL" | "addressCity" | "addressCityAndState" | "addressState" | "countryName" | "creditCardNumber" | "creditCardExpiration" | "creditCardExpirationMonth" | "creditCardExpirationYear" | "creditCardSecurityCode" | "creditCardType" | "creditCardName" | "creditCardGivenName" | "creditCardMiddleName" | "creditCardFamilyName" | "emailAddress" | "familyName" | "fullStreetAddress" | "givenName" | "jobTitle" | "location" | "middleName" | "namePrefix" | "nameSuffix" | "organizationName" | "postalCode" | "streetAddressLine1" | "streetAddressLine2" | "sublocality" | "telephoneNumber" | "newPassword" | "oneTimeCode" | "birthdate" | "birthdateDay" | "birthdateMonth" | "birthdateYear" | "cellularEID" | "cellularIMEI" | "dateTime" | "shipmentTrackingNumber" | undefined;
    lineBreakModeIOS?: "middle" | "head" | "tail" | "clip" | "wordWrapping" | "char" | undefined;
    smartInsertDelete?: boolean | undefined;
    cursorColor?: import("react-native/types").ColorValue | null | undefined;
    selectionHandleColor?: import("react-native/types").ColorValue | null | undefined;
    importantForAutofill?: "auto" | "yes" | "no" | "noExcludeDescendants" | "yesExcludeDescendants" | undefined;
    disableFullscreenUI?: boolean | undefined;
    inlineImageLeft?: string | undefined;
    inlineImagePadding?: number | undefined;
    returnKeyLabel?: string | undefined;
    underlineColorAndroid?: import("react-native/types").ColorValue | undefined;
    showSoftInputOnFocus?: boolean | undefined;
    showMandatoryIndication?: boolean | undefined;
    recorderTag?: import("../../typings/recorderTypes").RecorderTag | undefined;
    label?: string | undefined;
    labelColor: import("./types").ColorType | {
        focus: string;
        error: string;
        disabled: string;
        readonly: string;
    };
    labelStyle?: import("react-native/types").StyleProp<import("react-native/types").TextStyle>;
    labelProps?: import("../text").TextProps | undefined;
    validationMessagePosition?: import("./types").ValidationMessagePositionType | undefined;
    floatingPlaceholder?: boolean | undefined;
    enableErrors: boolean;
    floatingPlaceholderColor: import("./types").ColorType | {
        focus: string;
        error: string;
        disabled: string;
        readonly: string;
    };
    floatingPlaceholderStyle: (false | "" | import("react-native/types").TextStyle | import("react-native/types").RegisteredStyle<import("react-native/types").TextStyle> | import("react-native/types").RecursiveArray<import("react-native/types").TextStyle | import("react-native/types").Falsy | import("react-native/types").RegisteredStyle<import("react-native/types").TextStyle>> | null) & import("react-native/types").TextStyle;
    floatOnFocus?: boolean | undefined;
    extraOffset?: number | undefined;
    onClear?: (() => void) | undefined;
    clearButtonStyle: false | "" | import("react-native/types").ViewStyle | import("react-native/types").RegisteredStyle<import("react-native/types").ViewStyle> | import("react-native/types").RecursiveArray<import("react-native/types").ViewStyle | import("react-native/types").Falsy | import("react-native/types").RegisteredStyle<import("react-native/types").ViewStyle>> | {
        marginLeft: number;
    } | null;
    validationMessage?: string | string[] | undefined;
    validationMessageStyle?: import("react-native/types").StyleProp<import("react-native/types").TextStyle>;
    validationIcon?: import("../icon").IconProps | undefined;
    retainValidationSpace?: boolean | undefined;
    validate?: import("./types").Validator | import("./types").Validator[] | undefined;
    showCharCounter?: boolean | undefined;
    charCounterStyle?: import("react-native/types").TextStyle | undefined;
    leadingAccessory?: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | undefined;
    trailingAccessory?: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | undefined;
    topTrailingAccessory?: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | undefined;
    bottomAccessory?: import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | undefined;
    showClearButton?: boolean | undefined;
    helperText?: string | undefined;
    validateOnStart?: boolean | undefined;
    validateOnChange?: boolean | undefined;
    validationDebounceTime?: number | undefined;
    validateOnBlur: boolean;
    onValidationFailed?: ((failedValidatorIndex: number) => void) | undefined;
    onChangeValidity?: ((isValid: boolean) => void) | undefined;
    dynamicFieldStyle?: ((context: import("./types").FieldContextType, props: {
        preset: string | null | undefined;
    }) => import("react-native/types").StyleProp<import("react-native/types").ViewStyle>) | undefined;
    containerProps?: Omit<import("../view").ViewProps, "style"> | undefined;
    containerStyle?: import("react-native/types").StyleProp<import("react-native/types").ViewStyle>;
    centered?: boolean | undefined;
    innerFlexBehavior?: boolean | undefined;
    modifiers: import("../../commons/modifiers").ExtractedStyle;
    forwardedRef: import("react").ForwardedRef<any>;
};
