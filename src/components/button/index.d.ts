import React, { PureComponent } from 'react';
import { LayoutChangeEvent, ImageStyle, TextStyle, StyleProp } from 'react-native';
import type { ComponentStatics } from '../../typings/common';
import { ButtonSize, ButtonAnimationDirection, ButtonProps, ButtonState, Props, ButtonSizeProp } from './types';
export { ButtonSize, ButtonAnimationDirection, ButtonProps };
declare class Button extends PureComponent<Props, ButtonState> {
    static displayName: string;
    static defaultProps: {
        iconOnRight: boolean;
    };
    static sizes: typeof ButtonSize;
    static animationDirection: typeof ButtonAnimationDirection;
    constructor(props: Props);
    state: Record<'size', undefined | number>;
    styles: {
        container: {
            backgroundColor: string;
            justifyContent: "center";
            alignItems: "center";
        };
        innerContainerLink: {
            minWidth: undefined;
            paddingHorizontal: undefined;
            paddingVertical: undefined;
            borderRadius: number;
            backgroundColor: undefined;
        };
        shadowStyle: {
            shadowOffset: {
                height: number;
                width: number;
            };
            shadowOpacity: number;
            shadowRadius: number;
            elevation: number;
        };
        text: {
            color?: import("react-native").ColorValue | undefined;
            fontFamily?: string | undefined;
            fontSize?: number | undefined;
            fontStyle?: "normal" | "italic" | undefined;
            fontWeight?: "black" | 900 | 600 | "light" | 100 | "normal" | "bold" | "100" | "200" | "300" | "400" | "500" | "600" | "700" | "800" | "900" | 200 | 300 | 400 | 500 | 700 | 800 | "ultralight" | "thin" | "medium" | "regular" | "semibold" | "condensedBold" | "condensed" | "heavy" | undefined;
            letterSpacing?: number | undefined;
            lineHeight?: number | undefined;
            textAlign?: "auto" | "left" | "right" | "center" | "justify" | undefined;
            textDecorationLine?: "none" | "underline" | "line-through" | "underline line-through" | undefined;
            textDecorationStyle?: "solid" | "double" | "dotted" | "dashed" | undefined;
            textDecorationColor?: import("react-native").ColorValue | undefined;
            textShadowColor?: import("react-native").ColorValue | undefined;
            textShadowOffset?: {
                width: number;
                height: number;
            } | undefined;
            textShadowRadius?: number | undefined;
            textTransform?: "none" | "capitalize" | "uppercase" | "lowercase" | undefined;
            userSelect?: "auto" | "none" | "text" | "contain" | "all" | undefined;
            fontVariant?: import("react-native").FontVariant[] | undefined;
            writingDirection?: "auto" | "ltr" | "rtl" | undefined;
            backfaceVisibility?: "visible" | "hidden" | undefined;
            backgroundColor: import("react-native").ColorValue;
            borderBlockColor?: import("react-native").ColorValue | undefined;
            borderBlockEndColor?: import("react-native").ColorValue | undefined;
            borderBlockStartColor?: import("react-native").ColorValue | undefined;
            borderBottomColor?: import("react-native").ColorValue | undefined;
            borderBottomEndRadius?: string | import("react-native").AnimatableNumericValue | undefined;
            borderBottomLeftRadius?: string | import("react-native").AnimatableNumericValue | undefined;
            borderBottomRightRadius?: string | import("react-native").AnimatableNumericValue | undefined;
            borderBottomStartRadius?: string | import("react-native").AnimatableNumericValue | undefined;
            borderColor?: import("react-native").ColorValue | undefined;
            borderCurve?: "circular" | "continuous" | undefined;
            borderEndColor?: import("react-native").ColorValue | undefined;
            borderEndEndRadius?: string | import("react-native").AnimatableNumericValue | undefined;
            borderEndStartRadius?: string | import("react-native").AnimatableNumericValue | undefined;
            borderLeftColor?: import("react-native").ColorValue | undefined;
            borderRadius?: string | import("react-native").AnimatableNumericValue | undefined;
            borderRightColor?: import("react-native").ColorValue | undefined;
            borderStartColor?: import("react-native").ColorValue | undefined;
            borderStartEndRadius?: string | import("react-native").AnimatableNumericValue | undefined;
            borderStartStartRadius?: string | import("react-native").AnimatableNumericValue | undefined;
            borderStyle?: "solid" | "dotted" | "dashed" | undefined;
            borderTopColor?: import("react-native").ColorValue | undefined;
            borderTopEndRadius?: string | import("react-native").AnimatableNumericValue | undefined;
            borderTopLeftRadius?: string | import("react-native").AnimatableNumericValue | undefined;
            borderTopRightRadius?: string | import("react-native").AnimatableNumericValue | undefined;
            borderTopStartRadius?: string | import("react-native").AnimatableNumericValue | undefined;
            outlineColor?: import("react-native").ColorValue | undefined;
            outlineOffset?: import("react-native").AnimatableNumericValue | undefined;
            outlineStyle?: "solid" | "dotted" | "dashed" | undefined;
            outlineWidth?: import("react-native").AnimatableNumericValue | undefined;
            opacity?: import("react-native").AnimatableNumericValue | undefined;
            elevation?: number | undefined;
            pointerEvents?: "auto" | "none" | "box-none" | "box-only" | undefined;
            isolation?: "auto" | "isolate" | undefined;
            cursor?: import("react-native").CursorValue | undefined;
            boxShadow?: string | readonly import("react-native").BoxShadowValue[] | undefined;
            filter?: string | readonly import("react-native").FilterFunction[] | undefined;
            mixBlendMode?: import("react-native").BlendMode | undefined;
            experimental_backgroundImage?: string | readonly import("react-native").GradientValue[] | undefined;
            alignContent?: "center" | "flex-start" | "flex-end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
            alignItems?: import("react-native").FlexAlignType | undefined;
            alignSelf?: "auto" | import("react-native").FlexAlignType | undefined;
            aspectRatio?: string | number | undefined;
            borderBottomWidth?: number | undefined;
            borderEndWidth?: number | undefined;
            borderLeftWidth?: number | undefined;
            borderRightWidth?: number | undefined;
            borderStartWidth?: number | undefined;
            borderTopWidth?: number | undefined;
            borderWidth?: number | undefined;
            bottom?: import("react-native").DimensionValue | undefined;
            boxSizing?: "border-box" | "content-box" | undefined;
            display?: "none" | "flex" | "contents" | undefined;
            end?: import("react-native").DimensionValue | undefined;
            flex?: number | undefined;
            flexBasis?: import("react-native").DimensionValue | undefined;
            flexDirection: "row" | "column" | "row-reverse" | "column-reverse";
            rowGap?: string | number | undefined;
            gap?: string | number | undefined;
            columnGap?: string | number | undefined;
            flexGrow?: number | undefined;
            flexShrink?: number | undefined;
            flexWrap?: "wrap" | "nowrap" | "wrap-reverse" | undefined;
            height?: import("react-native").DimensionValue | undefined;
            justifyContent?: "center" | "flex-start" | "flex-end" | "space-between" | "space-around" | "space-evenly" | undefined;
            left?: import("react-native").DimensionValue | undefined;
            margin?: import("react-native").DimensionValue | undefined;
            marginBottom?: import("react-native").DimensionValue | undefined;
            marginEnd?: import("react-native").DimensionValue | undefined;
            marginHorizontal?: import("react-native").DimensionValue | undefined;
            marginLeft?: import("react-native").DimensionValue | undefined;
            marginRight?: import("react-native").DimensionValue | undefined;
            marginStart?: import("react-native").DimensionValue | undefined;
            marginTop?: import("react-native").DimensionValue | undefined;
            marginVertical?: import("react-native").DimensionValue | undefined;
            maxHeight?: import("react-native").DimensionValue | undefined;
            maxWidth?: import("react-native").DimensionValue | undefined;
            minHeight?: import("react-native").DimensionValue | undefined;
            minWidth?: import("react-native").DimensionValue | undefined;
            overflow?: "visible" | "hidden" | "scroll" | undefined;
            padding?: import("react-native").DimensionValue | undefined;
            paddingBottom?: import("react-native").DimensionValue | undefined;
            paddingEnd?: import("react-native").DimensionValue | undefined;
            paddingHorizontal?: import("react-native").DimensionValue | undefined;
            paddingLeft?: import("react-native").DimensionValue | undefined;
            paddingRight?: import("react-native").DimensionValue | undefined;
            paddingStart?: import("react-native").DimensionValue | undefined;
            paddingTop?: import("react-native").DimensionValue | undefined;
            paddingVertical?: import("react-native").DimensionValue | undefined;
            position?: "absolute" | "relative" | "static" | undefined;
            right?: import("react-native").DimensionValue | undefined;
            start?: import("react-native").DimensionValue | undefined;
            top?: import("react-native").DimensionValue | undefined;
            width?: import("react-native").DimensionValue | undefined;
            zIndex?: number | undefined;
            direction?: "ltr" | "rtl" | "inherit" | undefined;
            inset?: import("react-native").DimensionValue | undefined;
            insetBlock?: import("react-native").DimensionValue | undefined;
            insetBlockEnd?: import("react-native").DimensionValue | undefined;
            insetBlockStart?: import("react-native").DimensionValue | undefined;
            insetInline?: import("react-native").DimensionValue | undefined;
            insetInlineEnd?: import("react-native").DimensionValue | undefined;
            insetInlineStart?: import("react-native").DimensionValue | undefined;
            marginBlock?: import("react-native").DimensionValue | undefined;
            marginBlockEnd?: import("react-native").DimensionValue | undefined;
            marginBlockStart?: import("react-native").DimensionValue | undefined;
            marginInline?: import("react-native").DimensionValue | undefined;
            marginInlineEnd?: import("react-native").DimensionValue | undefined;
            marginInlineStart?: import("react-native").DimensionValue | undefined;
            paddingBlock?: import("react-native").DimensionValue | undefined;
            paddingBlockEnd?: import("react-native").DimensionValue | undefined;
            paddingBlockStart?: import("react-native").DimensionValue | undefined;
            paddingInline?: import("react-native").DimensionValue | undefined;
            paddingInlineEnd?: import("react-native").DimensionValue | undefined;
            paddingInlineStart?: import("react-native").DimensionValue | undefined;
            shadowColor?: import("react-native").ColorValue | undefined;
            shadowOffset?: Readonly<{
                width: number;
                height: number;
            }> | undefined;
            shadowOpacity?: import("react-native").AnimatableNumericValue | undefined;
            shadowRadius?: number | undefined;
            transform?: string | readonly (({
                perspective: import("react-native").AnimatableNumericValue;
            } & {
                rotate?: undefined;
                rotateX?: undefined;
                rotateY?: undefined;
                rotateZ?: undefined;
                scale?: undefined;
                scaleX?: undefined;
                scaleY?: undefined;
                translateX?: undefined;
                translateY?: undefined;
                skewX?: undefined;
                skewY?: undefined;
                matrix?: undefined;
            }) | ({
                rotate: import("react-native").AnimatableStringValue;
            } & {
                perspective?: undefined;
                rotateX?: undefined;
                rotateY?: undefined;
                rotateZ?: undefined;
                scale?: undefined;
                scaleX?: undefined;
                scaleY?: undefined;
                translateX?: undefined;
                translateY?: undefined;
                skewX?: undefined;
                skewY?: undefined;
                matrix?: undefined;
            }) | ({
                rotateX: import("react-native").AnimatableStringValue;
            } & {
                perspective?: undefined;
                rotate?: undefined;
                rotateY?: undefined;
                rotateZ?: undefined;
                scale?: undefined;
                scaleX?: undefined;
                scaleY?: undefined;
                translateX?: undefined;
                translateY?: undefined;
                skewX?: undefined;
                skewY?: undefined;
                matrix?: undefined;
            }) | ({
                rotateY: import("react-native").AnimatableStringValue;
            } & {
                perspective?: undefined;
                rotate?: undefined;
                rotateX?: undefined;
                rotateZ?: undefined;
                scale?: undefined;
                scaleX?: undefined;
                scaleY?: undefined;
                translateX?: undefined;
                translateY?: undefined;
                skewX?: undefined;
                skewY?: undefined;
                matrix?: undefined;
            }) | ({
                rotateZ: import("react-native").AnimatableStringValue;
            } & {
                perspective?: undefined;
                rotate?: undefined;
                rotateX?: undefined;
                rotateY?: undefined;
                scale?: undefined;
                scaleX?: undefined;
                scaleY?: undefined;
                translateX?: undefined;
                translateY?: undefined;
                skewX?: undefined;
                skewY?: undefined;
                matrix?: undefined;
            }) | ({
                scale: import("react-native").AnimatableNumericValue;
            } & {
                perspective?: undefined;
                rotate?: undefined;
                rotateX?: undefined;
                rotateY?: undefined;
                rotateZ?: undefined;
                scaleX?: undefined;
                scaleY?: undefined;
                translateX?: undefined;
                translateY?: undefined;
                skewX?: undefined;
                skewY?: undefined;
                matrix?: undefined;
            }) | ({
                scaleX: import("react-native").AnimatableNumericValue;
            } & {
                perspective?: undefined;
                rotate?: undefined;
                rotateX?: undefined;
                rotateY?: undefined;
                rotateZ?: undefined;
                scale?: undefined;
                scaleY?: undefined;
                translateX?: undefined;
                translateY?: undefined;
                skewX?: undefined;
                skewY?: undefined;
                matrix?: undefined;
            }) | ({
                scaleY: import("react-native").AnimatableNumericValue;
            } & {
                perspective?: undefined;
                rotate?: undefined;
                rotateX?: undefined;
                rotateY?: undefined;
                rotateZ?: undefined;
                scale?: undefined;
                scaleX?: undefined;
                translateX?: undefined;
                translateY?: undefined;
                skewX?: undefined;
                skewY?: undefined;
                matrix?: undefined;
            }) | ({
                translateX: import("react-native").AnimatableNumericValue | `${number}%`;
            } & {
                perspective?: undefined;
                rotate?: undefined;
                rotateX?: undefined;
                rotateY?: undefined;
                rotateZ?: undefined;
                scale?: undefined;
                scaleX?: undefined;
                scaleY?: undefined;
                translateY?: undefined;
                skewX?: undefined;
                skewY?: undefined;
                matrix?: undefined;
            }) | ({
                translateY: import("react-native").AnimatableNumericValue | `${number}%`;
            } & {
                perspective?: undefined;
                rotate?: undefined;
                rotateX?: undefined;
                rotateY?: undefined;
                rotateZ?: undefined;
                scale?: undefined;
                scaleX?: undefined;
                scaleY?: undefined;
                translateX?: undefined;
                skewX?: undefined;
                skewY?: undefined;
                matrix?: undefined;
            }) | ({
                skewX: import("react-native").AnimatableStringValue;
            } & {
                perspective?: undefined;
                rotate?: undefined;
                rotateX?: undefined;
                rotateY?: undefined;
                rotateZ?: undefined;
                scale?: undefined;
                scaleX?: undefined;
                scaleY?: undefined;
                translateX?: undefined;
                translateY?: undefined;
                skewY?: undefined;
                matrix?: undefined;
            }) | ({
                skewY: import("react-native").AnimatableStringValue;
            } & {
                perspective?: undefined;
                rotate?: undefined;
                rotateX?: undefined;
                rotateY?: undefined;
                rotateZ?: undefined;
                scale?: undefined;
                scaleX?: undefined;
                scaleY?: undefined;
                translateX?: undefined;
                translateY?: undefined;
                skewX?: undefined;
                matrix?: undefined;
            }) | ({
                matrix: import("react-native").AnimatableNumericValue[];
            } & {
                perspective?: undefined;
                rotate?: undefined;
                rotateX?: undefined;
                rotateY?: undefined;
                rotateZ?: undefined;
                scale?: undefined;
                scaleX?: undefined;
                scaleY?: undefined;
                translateX?: undefined;
                translateY?: undefined;
                skewX?: undefined;
                skewY?: undefined;
            }))[] | undefined;
            transformOrigin?: string | (string | number)[] | undefined;
            transformMatrix?: number[] | undefined;
            rotation?: import("react-native").AnimatableNumericValue | undefined;
            scaleX?: import("react-native").AnimatableNumericValue | undefined;
            scaleY?: import("react-native").AnimatableNumericValue | undefined;
            translateX?: import("react-native").AnimatableNumericValue | undefined;
            translateY?: import("react-native").AnimatableNumericValue | undefined;
            textAlignVertical?: "auto" | "center" | "top" | "bottom" | undefined;
            verticalAlign?: "auto" | "top" | "bottom" | "middle" | undefined;
            includeFontPadding?: boolean | undefined;
        };
        backgroundElement: {
            overflow: "hidden";
        };
    };
    componentDidUpdate(prevProps: Props): void;
    onLayout: (event: LayoutChangeEvent) => void;
    get isLink(): boolean | undefined;
    get isFilled(): boolean;
    get isIconButton(): boolean | "" | 0 | null | undefined;
    getBackgroundColor(): any;
    getActiveBackgroundColor(): string | undefined;
    getLabelColor(): string | undefined;
    getIconColor(): string | undefined;
    getLabelSizeStyle(): TextStyle | undefined;
    getContainerSizeStyle(): Partial<{
        height: number;
        width: number;
        padding: number;
        paddingVertical: number;
        paddingHorizontal: number;
        minWidth: number;
    }>;
    getOutlineStyle(): {
        borderWidth: number;
        borderColor: string;
    } | undefined;
    getBorderRadiusStyle(): {
        borderRadius: number;
    };
    getShadowStyle(): ({
        shadowOffset: {
            height: number;
            width: number;
        };
        shadowOpacity: number;
        shadowRadius: number;
        elevation: number;
    } | {
        shadowColor: any;
    })[] | undefined;
    getIconStyle(): [ImageStyle, StyleProp<ImageStyle>];
    getAnimationDirectionStyle(): {
        readonly alignSelf: "flex-start";
    } | {
        readonly alignSelf: "flex-end";
    } | undefined;
    renderIcon(): React.JSX.Element | null;
    renderLabel(): React.JSX.Element | null;
    getAccessibleHitSlop(): {
        top: number;
        bottom: number;
        left: number;
        right: number;
    };
    renderCustomBackground(): React.JSX.Element | undefined;
    render(): React.JSX.Element;
}
export { Button };
declare const _default: React.ForwardRefExoticComponent<((import("../touchableOpacity").TouchableOpacityProps & Partial<Record<"text10" | "text20" | "text30" | "text40" | "text50" | "text60" | "text65" | "text70" | "text80" | "text90" | "text100" | "text10T" | "text10L" | "text10R" | "text10M" | "text10BO" | "text10H" | "text10BL" | "text20T" | "text20L" | "text20R" | "text20M" | "text20BO" | "text20H" | "text20BL" | "text30T" | "text30L" | "text30R" | "text30M" | "text30BO" | "text30H" | "text30BL" | "text40T" | "text40L" | "text40R" | "text40M" | "text40BO" | "text40H" | "text40BL" | "text50T" | "text50L" | "text50R" | "text50M" | "text50BO" | "text50H" | "text50BL" | "text60T" | "text60L" | "text60R" | "text60M" | "text60BO" | "text60H" | "text60BL" | "text65T" | "text65L" | "text65R" | "text65M" | "text65BO" | "text65H" | "text65BL" | "text70T" | "text70L" | "text70R" | "text70M" | "text70BO" | "text70H" | "text70BL" | "text80T" | "text80L" | "text80R" | "text80M" | "text80BO" | "text80H" | "text80BL" | "text90T" | "text90L" | "text90R" | "text90M" | "text90BO" | "text90H" | "text90BL" | "text100T" | "text100L" | "text100R" | "text100M" | "text100BO" | "text100H" | "text100BL", boolean>> & Partial<Record<"transparent" | "black" | "white" | "dark" | "$backgroundDefault" | "$backgroundElevated" | "$backgroundElevatedLight" | "$backgroundNeutralHeavy" | "$backgroundNeutralIdle" | "$backgroundNeutralMedium" | "$backgroundNeutral" | "$backgroundNeutralLight" | "$backgroundPrimaryHeavy" | "$backgroundPrimaryMedium" | "$backgroundPrimaryLight" | "$backgroundGeneralHeavy" | "$backgroundGeneralMedium" | "$backgroundGeneralLight" | "$backgroundSuccessHeavy" | "$backgroundSuccessLight" | "$backgroundWarningHeavy" | "$backgroundWarningLight" | "$backgroundMajorLight" | "$backgroundMajorHeavy" | "$backgroundDangerHeavy" | "$backgroundDangerLight" | "$backgroundDisabled" | "$backgroundDark" | "$backgroundDarkElevated" | "$backgroundDarkActive" | "$backgroundInverted" | "$textDisabled" | "$textDefault" | "$textNeutralHeavy" | "$textNeutral" | "$textNeutralLight" | "$textDefaultLight" | "$textPrimary" | "$textGeneral" | "$textSuccess" | "$textSuccessLight" | "$textMajor" | "$textDanger" | "$textDangerLight" | "$iconDefault" | "$iconNeutral" | "$iconDefaultLight" | "$iconPrimary" | "$iconPrimaryLight" | "$iconGeneral" | "$iconGeneralLight" | "$iconSuccess" | "$iconSuccessLight" | "$iconMajor" | "$iconDanger" | "$iconDangerLight" | "$iconDisabled" | "$outlineDefault" | "$outlineDisabled" | "$outlineDisabledHeavy" | "$outlineNeutral" | "$outlineNeutralHeavy" | "$outlinePrimary" | "$outlinePrimaryMedium" | "$outlineGeneral" | "$outlineWarning" | "$outlineDanger" | "$outlineInverted" | "$black" | "$white" | "grey1" | "grey5" | "grey10" | "grey20" | "grey30" | "grey40" | "grey50" | "grey60" | "grey70" | "grey80" | "blue1" | "blue5" | "blue10" | "blue20" | "blue30" | "blue40" | "blue50" | "blue60" | "blue70" | "blue80" | "cyan10" | "cyan20" | "cyan30" | "cyan40" | "cyan50" | "cyan60" | "cyan70" | "cyan80" | "green1" | "green5" | "green10" | "green20" | "green30" | "green40" | "green50" | "green60" | "green70" | "green80" | "yellow1" | "yellow5" | "yellow10" | "yellow20" | "yellow30" | "yellow40" | "yellow50" | "yellow60" | "yellow70" | "yellow80" | "orange1" | "orange5" | "orange10" | "orange20" | "orange30" | "orange40" | "orange50" | "orange60" | "orange70" | "orange80" | "red1" | "red5" | "red10" | "red20" | "red30" | "red40" | "red50" | "red60" | "red70" | "red80" | "purple1" | "purple5" | "purple10" | "purple20" | "purple30" | "purple40" | "purple50" | "purple60" | "purple70" | "purple80" | "violet1" | "violet5" | "violet10" | "violet20" | "violet30" | "violet40" | "violet50" | "violet60" | "violet70" | "violet80", boolean>> & Partial<Record<"bg-transparent" | "bg-black" | "bg-white" | "bg-dark" | "bg-$backgroundDefault" | "bg-$backgroundElevated" | "bg-$backgroundElevatedLight" | "bg-$backgroundNeutralHeavy" | "bg-$backgroundNeutralIdle" | "bg-$backgroundNeutralMedium" | "bg-$backgroundNeutral" | "bg-$backgroundNeutralLight" | "bg-$backgroundPrimaryHeavy" | "bg-$backgroundPrimaryMedium" | "bg-$backgroundPrimaryLight" | "bg-$backgroundGeneralHeavy" | "bg-$backgroundGeneralMedium" | "bg-$backgroundGeneralLight" | "bg-$backgroundSuccessHeavy" | "bg-$backgroundSuccessLight" | "bg-$backgroundWarningHeavy" | "bg-$backgroundWarningLight" | "bg-$backgroundMajorLight" | "bg-$backgroundMajorHeavy" | "bg-$backgroundDangerHeavy" | "bg-$backgroundDangerLight" | "bg-$backgroundDisabled" | "bg-$backgroundDark" | "bg-$backgroundDarkElevated" | "bg-$backgroundDarkActive" | "bg-$backgroundInverted" | "bg-$textDisabled" | "bg-$textDefault" | "bg-$textNeutralHeavy" | "bg-$textNeutral" | "bg-$textNeutralLight" | "bg-$textDefaultLight" | "bg-$textPrimary" | "bg-$textGeneral" | "bg-$textSuccess" | "bg-$textSuccessLight" | "bg-$textMajor" | "bg-$textDanger" | "bg-$textDangerLight" | "bg-$iconDefault" | "bg-$iconNeutral" | "bg-$iconDefaultLight" | "bg-$iconPrimary" | "bg-$iconPrimaryLight" | "bg-$iconGeneral" | "bg-$iconGeneralLight" | "bg-$iconSuccess" | "bg-$iconSuccessLight" | "bg-$iconMajor" | "bg-$iconDanger" | "bg-$iconDangerLight" | "bg-$iconDisabled" | "bg-$outlineDefault" | "bg-$outlineDisabled" | "bg-$outlineDisabledHeavy" | "bg-$outlineNeutral" | "bg-$outlineNeutralHeavy" | "bg-$outlinePrimary" | "bg-$outlinePrimaryMedium" | "bg-$outlineGeneral" | "bg-$outlineWarning" | "bg-$outlineDanger" | "bg-$outlineInverted" | "bg-$black" | "bg-$white" | "bg-grey1" | "bg-grey5" | "bg-grey10" | "bg-grey20" | "bg-grey30" | "bg-grey40" | "bg-grey50" | "bg-grey60" | "bg-grey70" | "bg-grey80" | "bg-blue1" | "bg-blue5" | "bg-blue10" | "bg-blue20" | "bg-blue30" | "bg-blue40" | "bg-blue50" | "bg-blue60" | "bg-blue70" | "bg-blue80" | "bg-cyan10" | "bg-cyan20" | "bg-cyan30" | "bg-cyan40" | "bg-cyan50" | "bg-cyan60" | "bg-cyan70" | "bg-cyan80" | "bg-green1" | "bg-green5" | "bg-green10" | "bg-green20" | "bg-green30" | "bg-green40" | "bg-green50" | "bg-green60" | "bg-green70" | "bg-green80" | "bg-yellow1" | "bg-yellow5" | "bg-yellow10" | "bg-yellow20" | "bg-yellow30" | "bg-yellow40" | "bg-yellow50" | "bg-yellow60" | "bg-yellow70" | "bg-yellow80" | "bg-orange1" | "bg-orange5" | "bg-orange10" | "bg-orange20" | "bg-orange30" | "bg-orange40" | "bg-orange50" | "bg-orange60" | "bg-orange70" | "bg-orange80" | "bg-red1" | "bg-red5" | "bg-red10" | "bg-red20" | "bg-red30" | "bg-red40" | "bg-red50" | "bg-red60" | "bg-red70" | "bg-red80" | "bg-purple1" | "bg-purple5" | "bg-purple10" | "bg-purple20" | "bg-purple30" | "bg-purple40" | "bg-purple50" | "bg-purple60" | "bg-purple70" | "bg-purple80" | "bg-violet1" | "bg-violet5" | "bg-violet10" | "bg-violet20" | "bg-violet30" | "bg-violet40" | "bg-violet50" | "bg-violet60" | "bg-violet70" | "bg-violet80", boolean>> & Partial<Record<"margin" | "marginL" | "marginT" | "marginR" | "marginB" | "marginH" | "marginV", boolean>> & {
    label?: string | undefined;
    color?: string | undefined;
    iconSource?: import("../image").ImageSourceType | ((iconStyle?: StyleProp<ImageStyle>[] | undefined) => JSX.Element) | null;
    iconStyle?: StyleProp<ImageStyle>;
    iconProps?: Partial<import("../icon").IconProps> | undefined;
    iconOnRight?: boolean | undefined;
    supportRTL?: boolean | undefined;
    backgroundColor?: string | undefined;
    disabledBackgroundColor?: string | undefined;
    size?: ButtonSizeProp | undefined;
    borderRadius?: number | undefined;
    onPress?: ((props: any) => void) | undefined;
    disabled?: boolean | undefined;
    outline?: boolean | undefined;
    outlineColor?: string | undefined;
    outlineWidth?: number | undefined;
    link?: boolean | undefined;
    hyperlink?: boolean | undefined;
    linkColor?: string | undefined;
    labelStyle?: StyleProp<TextStyle>;
    labelProps?: import("../text").TextProps | undefined;
    fullWidth?: boolean | undefined;
    round?: boolean | undefined;
    enableShadow?: boolean | undefined;
    avoidInnerPadding?: boolean | undefined;
    avoidMinWidth?: boolean | undefined;
    getActiveBackgroundColor?: ((backgroundColor: string, props: any) => string) | undefined;
    animateLayout?: boolean | undefined;
    animateTo?: import("./types").ButtonAnimationDirectionProp | undefined;
    customBackground?: React.ReactElement<any, string | React.JSXElementConstructor<any>> | undefined;
}) | Omit<import("../touchableOpacity").TouchableOpacityProps & import("../../commons/modifiers").CustomModifier & Partial<Record<"bg-transparent" | "bg-black" | "bg-white" | "bg-dark" | "bg-$backgroundDefault" | "bg-$backgroundElevated" | "bg-$backgroundElevatedLight" | "bg-$backgroundNeutralHeavy" | "bg-$backgroundNeutralIdle" | "bg-$backgroundNeutralMedium" | "bg-$backgroundNeutral" | "bg-$backgroundNeutralLight" | "bg-$backgroundPrimaryHeavy" | "bg-$backgroundPrimaryMedium" | "bg-$backgroundPrimaryLight" | "bg-$backgroundGeneralHeavy" | "bg-$backgroundGeneralMedium" | "bg-$backgroundGeneralLight" | "bg-$backgroundSuccessHeavy" | "bg-$backgroundSuccessLight" | "bg-$backgroundWarningHeavy" | "bg-$backgroundWarningLight" | "bg-$backgroundMajorLight" | "bg-$backgroundMajorHeavy" | "bg-$backgroundDangerHeavy" | "bg-$backgroundDangerLight" | "bg-$backgroundDisabled" | "bg-$backgroundDark" | "bg-$backgroundDarkElevated" | "bg-$backgroundDarkActive" | "bg-$backgroundInverted" | "bg-$textDisabled" | "bg-$textDefault" | "bg-$textNeutralHeavy" | "bg-$textNeutral" | "bg-$textNeutralLight" | "bg-$textDefaultLight" | "bg-$textPrimary" | "bg-$textGeneral" | "bg-$textSuccess" | "bg-$textSuccessLight" | "bg-$textMajor" | "bg-$textDanger" | "bg-$textDangerLight" | "bg-$iconDefault" | "bg-$iconNeutral" | "bg-$iconDefaultLight" | "bg-$iconPrimary" | "bg-$iconPrimaryLight" | "bg-$iconGeneral" | "bg-$iconGeneralLight" | "bg-$iconSuccess" | "bg-$iconSuccessLight" | "bg-$iconMajor" | "bg-$iconDanger" | "bg-$iconDangerLight" | "bg-$iconDisabled" | "bg-$outlineDefault" | "bg-$outlineDisabled" | "bg-$outlineDisabledHeavy" | "bg-$outlineNeutral" | "bg-$outlineNeutralHeavy" | "bg-$outlinePrimary" | "bg-$outlinePrimaryMedium" | "bg-$outlineGeneral" | "bg-$outlineWarning" | "bg-$outlineDanger" | "bg-$outlineInverted" | "bg-$black" | "bg-$white" | "bg-grey1" | "bg-grey5" | "bg-grey10" | "bg-grey20" | "bg-grey30" | "bg-grey40" | "bg-grey50" | "bg-grey60" | "bg-grey70" | "bg-grey80" | "bg-blue1" | "bg-blue5" | "bg-blue10" | "bg-blue20" | "bg-blue30" | "bg-blue40" | "bg-blue50" | "bg-blue60" | "bg-blue70" | "bg-blue80" | "bg-cyan10" | "bg-cyan20" | "bg-cyan30" | "bg-cyan40" | "bg-cyan50" | "bg-cyan60" | "bg-cyan70" | "bg-cyan80" | "bg-green1" | "bg-green5" | "bg-green10" | "bg-green20" | "bg-green30" | "bg-green40" | "bg-green50" | "bg-green60" | "bg-green70" | "bg-green80" | "bg-yellow1" | "bg-yellow5" | "bg-yellow10" | "bg-yellow20" | "bg-yellow30" | "bg-yellow40" | "bg-yellow50" | "bg-yellow60" | "bg-yellow70" | "bg-yellow80" | "bg-orange1" | "bg-orange5" | "bg-orange10" | "bg-orange20" | "bg-orange30" | "bg-orange40" | "bg-orange50" | "bg-orange60" | "bg-orange70" | "bg-orange80" | "bg-red1" | "bg-red5" | "bg-red10" | "bg-red20" | "bg-red30" | "bg-red40" | "bg-red50" | "bg-red60" | "bg-red70" | "bg-red80" | "bg-purple1" | "bg-purple5" | "bg-purple10" | "bg-purple20" | "bg-purple30" | "bg-purple40" | "bg-purple50" | "bg-purple60" | "bg-purple70" | "bg-purple80" | "bg-violet1" | "bg-violet5" | "bg-violet10" | "bg-violet20" | "bg-violet30" | "bg-violet40" | "bg-violet50" | "bg-violet60" | "bg-violet70" | "bg-violet80", boolean>> & Partial<Record<"margin" | "marginL" | "marginT" | "marginR" | "marginB" | "marginH" | "marginV", boolean>> & {
    label?: string | undefined;
    color?: string | undefined;
    iconSource?: import("../image").ImageSourceType | ((iconStyle?: StyleProp<ImageStyle>[] | undefined) => JSX.Element) | null;
    iconStyle?: StyleProp<ImageStyle>;
    iconProps?: Partial<import("../icon").IconProps> | undefined;
    iconOnRight?: boolean | undefined;
    supportRTL?: boolean | undefined;
    backgroundColor?: string | undefined;
    disabledBackgroundColor?: string | undefined;
    size?: ButtonSizeProp | undefined;
    borderRadius?: number | undefined;
    onPress?: ((props: any) => void) | undefined;
    disabled?: boolean | undefined;
    outline?: boolean | undefined;
    outlineColor?: string | undefined;
    outlineWidth?: number | undefined;
    link?: boolean | undefined;
    hyperlink?: boolean | undefined;
    linkColor?: string | undefined;
    labelStyle?: StyleProp<TextStyle>;
    labelProps?: import("../text").TextProps | undefined;
    fullWidth?: boolean | undefined;
    round?: boolean | undefined;
    enableShadow?: boolean | undefined;
    avoidInnerPadding?: boolean | undefined;
    avoidMinWidth?: boolean | undefined;
    getActiveBackgroundColor?: ((backgroundColor: string, props: any) => string) | undefined;
    animateLayout?: boolean | undefined;
    animateTo?: import("./types").ButtonAnimationDirectionProp | undefined;
    customBackground?: React.ReactElement<any, string | React.JSXElementConstructor<any>> | undefined;
}, "ref"> | Omit<import("../touchableOpacity").TouchableOpacityProps & import("../../commons/modifiers").CustomModifier & Partial<Record<"transparent" | "black" | "white" | "dark" | "$backgroundDefault" | "$backgroundElevated" | "$backgroundElevatedLight" | "$backgroundNeutralHeavy" | "$backgroundNeutralIdle" | "$backgroundNeutralMedium" | "$backgroundNeutral" | "$backgroundNeutralLight" | "$backgroundPrimaryHeavy" | "$backgroundPrimaryMedium" | "$backgroundPrimaryLight" | "$backgroundGeneralHeavy" | "$backgroundGeneralMedium" | "$backgroundGeneralLight" | "$backgroundSuccessHeavy" | "$backgroundSuccessLight" | "$backgroundWarningHeavy" | "$backgroundWarningLight" | "$backgroundMajorLight" | "$backgroundMajorHeavy" | "$backgroundDangerHeavy" | "$backgroundDangerLight" | "$backgroundDisabled" | "$backgroundDark" | "$backgroundDarkElevated" | "$backgroundDarkActive" | "$backgroundInverted" | "$textDisabled" | "$textDefault" | "$textNeutralHeavy" | "$textNeutral" | "$textNeutralLight" | "$textDefaultLight" | "$textPrimary" | "$textGeneral" | "$textSuccess" | "$textSuccessLight" | "$textMajor" | "$textDanger" | "$textDangerLight" | "$iconDefault" | "$iconNeutral" | "$iconDefaultLight" | "$iconPrimary" | "$iconPrimaryLight" | "$iconGeneral" | "$iconGeneralLight" | "$iconSuccess" | "$iconSuccessLight" | "$iconMajor" | "$iconDanger" | "$iconDangerLight" | "$iconDisabled" | "$outlineDefault" | "$outlineDisabled" | "$outlineDisabledHeavy" | "$outlineNeutral" | "$outlineNeutralHeavy" | "$outlinePrimary" | "$outlinePrimaryMedium" | "$outlineGeneral" | "$outlineWarning" | "$outlineDanger" | "$outlineInverted" | "$black" | "$white" | "grey1" | "grey5" | "grey10" | "grey20" | "grey30" | "grey40" | "grey50" | "grey60" | "grey70" | "grey80" | "blue1" | "blue5" | "blue10" | "blue20" | "blue30" | "blue40" | "blue50" | "blue60" | "blue70" | "blue80" | "cyan10" | "cyan20" | "cyan30" | "cyan40" | "cyan50" | "cyan60" | "cyan70" | "cyan80" | "green1" | "green5" | "green10" | "green20" | "green30" | "green40" | "green50" | "green60" | "green70" | "green80" | "yellow1" | "yellow5" | "yellow10" | "yellow20" | "yellow30" | "yellow40" | "yellow50" | "yellow60" | "yellow70" | "yellow80" | "orange1" | "orange5" | "orange10" | "orange20" | "orange30" | "orange40" | "orange50" | "orange60" | "orange70" | "orange80" | "red1" | "red5" | "red10" | "red20" | "red30" | "red40" | "red50" | "red60" | "red70" | "red80" | "purple1" | "purple5" | "purple10" | "purple20" | "purple30" | "purple40" | "purple50" | "purple60" | "purple70" | "purple80" | "violet1" | "violet5" | "violet10" | "violet20" | "violet30" | "violet40" | "violet50" | "violet60" | "violet70" | "violet80", boolean>> & Partial<Record<"bg-transparent" | "bg-black" | "bg-white" | "bg-dark" | "bg-$backgroundDefault" | "bg-$backgroundElevated" | "bg-$backgroundElevatedLight" | "bg-$backgroundNeutralHeavy" | "bg-$backgroundNeutralIdle" | "bg-$backgroundNeutralMedium" | "bg-$backgroundNeutral" | "bg-$backgroundNeutralLight" | "bg-$backgroundPrimaryHeavy" | "bg-$backgroundPrimaryMedium" | "bg-$backgroundPrimaryLight" | "bg-$backgroundGeneralHeavy" | "bg-$backgroundGeneralMedium" | "bg-$backgroundGeneralLight" | "bg-$backgroundSuccessHeavy" | "bg-$backgroundSuccessLight" | "bg-$backgroundWarningHeavy" | "bg-$backgroundWarningLight" | "bg-$backgroundMajorLight" | "bg-$backgroundMajorHeavy" | "bg-$backgroundDangerHeavy" | "bg-$backgroundDangerLight" | "bg-$backgroundDisabled" | "bg-$backgroundDark" | "bg-$backgroundDarkElevated" | "bg-$backgroundDarkActive" | "bg-$backgroundInverted" | "bg-$textDisabled" | "bg-$textDefault" | "bg-$textNeutralHeavy" | "bg-$textNeutral" | "bg-$textNeutralLight" | "bg-$textDefaultLight" | "bg-$textPrimary" | "bg-$textGeneral" | "bg-$textSuccess" | "bg-$textSuccessLight" | "bg-$textMajor" | "bg-$textDanger" | "bg-$textDangerLight" | "bg-$iconDefault" | "bg-$iconNeutral" | "bg-$iconDefaultLight" | "bg-$iconPrimary" | "bg-$iconPrimaryLight" | "bg-$iconGeneral" | "bg-$iconGeneralLight" | "bg-$iconSuccess" | "bg-$iconSuccessLight" | "bg-$iconMajor" | "bg-$iconDanger" | "bg-$iconDangerLight" | "bg-$iconDisabled" | "bg-$outlineDefault" | "bg-$outlineDisabled" | "bg-$outlineDisabledHeavy" | "bg-$outlineNeutral" | "bg-$outlineNeutralHeavy" | "bg-$outlinePrimary" | "bg-$outlinePrimaryMedium" | "bg-$outlineGeneral" | "bg-$outlineWarning" | "bg-$outlineDanger" | "bg-$outlineInverted" | "bg-$black" | "bg-$white" | "bg-grey1" | "bg-grey5" | "bg-grey10" | "bg-grey20" | "bg-grey30" | "bg-grey40" | "bg-grey50" | "bg-grey60" | "bg-grey70" | "bg-grey80" | "bg-blue1" | "bg-blue5" | "bg-blue10" | "bg-blue20" | "bg-blue30" | "bg-blue40" | "bg-blue50" | "bg-blue60" | "bg-blue70" | "bg-blue80" | "bg-cyan10" | "bg-cyan20" | "bg-cyan30" | "bg-cyan40" | "bg-cyan50" | "bg-cyan60" | "bg-cyan70" | "bg-cyan80" | "bg-green1" | "bg-green5" | "bg-green10" | "bg-green20" | "bg-green30" | "bg-green40" | "bg-green50" | "bg-green60" | "bg-green70" | "bg-green80" | "bg-yellow1" | "bg-yellow5" | "bg-yellow10" | "bg-yellow20" | "bg-yellow30" | "bg-yellow40" | "bg-yellow50" | "bg-yellow60" | "bg-yellow70" | "bg-yellow80" | "bg-orange1" | "bg-orange5" | "bg-orange10" | "bg-orange20" | "bg-orange30" | "bg-orange40" | "bg-orange50" | "bg-orange60" | "bg-orange70" | "bg-orange80" | "bg-red1" | "bg-red5" | "bg-red10" | "bg-red20" | "bg-red30" | "bg-red40" | "bg-red50" | "bg-red60" | "bg-red70" | "bg-red80" | "bg-purple1" | "bg-purple5" | "bg-purple10" | "bg-purple20" | "bg-purple30" | "bg-purple40" | "bg-purple50" | "bg-purple60" | "bg-purple70" | "bg-purple80" | "bg-violet1" | "bg-violet5" | "bg-violet10" | "bg-violet20" | "bg-violet30" | "bg-violet40" | "bg-violet50" | "bg-violet60" | "bg-violet70" | "bg-violet80", boolean>> & Partial<Record<"margin" | "marginL" | "marginT" | "marginR" | "marginB" | "marginH" | "marginV", boolean>> & {
    label?: string | undefined;
    color?: string | undefined;
    iconSource?: import("../image").ImageSourceType | ((iconStyle?: StyleProp<ImageStyle>[] | undefined) => JSX.Element) | null;
    iconStyle?: StyleProp<ImageStyle>;
    iconProps?: Partial<import("../icon").IconProps> | undefined;
    iconOnRight?: boolean | undefined;
    supportRTL?: boolean | undefined;
    backgroundColor?: string | undefined;
    disabledBackgroundColor?: string | undefined;
    size?: ButtonSizeProp | undefined;
    borderRadius?: number | undefined;
    onPress?: ((props: any) => void) | undefined;
    disabled?: boolean | undefined;
    outline?: boolean | undefined;
    outlineColor?: string | undefined;
    outlineWidth?: number | undefined;
    link?: boolean | undefined;
    hyperlink?: boolean | undefined;
    linkColor?: string | undefined;
    labelStyle?: StyleProp<TextStyle>;
    labelProps?: import("../text").TextProps | undefined;
    fullWidth?: boolean | undefined;
    round?: boolean | undefined;
    enableShadow?: boolean | undefined;
    avoidInnerPadding?: boolean | undefined;
    avoidMinWidth?: boolean | undefined;
    getActiveBackgroundColor?: ((backgroundColor: string, props: any) => string) | undefined;
    animateLayout?: boolean | undefined;
    animateTo?: import("./types").ButtonAnimationDirectionProp | undefined;
    customBackground?: React.ReactElement<any, string | React.JSXElementConstructor<any>> | undefined;
}, "ref"> | Omit<import("../touchableOpacity").TouchableOpacityProps & Partial<Record<"text10" | "text20" | "text30" | "text40" | "text50" | "text60" | "text65" | "text70" | "text80" | "text90" | "text100" | "text10T" | "text10L" | "text10R" | "text10M" | "text10BO" | "text10H" | "text10BL" | "text20T" | "text20L" | "text20R" | "text20M" | "text20BO" | "text20H" | "text20BL" | "text30T" | "text30L" | "text30R" | "text30M" | "text30BO" | "text30H" | "text30BL" | "text40T" | "text40L" | "text40R" | "text40M" | "text40BO" | "text40H" | "text40BL" | "text50T" | "text50L" | "text50R" | "text50M" | "text50BO" | "text50H" | "text50BL" | "text60T" | "text60L" | "text60R" | "text60M" | "text60BO" | "text60H" | "text60BL" | "text65T" | "text65L" | "text65R" | "text65M" | "text65BO" | "text65H" | "text65BL" | "text70T" | "text70L" | "text70R" | "text70M" | "text70BO" | "text70H" | "text70BL" | "text80T" | "text80L" | "text80R" | "text80M" | "text80BO" | "text80H" | "text80BL" | "text90T" | "text90L" | "text90R" | "text90M" | "text90BO" | "text90H" | "text90BL" | "text100T" | "text100L" | "text100R" | "text100M" | "text100BO" | "text100H" | "text100BL", boolean>> & import("../../commons/modifiers").CustomModifier & Partial<Record<"bg-transparent" | "bg-black" | "bg-white" | "bg-dark" | "bg-$backgroundDefault" | "bg-$backgroundElevated" | "bg-$backgroundElevatedLight" | "bg-$backgroundNeutralHeavy" | "bg-$backgroundNeutralIdle" | "bg-$backgroundNeutralMedium" | "bg-$backgroundNeutral" | "bg-$backgroundNeutralLight" | "bg-$backgroundPrimaryHeavy" | "bg-$backgroundPrimaryMedium" | "bg-$backgroundPrimaryLight" | "bg-$backgroundGeneralHeavy" | "bg-$backgroundGeneralMedium" | "bg-$backgroundGeneralLight" | "bg-$backgroundSuccessHeavy" | "bg-$backgroundSuccessLight" | "bg-$backgroundWarningHeavy" | "bg-$backgroundWarningLight" | "bg-$backgroundMajorLight" | "bg-$backgroundMajorHeavy" | "bg-$backgroundDangerHeavy" | "bg-$backgroundDangerLight" | "bg-$backgroundDisabled" | "bg-$backgroundDark" | "bg-$backgroundDarkElevated" | "bg-$backgroundDarkActive" | "bg-$backgroundInverted" | "bg-$textDisabled" | "bg-$textDefault" | "bg-$textNeutralHeavy" | "bg-$textNeutral" | "bg-$textNeutralLight" | "bg-$textDefaultLight" | "bg-$textPrimary" | "bg-$textGeneral" | "bg-$textSuccess" | "bg-$textSuccessLight" | "bg-$textMajor" | "bg-$textDanger" | "bg-$textDangerLight" | "bg-$iconDefault" | "bg-$iconNeutral" | "bg-$iconDefaultLight" | "bg-$iconPrimary" | "bg-$iconPrimaryLight" | "bg-$iconGeneral" | "bg-$iconGeneralLight" | "bg-$iconSuccess" | "bg-$iconSuccessLight" | "bg-$iconMajor" | "bg-$iconDanger" | "bg-$iconDangerLight" | "bg-$iconDisabled" | "bg-$outlineDefault" | "bg-$outlineDisabled" | "bg-$outlineDisabledHeavy" | "bg-$outlineNeutral" | "bg-$outlineNeutralHeavy" | "bg-$outlinePrimary" | "bg-$outlinePrimaryMedium" | "bg-$outlineGeneral" | "bg-$outlineWarning" | "bg-$outlineDanger" | "bg-$outlineInverted" | "bg-$black" | "bg-$white" | "bg-grey1" | "bg-grey5" | "bg-grey10" | "bg-grey20" | "bg-grey30" | "bg-grey40" | "bg-grey50" | "bg-grey60" | "bg-grey70" | "bg-grey80" | "bg-blue1" | "bg-blue5" | "bg-blue10" | "bg-blue20" | "bg-blue30" | "bg-blue40" | "bg-blue50" | "bg-blue60" | "bg-blue70" | "bg-blue80" | "bg-cyan10" | "bg-cyan20" | "bg-cyan30" | "bg-cyan40" | "bg-cyan50" | "bg-cyan60" | "bg-cyan70" | "bg-cyan80" | "bg-green1" | "bg-green5" | "bg-green10" | "bg-green20" | "bg-green30" | "bg-green40" | "bg-green50" | "bg-green60" | "bg-green70" | "bg-green80" | "bg-yellow1" | "bg-yellow5" | "bg-yellow10" | "bg-yellow20" | "bg-yellow30" | "bg-yellow40" | "bg-yellow50" | "bg-yellow60" | "bg-yellow70" | "bg-yellow80" | "bg-orange1" | "bg-orange5" | "bg-orange10" | "bg-orange20" | "bg-orange30" | "bg-orange40" | "bg-orange50" | "bg-orange60" | "bg-orange70" | "bg-orange80" | "bg-red1" | "bg-red5" | "bg-red10" | "bg-red20" | "bg-red30" | "bg-red40" | "bg-red50" | "bg-red60" | "bg-red70" | "bg-red80" | "bg-purple1" | "bg-purple5" | "bg-purple10" | "bg-purple20" | "bg-purple30" | "bg-purple40" | "bg-purple50" | "bg-purple60" | "bg-purple70" | "bg-purple80" | "bg-violet1" | "bg-violet5" | "bg-violet10" | "bg-violet20" | "bg-violet30" | "bg-violet40" | "bg-violet50" | "bg-violet60" | "bg-violet70" | "bg-violet80", boolean>> & Partial<Record<"margin" | "marginL" | "marginT" | "marginR" | "marginB" | "marginH" | "marginV", boolean>> & {
    label?: string | undefined;
    color?: string | undefined;
    iconSource?: import("../image").ImageSourceType | ((iconStyle?: StyleProp<ImageStyle>[] | undefined) => JSX.Element) | null;
    iconStyle?: StyleProp<ImageStyle>;
    iconProps?: Partial<import("../icon").IconProps> | undefined;
    iconOnRight?: boolean | undefined;
    supportRTL?: boolean | undefined;
    backgroundColor?: string | undefined;
    disabledBackgroundColor?: string | undefined;
    size?: ButtonSizeProp | undefined;
    borderRadius?: number | undefined;
    onPress?: ((props: any) => void) | undefined;
    disabled?: boolean | undefined;
    outline?: boolean | undefined;
    outlineColor?: string | undefined;
    outlineWidth?: number | undefined;
    link?: boolean | undefined;
    hyperlink?: boolean | undefined;
    linkColor?: string | undefined;
    labelStyle?: StyleProp<TextStyle>;
    labelProps?: import("../text").TextProps | undefined;
    fullWidth?: boolean | undefined;
    round?: boolean | undefined;
    enableShadow?: boolean | undefined;
    avoidInnerPadding?: boolean | undefined;
    avoidMinWidth?: boolean | undefined;
    getActiveBackgroundColor?: ((backgroundColor: string, props: any) => string) | undefined;
    animateLayout?: boolean | undefined;
    animateTo?: import("./types").ButtonAnimationDirectionProp | undefined;
    customBackground?: React.ReactElement<any, string | React.JSXElementConstructor<any>> | undefined;
}, "ref">) & React.RefAttributes<{}>> & ComponentStatics<typeof Button>;
export default _default;
