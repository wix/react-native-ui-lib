"use strict";(self.webpackChunkuilib_docs=self.webpackChunkuilib_docs||[]).push([[4764],{43749:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"components/incubator/Dialog/Dialog","title":"Incubator.Dialog","description":"Component for displaying custom content inside a popup dialog","source":"@site/versioned_docs/version-7.0.0/components/incubator/Dialog/Dialog.md","sourceDirName":"components/incubator/Dialog","slug":"/components/incubator/Dialog/","permalink":"/react-native-ui-lib/docs/components/incubator/Dialog/","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/edit/main/website/versioned_docs/version-7.0.0/components/incubator/Dialog/Dialog.md","tags":[],"version":"7.0.0","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"id":"Dialog","title":"Incubator.Dialog","sidebar_label":"Dialog"},"sidebar":"componentsSidebar","previous":{"title":"WheelPicker","permalink":"/react-native-ui-lib/docs/components/form/WheelPicker"},"next":{"title":"Header","permalink":"/react-native-ui-lib/docs/components/incubator/Dialog/Dialog.Header"}}');var s=n(74848),t=n(28453);const r={sidebar_position:1,id:"Dialog",title:"Incubator.Dialog",sidebar_label:"Dialog"},l=void 0,a={},d=[{value:"Usage",id:"usage",level:3},{value:"API",id:"api",level:2},{value:"containerProps",id:"containerprops",level:3},{value:"containerStyle",id:"containerstyle",level:3},{value:"direction",id:"direction",level:3},{value:"headerProps",id:"headerprops",level:3},{value:"ignoreBackgroundPress",id:"ignorebackgroundpress",level:3},{value:"modalProps",id:"modalprops",level:3},{value:"onDismiss",id:"ondismiss",level:3},{value:"showClose",id:"showclose",level:3},{value:"testID",id:"testid",level:3},{value:"visible",id:"visible",level:3}];function c(e){const i={a:"a",admonition:"admonition",br:"br",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(i.p,{children:["Component for displaying custom content inside a popup dialog",(0,s.jsx)(i.br,{}),"\n",(0,s.jsx)(i.a,{href:"https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/incubatorScreens/IncubatorDialogScreen.tsx",children:"(code example)"})]}),"\n",(0,s.jsx)(i.admonition,{type:"tip",children:(0,s.jsxs)(i.p,{children:["This component support ",(0,s.jsx)(i.strong,{children:"alignment"})," modifiers."]})}),"\n",(0,s.jsx)(i.admonition,{type:"note",children:(0,s.jsxs)(i.p,{children:["Use alignment modifiers to control the dialog position (top, bottom, centerV, centerH, etc... by default the dialog is aligned to center).",(0,s.jsx)(i.br,{}),"\n","When adding a ",(0,s.jsx)(i.code,{children:"FlatList"})," \\ ",(0,s.jsx)(i.code,{children:"ScrollView"})," to the content be sure to use one from ",(0,s.jsx)(i.code,{children:"react-native-gesture-handler"})," (see ",(0,s.jsx)(i.a,{href:"https://github.com/software-mansion/react-native-gesture-handler/issues/1380",children:"this link"})," for ",(0,s.jsx)(i.code,{children:"SectionList"}),")."]})}),"\n",(0,s.jsx)("div",{style:{display:"flex",flexDirection:"row",overflowX:"auto",maxHeight:"500px",alignItems:"center"}}),"\n",(0,s.jsx)(i.h3,{id:"usage",children:"Usage"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-jsx",metastring:"live",live:!0,children:"<Dialog\n  visible={isVisible}\n  onDismiss={() => console.log('dismissed')}\n  panDirection={PanningProvider.Directions.DOWN}\n>\n  <Text text60>Content</Text>\n</Dialog>\n"})}),"\n",(0,s.jsx)(i.h2,{id:"api",children:"API"}),"\n",(0,s.jsx)(i.h3,{id:"containerprops",children:"containerProps"}),"\n",(0,s.jsxs)(i.p,{children:["Extra props for the container\n",(0,s.jsx)(i.code,{children:"ViewProps "})]}),"\n",(0,s.jsx)(i.h3,{id:"containerstyle",children:"containerStyle"}),"\n",(0,s.jsxs)(i.p,{children:["The Dialog",(0,s.jsx)(i.code,{children:"s container style (it is set to {position: 'absolute'}) "}),"ViewStyle `"]}),"\n",(0,s.jsx)(i.h3,{id:"direction",children:"direction"}),"\n",(0,s.jsxs)(i.p,{children:["The direction from which and to which the dialog is animating \\ panning (default down).\n",(0,s.jsx)(i.code,{children:"up | down | left | right "})]}),"\n",(0,s.jsx)(i.h3,{id:"headerprops",children:"headerProps"}),"\n",(0,s.jsxs)(i.p,{children:["The Dialog's header (title, subtitle etc)\n",(0,s.jsx)(i.code,{children:"DialogHeaderProps "})]}),"\n",(0,s.jsx)(i.h3,{id:"ignorebackgroundpress",children:"ignoreBackgroundPress"}),"\n",(0,s.jsxs)(i.p,{children:["Whether or not to ignore background press.\n",(0,s.jsx)(i.code,{children:"boolean "})]}),"\n",(0,s.jsx)(i.h3,{id:"modalprops",children:"modalProps"}),"\n",(0,s.jsxs)(i.p,{children:["Pass props to the dialog modal\n",(0,s.jsx)(i.code,{children:"ModalProps "})]}),"\n",(0,s.jsx)(i.h3,{id:"ondismiss",children:"onDismiss"}),"\n",(0,s.jsxs)(i.p,{children:["Callback that is called after the dialog's dismiss (after the animation has ended).\n",(0,s.jsx)(i.code,{children:"(props?: DialogProps) => void "})]}),"\n",(0,s.jsx)(i.h3,{id:"showclose",children:"showClose"}),"\n",(0,s.jsxs)(i.p,{children:["Show the close button\n",(0,s.jsx)(i.code,{children:"boolean "})]}),"\n",(0,s.jsx)(i.h3,{id:"testid",children:"testID"}),"\n",(0,s.jsxs)(i.p,{children:["Used to locate this view in end-to-end tests.",(0,s.jsx)(i.br,{}),"\n","The container has the original id.",(0,s.jsx)(i.br,{}),"\n","Supported inner elements IDs:",(0,s.jsx)(i.br,{}),"\n",(0,s.jsx)(i.code,{children:"${TestID}.modal"})," - the Modal's id.",(0,s.jsx)(i.br,{}),"\n",(0,s.jsx)(i.code,{children:"${TestID}.overlayFadingBackground"})," - the fading background id.\n",(0,s.jsx)(i.code,{children:"string "})]}),"\n",(0,s.jsx)(i.h3,{id:"visible",children:"visible"}),"\n",(0,s.jsxs)(i.p,{children:["The visibility of the dialog\n",(0,s.jsx)(i.code,{children:"boolean "})]})]})}function h(e={}){const{wrapper:i}={...(0,t.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},28453:(e,i,n)=>{n.d(i,{R:()=>r,x:()=>l});var o=n(96540);const s={},t=o.createContext(s);function r(e){const i=o.useContext(t);return o.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function l(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),o.createElement(t.Provider,{value:i},e.children)}}}]);