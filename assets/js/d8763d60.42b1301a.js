"use strict";(self.webpackChunkuilib_docs=self.webpackChunkuilib_docs||[]).push([[1423],{14507:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>i,contentTitle:()=>d,default:()=>l,frontMatter:()=>u,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"components/form/MaskedInput","title":"MaskedInput","description":"{\\",\\"    const paddedValue = _.padStart(value, 4, \'0\');\\",\\"    const hours = paddedValue.substr(0, 2);\\",\\"    const minutes = paddedValue.substr(2, 2);\\",\\"\\",\\"    return (\\",\\"      \\",\\"        \\",\\"        h\\",\\"        {minutes}\\",\\"        m\\",\\"      \\",\\"    );\\",\\"  }, []);\\",\\"\\",\\"  const formatter = useCallback(value => value?.replace(/\\\\\\\\D/g, \'\'), []);\\",\\"  return (\\",\\"    \\",\\"      \\",\\"    \\",\\"  );\\",\\"}\\"]}}/>","source":"@site/../docs/components/form/MaskedInput.md","sourceDirName":"components/form","slug":"/components/form/MaskedInput","permalink":"/react-native-ui-lib/docs/components/form/MaskedInput","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/edit/main/website/../docs/components/form/MaskedInput.md","tags":[],"version":"current","frontMatter":{"id":"MaskedInput","title":"MaskedInput","sidebar_label":"MaskedInput"},"sidebar":"componentsSidebar","previous":{"title":"KeyboardAwareScrollView","permalink":"/react-native-ui-lib/docs/components/form/KeyboardAwareScrollView"},"next":{"title":"NumberInput","permalink":"/react-native-ui-lib/docs/components/form/NumberInput"}}');var s=a(74848),r=a(28453),o=a(88967);const u={id:"MaskedInput",title:"MaskedInput",sidebar_label:"MaskedInput"},d=void 0,i={},c=[];function p(e){return(0,s.jsx)(o.A,{component:{name:"MaskedInput",category:"form",description:"Mask Input to create custom looking inputs with custom formats",extends:["TextInput"],extendsLink:["https://reactnative.dev/docs/textinput"],example:"https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/MaskedInputScreen.tsx",images:["https://camo.githubusercontent.com/61eedb65e968845d5eac713dcd21a69691571fb1/68747470733a2f2f6d656469612e67697068792e636f6d2f6d656469612f4b5a5a7446666f486f454b334b2f67697068792e676966"],props:[{name:"renderMaskedText",type:"React.ReactElement",required:!0,description:"callback for rendering the custom input out of the value returns from the actual input"},{name:"containerStyle",type:"ViewStyle",description:"container style for the masked input container"}],snippet:["function Example(props) {","  const [value, setValue] = useState('15$1');","","  const renderTimeText = useCallback((value) => {","    const paddedValue = _.padStart(value, 4, '0');","    const hours = paddedValue.substr(0, 2);","    const minutes = paddedValue.substr(2, 2);","","    return (","      <Text text20 grey20 center>","        {hours}","        <Text red10>h</Text>","        {minutes}","        <Text red10>m</Text>","      </Text>","    );","  }, []);","","  const formatter = useCallback(value => value?.replace(/\\D/g, ''), []);","  return (","    <div>","      <MaskedInput","        migrate","        renderMaskedText={renderTimeText}","        formatter={formatter}","        keyboardType={'numeric'}","        maxLength={4$2}","        initialValue={value}","        // onChangeText={setValue}","      />","    </div>","  );","}"]}})}function l(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(p,{...e})}):p()}}}]);