"use strict";(self.webpackChunkuilib_docs=self.webpackChunkuilib_docs||[]).push([[9403],{74445:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"components/controls/Button","title":"Button","description":"Customizable button component that handles press events","source":"@site/versioned_docs/version-7.0.0/components/controls/Button.md","sourceDirName":"components/controls","slug":"/components/controls/Button","permalink":"/react-native-ui-lib/docs/components/controls/Button","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/edit/main/website/versioned_docs/version-7.0.0/components/controls/Button.md","tags":[],"version":"7.0.0","frontMatter":{"id":"Button","title":"Button","sidebar_label":"Button"},"sidebar":"componentsSidebar","previous":{"title":"ActionBar","permalink":"/react-native-ui-lib/docs/components/controls/ActionBar"},"next":{"title":"Checkbox","permalink":"/react-native-ui-lib/docs/components/controls/Checkbox"}}');var t=o(74848),l=o(28453);const s={id:"Button",title:"Button",sidebar_label:"Button"},r=void 0,d={},c=[{value:"Usage",id:"usage",level:3},{value:"API",id:"api",level:2},{value:"animateLayout",id:"animatelayout",level:3},{value:"animateTo",id:"animateto",level:3},{value:"avoidInnerPadding",id:"avoidinnerpadding",level:3},{value:"avoidMinWidth",id:"avoidminwidth",level:3},{value:"backgroundColor",id:"backgroundcolor",level:3},{value:"borderRadius",id:"borderradius",level:3},{value:"color",id:"color",level:3},{value:"disabled",id:"disabled",level:3},{value:"disabledBackgroundColor",id:"disabledbackgroundcolor",level:3},{value:"enableShadow",id:"enableshadow",level:3},{value:"fullWidth",id:"fullwidth",level:3},{value:"getActiveBackgroundColor",id:"getactivebackgroundcolor",level:3},{value:"hyperlink",id:"hyperlink",level:3},{value:"iconOnRight",id:"icononright",level:3},{value:"iconProps",id:"iconprops",level:3},{value:"iconSource",id:"iconsource",level:3},{value:"iconStyle",id:"iconstyle",level:3},{value:"label",id:"label",level:3},{value:"labelProps",id:"labelprops",level:3},{value:"labelStyle",id:"labelstyle",level:3},{value:"link",id:"link",level:3},{value:"linkColor",id:"linkcolor",level:3},{value:"onPress",id:"onpress",level:3},{value:"outline",id:"outline",level:3},{value:"outlineColor",id:"outlinecolor",level:3},{value:"outlineWidth",id:"outlinewidth",level:3},{value:"round",id:"round",level:3},{value:"size",id:"size",level:3},{value:"supportRTL",id:"supportrtl",level:3}];function a(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,l.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["Customizable button component that handles press events",(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.a,{href:"https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ButtonsScreen.tsx",children:"(code example)"})]}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["This component extends ",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"/docs/components/basic/TouchableOpacity",children:"TouchableOpacity"})})," props."]})}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["This component support ",(0,t.jsx)(n.strong,{children:"margin, background"})," modifiers."]})}),"\n",(0,t.jsxs)("div",{style:{display:"flex",flexDirection:"row",overflowX:"auto",maxHeight:"500px",alignItems:"center"},children:[(0,t.jsx)("img",{style:{maxHeight:"420px"},src:"https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Button/Button%20Sizes.png?raw=true"}),(0,t.jsx)("img",{style:{maxHeight:"420px"},src:"https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Button/Button%20Typographies.png?raw=true"}),(0,t.jsx)("img",{style:{maxHeight:"420px"},src:"https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Button/Button%20Outlines.png?raw=true"}),(0,t.jsx)("img",{style:{maxHeight:"420px"},src:"https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Button/Button%20Corners.png?raw=true"}),(0,t.jsx)("img",{style:{maxHeight:"420px"},src:"https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Button/Button%20Custom.png?raw=true"}),(0,t.jsx)("img",{style:{maxHeight:"420px"},src:"https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Button/Button%20Inspirations.png?raw=true"}),(0,t.jsx)("img",{style:{maxHeight:"420px"},src:"https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Button/Button%20Round.png?raw=true"}),(0,t.jsx)("img",{style:{maxHeight:"420px"},src:"https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Button/Button%20Full.png?raw=true"}),(0,t.jsx)("img",{style:{maxHeight:"420px"},src:"https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Button/Button%20Animated.gif?raw=true"})]}),"\n",(0,t.jsx)(n.h3,{id:"usage",children:"Usage"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",metastring:"live",live:!0,children:"<Button label={'Press'} size={Button.sizes.medium} backgroundColor={Colors.red30}/>\n"})}),"\n",(0,t.jsx)(n.h2,{id:"api",children:"API"}),"\n",(0,t.jsx)(n.h3,{id:"animatelayout",children:"animateLayout"}),"\n",(0,t.jsxs)(n.p,{children:["should animate layout change. Note: For Android you must set 'setLayoutAnimationEnabledExperimental(true)' via RN's 'UIManager'\n",(0,t.jsx)(n.code,{children:"boolean "})]}),"\n",(0,t.jsx)(n.h3,{id:"animateto",children:"animateTo"}),"\n",(0,t.jsxs)(n.p,{children:["the direction of the animation ('left' and 'right' will effect the button's own alignment)\n",(0,t.jsx)(n.code,{children:"ButtonAnimationDirection "})]}),"\n",(0,t.jsx)(n.h3,{id:"avoidinnerpadding",children:"avoidInnerPadding"}),"\n",(0,t.jsxs)(n.p,{children:["avoid inner button padding\n",(0,t.jsx)(n.code,{children:"boolean "})]}),"\n",(0,t.jsx)(n.h3,{id:"avoidminwidth",children:"avoidMinWidth"}),"\n",(0,t.jsxs)(n.p,{children:["avoid minimum width constraints\n",(0,t.jsx)(n.code,{children:"boolean "})]}),"\n",(0,t.jsx)(n.h3,{id:"backgroundcolor",children:"backgroundColor"}),"\n",(0,t.jsxs)(n.p,{children:["Color of the button background\n",(0,t.jsx)(n.code,{children:"string "})]}),"\n",(0,t.jsx)(n.h3,{id:"borderradius",children:"borderRadius"}),"\n",(0,t.jsxs)(n.p,{children:["Custom border radius.\n",(0,t.jsx)(n.code,{children:"number "})]}),"\n",(0,t.jsx)(n.h3,{id:"color",children:"color"}),"\n",(0,t.jsxs)(n.p,{children:["The Button text color (inherited from Text component)\n",(0,t.jsx)(n.code,{children:"string "})]}),"\n",(0,t.jsx)(n.h3,{id:"disabled",children:"disabled"}),"\n",(0,t.jsxs)(n.p,{children:["Disable interactions for the component\n",(0,t.jsx)(n.code,{children:"boolean "})]}),"\n",(0,t.jsx)(n.h3,{id:"disabledbackgroundcolor",children:"disabledBackgroundColor"}),"\n",(0,t.jsxs)(n.p,{children:["Color of the disabled button background\n",(0,t.jsx)(n.code,{children:"string "})]}),"\n",(0,t.jsx)(n.h3,{id:"enableshadow",children:"enableShadow"}),"\n",(0,t.jsxs)(n.p,{children:["Control shadow visibility (iOS-only)\n",(0,t.jsx)(n.code,{children:"boolean "})]}),"\n",(0,t.jsx)(n.h3,{id:"fullwidth",children:"fullWidth"}),"\n",(0,t.jsxs)(n.p,{children:["should the button act as a coast to coast button (no border radius)\n",(0,t.jsx)(n.code,{children:"boolean "})]}),"\n",(0,t.jsx)(n.h3,{id:"getactivebackgroundcolor",children:"getActiveBackgroundColor"}),"\n",(0,t.jsxs)(n.p,{children:["callback for getting activeBackgroundColor (e.g. (calculatedBackgroundColor, prop) => {...}). Better set using ThemeManager\n",(0,t.jsx)(n.code,{children:"(backgroundColor: string, props: any) => string "})]}),"\n",(0,t.jsx)(n.h3,{id:"hyperlink",children:"hyperlink"}),"\n",(0,t.jsxs)(n.p,{children:["Button will look like a hyperlink\n",(0,t.jsx)(n.code,{children:"boolean "})]}),"\n",(0,t.jsx)(n.h3,{id:"icononright",children:"iconOnRight"}),"\n",(0,t.jsxs)(n.p,{children:["Should the icon be right to the label\n",(0,t.jsx)(n.code,{children:"boolean "})]}),"\n",(0,t.jsx)(n.h3,{id:"iconprops",children:"iconProps"}),"\n",(0,t.jsxs)(n.p,{children:["Icon image props\n",(0,t.jsx)(n.code,{children:"Partial<ImageProps> "})]}),"\n",(0,t.jsx)(n.h3,{id:"iconsource",children:"iconSource"}),"\n",(0,t.jsxs)(n.p,{children:["Icon image source or a callback function that returns a source\n",(0,t.jsx)(n.code,{children:"ImageProps['source'] | Function "})]}),"\n",(0,t.jsx)(n.h3,{id:"iconstyle",children:"iconStyle"}),"\n",(0,t.jsxs)(n.p,{children:["Icon image style\n",(0,t.jsx)(n.code,{children:"ImageStyle "})]}),"\n",(0,t.jsx)(n.h3,{id:"label",children:"label"}),"\n",(0,t.jsxs)(n.p,{children:["Text to show inside the button\n",(0,t.jsx)(n.code,{children:"string "})]}),"\n",(0,t.jsx)(n.h3,{id:"labelprops",children:"labelProps"}),"\n",(0,t.jsxs)(n.p,{children:["Props that will be passed to the button's Text label.\n",(0,t.jsx)(n.code,{children:"TextProps "})]}),"\n",(0,t.jsx)(n.h3,{id:"labelstyle",children:"labelStyle"}),"\n",(0,t.jsxs)(n.p,{children:["Additional styles for label text\n",(0,t.jsx)(n.code,{children:"TextStyle "})]}),"\n",(0,t.jsx)(n.h3,{id:"link",children:"link"}),"\n",(0,t.jsxs)(n.p,{children:["Button will look like a link\n",(0,t.jsx)(n.code,{children:"boolean "})]}),"\n",(0,t.jsx)(n.h3,{id:"linkcolor",children:"linkColor"}),"\n",(0,t.jsxs)(n.p,{children:["label color for when it's displayed as link or hyperlink\n",(0,t.jsx)(n.code,{children:"string "})]}),"\n",(0,t.jsx)(n.h3,{id:"onpress",children:"onPress"}),"\n",(0,t.jsxs)(n.p,{children:["Actions handler\n",(0,t.jsx)(n.code,{children:"(props: any) => void "})]}),"\n",(0,t.jsx)(n.h3,{id:"outline",children:"outline"}),"\n",(0,t.jsxs)(n.p,{children:["Button will have outline style\n",(0,t.jsx)(n.code,{children:"boolean "})]}),"\n",(0,t.jsx)(n.h3,{id:"outlinecolor",children:"outlineColor"}),"\n",(0,t.jsxs)(n.p,{children:["The outline color\n",(0,t.jsx)(n.code,{children:"string "})]}),"\n",(0,t.jsx)(n.h3,{id:"outlinewidth",children:"outlineWidth"}),"\n",(0,t.jsxs)(n.p,{children:["The outline width\n",(0,t.jsx)(n.code,{children:"number "})]}),"\n",(0,t.jsx)(n.h3,{id:"round",children:"round"}),"\n",(0,t.jsxs)(n.p,{children:["should the button be a round button\n",(0,t.jsx)(n.code,{children:"boolean "})]}),"\n",(0,t.jsx)(n.h3,{id:"size",children:"size"}),"\n",(0,t.jsxs)(n.p,{children:["Size of the button [large, medium, small, xSmall]\n",(0,t.jsx)(n.code,{children:"ButtonSize "})]}),"\n",(0,t.jsx)(n.h3,{id:"supportrtl",children:"supportRTL"}),"\n",(0,t.jsxs)(n.p,{children:["whether the icon should flip horizontally on RTL locals\n",(0,t.jsx)(n.code,{children:"boolean "})]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},28453:(e,n,o)=>{o.d(n,{R:()=>s,x:()=>r});var i=o(96540);const t={},l=i.createContext(t);function s(e){const n=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);