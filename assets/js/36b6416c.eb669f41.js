"use strict";(self.webpackChunkuilib_docs=self.webpackChunkuilib_docs||[]).push([[7100],{51276:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>t,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>d});var o=i(74848),s=i(28453);const a={id:"Avatar",title:"Avatar",sidebar_label:"Avatar"},l=void 0,r={id:"components/media/Avatar",title:"Avatar",description:"Avatar component for displaying user profile images",source:"@site/../docs/components/media/Avatar.md",sourceDirName:"components/media",slug:"/components/media/Avatar",permalink:"/react-native-ui-lib/docs/components/media/Avatar",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/edit/main/website/../docs/components/media/Avatar.md",tags:[],version:"current",frontMatter:{id:"Avatar",title:"Avatar",sidebar_label:"Avatar"},sidebar:"tutorialSidebar",previous:{title:"AnimatedScanner",permalink:"/react-native-ui-lib/docs/components/media/AnimatedScanner"},next:{title:"Icon",permalink:"/react-native-ui-lib/docs/components/media/Icon"}},t={},d=[{value:"Usage",id:"usage",level:3},{value:"API",id:"api",level:2},{value:"animate",id:"animate",level:3},{value:"autoColorsConfig",id:"autocolorsconfig",level:3},{value:"backgroundColor",id:"backgroundcolor",level:3},{value:"badgePosition",id:"badgeposition",level:3},{value:"badgeProps",id:"badgeprops",level:3},{value:"containerStyle",id:"containerstyle",level:3},{value:"customRibbon",id:"customribbon",level:3},{value:"imageProps",id:"imageprops",level:3},{value:"imageStyle",id:"imagestyle",level:3},{value:"isOnline",id:"isonline",level:3},{value:"label",id:"label",level:3},{value:"labelColor",id:"labelcolor",level:3},{value:"name",id:"name",level:3},{value:"onImageLoadEnd",id:"onimageloadend",level:3},{value:"onImageLoadError",id:"onimageloaderror",level:3},{value:"onImageLoadStart",id:"onimageloadstart",level:3},{value:"onPress",id:"onpress",level:3},{value:"ribbonLabel",id:"ribbonlabel",level:3},{value:"ribbonLabelStyle",id:"ribbonlabelstyle",level:3},{value:"ribbonStyle",id:"ribbonstyle",level:3},{value:"size",id:"size",level:3},{value:"source",id:"source",level:3},{value:"status",id:"status",level:3},{value:"testID",id:"testid",level:3},{value:"useAutoColors",id:"useautocolors",level:3}];function c(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["Avatar component for displaying user profile images",(0,o.jsx)(n.br,{}),"\n",(0,o.jsx)(n.a,{href:"https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/AvatarsScreen.tsx",children:"(code example)"})]}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsxs)(n.p,{children:["This component extends ",(0,o.jsxs)(n.strong,{children:[(0,o.jsx)(n.a,{href:"/docs/components/basic/TouchableOpacity",children:"TouchableOpacity"}),", ",(0,o.jsx)(n.a,{href:"/docs/components/media/Image",children:"Image"})]})," props."]})}),"\n",(0,o.jsxs)("div",{style:{display:"flex",flexDirection:"row",overflowX:"auto",maxHeight:"500px",alignItems:"center"},children:[(0,o.jsx)("img",{style:{maxHeight:"420px"},src:"https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Avatar/Avarat_1.png?raw=true"}),(0,o.jsx)("img",{style:{maxHeight:"420px"},src:"https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Avatar/Avarat_2.png?raw=true"})]}),"\n",(0,o.jsx)(n.h3,{id:"usage",children:"Usage"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",metastring:"live",live:!0,children:"<Avatar source={{uri: 'https://lh3.googleusercontent.com/-cw77lUnOvmI/AAAAAAAAAAI/AAAAAAAAAAA/WMNck32dKbc/s181-c/104220521160525129167.jpg'}} label={IT}/>\n"})}),"\n",(0,o.jsx)(n.h2,{id:"api",children:"API"}),"\n",(0,o.jsx)(n.h3,{id:"animate",children:"animate"}),"\n",(0,o.jsxs)(n.p,{children:["Adds fade in animation when Avatar image loads\n",(0,o.jsx)(n.code,{children:"boolean "})]}),"\n",(0,o.jsx)(n.h3,{id:"autocolorsconfig",children:"autoColorsConfig"}),"\n",(0,o.jsxs)(n.p,{children:["Send this to use the name to infer a backgroundColor\n",(0,o.jsx)(n.code,{children:"AutoColorsProps "})]}),"\n",(0,o.jsx)(n.h3,{id:"backgroundcolor",children:"backgroundColor"}),"\n",(0,o.jsxs)(n.p,{children:["Background color for Avatar\n",(0,o.jsx)(n.code,{children:"string "})]}),"\n",(0,o.jsx)(n.h3,{id:"badgeposition",children:"badgePosition"}),"\n",(0,o.jsxs)(n.p,{children:["Badge location on Avatar\n",(0,o.jsx)(n.code,{children:"TOP_RIGHT | TOP_LEFT | BOTTOM_RIGHT | BOTTOM_LEFT "})]}),"\n",(0,o.jsx)(n.h3,{id:"badgeprops",children:"badgeProps"}),"\n",(0,o.jsxs)(n.p,{children:["Badge props passed down to Badge component\n",(0,o.jsx)(n.code,{children:"BadgeProps "})]}),"\n",(0,o.jsx)(n.h3,{id:"containerstyle",children:"containerStyle"}),"\n",(0,o.jsxs)(n.p,{children:["Additional spacing styles for the container\n",(0,o.jsx)(n.code,{children:"ViewStyle "})]}),"\n",(0,o.jsx)(n.h3,{id:"customribbon",children:"customRibbon"}),"\n",(0,o.jsxs)(n.p,{children:["Custom ribbon\n",(0,o.jsx)(n.code,{children:"JSX.Element "})]}),"\n",(0,o.jsx)(n.h3,{id:"imageprops",children:"imageProps"}),"\n",(0,o.jsxs)(n.p,{children:["Image props object\n",(0,o.jsx)(n.code,{children:"ImageProps "})]}),"\n",(0,o.jsx)(n.h3,{id:"imagestyle",children:"imageStyle"}),"\n",(0,o.jsxs)(n.p,{children:["Image style object used to pass additional style props by components which render image\n",(0,o.jsx)(n.code,{children:"ImageStyle "})]}),"\n",(0,o.jsx)(n.h3,{id:"isonline",children:"isOnline"}),"\n",(0,o.jsxs)(n.p,{children:["Determine if to show online badge\n",(0,o.jsx)(n.code,{children:"boolean "})]}),"\n",(0,o.jsx)(n.h3,{id:"label",children:"label"}),"\n",(0,o.jsxs)(n.p,{children:["Label that can represent initials\n",(0,o.jsx)(n.code,{children:"string "})]}),"\n",(0,o.jsx)(n.h3,{id:"labelcolor",children:"labelColor"}),"\n",(0,o.jsxs)(n.p,{children:["The label color\n",(0,o.jsx)(n.code,{children:"string "})]}),"\n",(0,o.jsx)(n.h3,{id:"name",children:"name"}),"\n",(0,o.jsxs)(n.p,{children:["The name of the avatar user. If no label is provided, the initials will be generated from the name. autoColorsConfig will use the name to create the background color of the Avatar.\n",(0,o.jsx)(n.code,{children:"string "})]}),"\n",(0,o.jsx)(n.h3,{id:"onimageloadend",children:"onImageLoadEnd"}),"\n",(0,o.jsxs)(n.p,{children:["Listener-callback for when an image's (uri) loading either succeeds or fails (equiv. to Image.onLoadEnd()).\n",(0,o.jsx)(n.code,{children:"ImagePropsBase['onLoadEnd'] "})]}),"\n",(0,o.jsx)(n.h3,{id:"onimageloaderror",children:"onImageLoadError"}),"\n",(0,o.jsxs)(n.p,{children:["Listener-callback for when an image's (uri) loading fails (equiv. to Image.onError()).\n",(0,o.jsx)(n.code,{children:"ImagePropsBase['onError'] "})]}),"\n",(0,o.jsx)(n.h3,{id:"onimageloadstart",children:"onImageLoadStart"}),"\n",(0,o.jsxs)(n.p,{children:["Listener-callback for when an image's (uri) loading starts (equiv. to Image.onLoadStart()).\n",(0,o.jsx)(n.code,{children:"ImagePropsBase['onLoadStart'] "})]}),"\n",(0,o.jsx)(n.h3,{id:"onpress",children:"onPress"}),"\n",(0,o.jsxs)(n.p,{children:["Press handler\n",(0,o.jsx)(n.code,{children:"(props: any) => void "})]}),"\n",(0,o.jsx)(n.h3,{id:"ribbonlabel",children:"ribbonLabel"}),"\n",(0,o.jsxs)(n.p,{children:["Ribbon label to display on the avatar\n",(0,o.jsx)(n.code,{children:"string "})]}),"\n",(0,o.jsx)(n.h3,{id:"ribbonlabelstyle",children:"ribbonLabelStyle"}),"\n",(0,o.jsxs)(n.p,{children:["Ribbon label custom style\n",(0,o.jsx)(n.code,{children:"TextStyle "})]}),"\n",(0,o.jsx)(n.h3,{id:"ribbonstyle",children:"ribbonStyle"}),"\n",(0,o.jsxs)(n.p,{children:["Ribbon custom style\n",(0,o.jsx)(n.code,{children:"ViewStyle "})]}),"\n",(0,o.jsx)(n.h3,{id:"size",children:"size"}),"\n",(0,o.jsxs)(n.p,{children:["Custom size for the Avatar\n",(0,o.jsx)(n.code,{children:"number"})]}),"\n",(0,o.jsx)(n.h3,{id:"source",children:"source"}),"\n",(0,o.jsxs)(n.p,{children:["The image source (external or from assets)\n",(0,o.jsx)(n.code,{children:"ImageSourcePropType "})]}),"\n",(0,o.jsx)(n.h3,{id:"status",children:"status"}),"\n",(0,o.jsxs)(n.p,{children:["AWAY, ONLINE, OFFLINE or NONE mode (if set to a value other then 'NONE' will override isOnline prop)\n",(0,o.jsx)(n.code,{children:"StatusModes "})]}),"\n",(0,o.jsx)(n.h3,{id:"testid",children:"testID"}),"\n",(0,o.jsxs)(n.p,{children:["Test identifier\n",(0,o.jsx)(n.code,{children:"string "})]}),"\n",(0,o.jsx)(n.h3,{id:"useautocolors",children:"useAutoColors"}),"\n",(0,o.jsxs)(n.p,{children:["Hash the name (or label) to get a color, so each name will have a specific color. Default is false.\n",(0,o.jsx)(n.code,{children:"boolean "})]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>r});var o=i(96540);const s={},a=o.createContext(s);function l(e){const n=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);