"use strict";(self.webpackChunkuilib_docs=self.webpackChunkuilib_docs||[]).push([[9216],{91464:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>l,frontMatter:()=>s,metadata:()=>o,toc:()=>b});const o=JSON.parse('{"id":"components/infra/KeyboardRegistry","title":"KeyboardRegistry","description":"KeyboardComponent$2)\\"]}}/>","source":"@site/../docs/components/infra/KeyboardRegistry.md","sourceDirName":"components/infra","slug":"/components/infra/KeyboardRegistry","permalink":"/react-native-ui-lib/docs/components/infra/KeyboardRegistry","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/edit/main/website/../docs/components/infra/KeyboardRegistry.md","tags":[],"version":"current","frontMatter":{"id":"KeyboardRegistry","title":"KeyboardRegistry","sidebar_label":"KeyboardRegistry"},"sidebar":"componentsSidebar","previous":{"title":"KeyboardAwareInsetsView","permalink":"/react-native-ui-lib/docs/components/infra/KeyboardAwareInsetsView"},"next":{"title":"KeyboardTrackingView","permalink":"/react-native-ui-lib/docs/components/infra/KeyboardTrackingView"}}');var a=n(74848),r=n(28453),i=n(88967);const s={id:"KeyboardRegistry",title:"KeyboardRegistry",sidebar_label:"KeyboardRegistry"},c=void 0,d={},b=[];function y(e){return(0,a.jsx)(i.A,{component:{name:"KeyboardRegistry",category:"infra",description:"used for registering keyboards and performing certain actions on the keyboards.",example:"https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/nativeComponentScreens/keyboardAccessory/demoKeyboards.js",props:[{name:"registerKeyboard",type:"static function",description:"Register a new keyboard.\ncomponentID (string) - the ID of the keyboard.\ngenerator (function) - a function for the creation of the keyboard.\nparams (object) - to be returned when using other methods (i.e. getKeyboards and getAllKeyboards)."},{name:"getKeyboard",type:"static function",description:"Get a specific keyboard\ncomponentID (string) - the ID of the keyboard."},{name:"getKeyboards",type:"static function",description:"Get keyboards by IDs\ncomponentIDs (string[]) - the ID of the keyboard."},{name:"getAllKeyboards",type:"static function",description:"Get all keyboards"},{name:"addListener",type:"static function",description:"Add a listener for a callback.\nglobalID (string) - ID that includes the componentID and the event name\n                     (i.e. if componentID='kb1' globalID='kb1.onItemSelected')\ncallback (function) - the callback to be called when the said event happens"},{name:"notifyListeners",type:"static function",description:"Notify that an event has occurred.\nglobalID (string) - ID that includes the componentID and the event name\n                    (i.e. if componentID='kb1' globalID='kb1.onItemSelected')\nargs (object) - data to be sent to the listener."},{name:"removeListeners",type:"static function",description:"Remove a listener for a callback.\nglobalID (string) - ID that includes the componentID and the event name\n                    (i.e. if componentID='kb1' globalID='kb1.onItemSelected')"},{name:"onItemSelected",type:"static function",description:"Default event to be used for when an item on the keyboard has been pressed.\ncomponentID (string) - the ID of the keyboard.\nargs (object) - data to be sent to the listener."},{name:"requestShowKeyboard",type:"static function",description:"Request to show the keyboard\ncomponentID (string) - the ID of the keyboard."}],snippet:["KeyboardRegistry.registerKeyboard('keyboardName$1', () => KeyboardComponent$2)"]}})}function l(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(y,{...e})}):y()}}}]);