"use strict";(self.webpackChunkuilib_docs=self.webpackChunkuilib_docs||[]).push([[6287],{14622:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"components/lists/SortableList","title":"SortableList","description":"A sortable list component","source":"@site/../docs/components/lists/SortableList.md","sourceDirName":"components/lists","slug":"/components/lists/SortableList","permalink":"/react-native-ui-lib/docs/components/lists/SortableList","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/edit/main/website/../docs/components/lists/SortableList.md","tags":[],"version":"current","frontMatter":{"id":"SortableList","title":"SortableList","sidebar_label":"SortableList"},"sidebar":"componentsSidebar","previous":{"title":"SortableGridList","permalink":"/react-native-ui-lib/docs/components/lists/SortableGridList"},"next":{"title":"Timeline","permalink":"/react-native-ui-lib/docs/components/lists/Timeline"}}');var o=t(74848),r=t(28453);const a={id:"SortableList",title:"SortableList",sidebar_label:"SortableList"},s=void 0,d={},l=[{value:"Usage",id:"usage",level:3},{value:"API",id:"api",level:2},{value:"data",id:"data",level:3},{value:"Do not update &#39;data&#39; in &#39;onOrderChange&#39; (i.e. for each order change); only update it when you change the items (i.g. adding and removing an item).",id:"do-not-update-data-in-onorderchange-ie-for-each-order-change-only-update-it-when-you-change-the-items-ig-adding-and-removing-an-item",level:4},{value:"enableHaptic",id:"enablehaptic",level:3},{value:"flexMigration",id:"flexmigration",level:3},{value:"itemProps",id:"itemprops",level:3},{value:"onOrderChange",id:"onorderchange",level:3},{value:"scale",id:"scale",level:3}];function c(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["A sortable list component",(0,o.jsx)(n.br,{}),"\n",(0,o.jsx)(n.a,{href:"https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/SortableListScreen.tsx",children:"(code example)"})]}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsxs)(n.p,{children:["This component extends ",(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.a,{href:"https://reactnative.dev/docs/flatlist",children:"FlatList"})})," props."]})}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsxs)(n.p,{children:["We've seen a case where not all items are rendered on some Android devices, this appears to be a bug with ",(0,o.jsx)(n.code,{children:"FlatList"})," that is using ",(0,o.jsx)(n.code,{children:"CellRendererComponent"}),", our current workaround is for you to add ",(0,o.jsx)(n.code,{children:"initialNumToRender={data.length}"}),"."]})}),"\n",(0,o.jsx)("div",{style:{display:"flex",flexDirection:"row",overflowX:"auto",maxHeight:"500px",alignItems:"center"}}),"\n",(0,o.jsx)(n.h3,{id:"usage",children:"Usage"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",metastring:"live",live:!0,children:"function Example(props) {\n  const data = Array.from({length: 10}, (_, index) => {\n    let text = `${index}`;\n    if (index === 3) {\n      text = 'Locked item';\n    }\n  \n    return {\n      text,\n      id: `${index}`,\n      locked: index === 3\n    };\n  });\n\n  const renderItem = useCallback(({item, index: _index}: {item: Item; index: number}) => {\n    const {locked} = item;\n    return (\n      <View\n        style={{height: 52, borderColor: Colors.$outlineDefault, borderBottomWidth: 1}}\n        centerV\n        centerH={locked}\n        paddingH-10\n      >\n        <View flex row spread centerV>\n          {!locked && <Icon source={Assets.icons.demo.drag} tintColor={Colors.$iconDisabled}/>}\n          <Text center $textDefault={!locked} $textNeutralLight={locked}>\n            {item.text}\n          </Text>\n          {!locked && <Icon source={Assets.icons.demo.chevronRight} tintColor={Colors.$iconDefault}/>}\n        </View>\n      </View>\n    );\n  }, []);\n\n  const keyExtractor = useCallback((item: Item) => {\n    return `${item.id}`;\n  }, []);\n\n  return (\n    <div>\n      <SortableList\n        data={data}\n        flexMigration\n        // onOrderChange={onOrderChange}\n        renderItem={renderItem}\n        keyExtractor={keyExtractor}\n      />\n    </div>\n  );\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"api",children:"API"}),"\n",(0,o.jsx)(n.h3,{id:"data",children:"data"}),"\n",(0,o.jsx)(n.h4,{id:"do-not-update-data-in-onorderchange-ie-for-each-order-change-only-update-it-when-you-change-the-items-ig-adding-and-removing-an-item",children:"Do not update 'data' in 'onOrderChange' (i.e. for each order change); only update it when you change the items (i.g. adding and removing an item)."}),"\n",(0,o.jsxs)(n.p,{children:["The data of the list, with an id prop as unique identifier.\n",(0,o.jsx)(n.code,{children:"ItemT[] (ItemT extends {id: string}) "})]}),"\n",(0,o.jsx)(n.h3,{id:"enablehaptic",children:"enableHaptic"}),"\n",(0,o.jsxs)(n.p,{children:["Whether to enable the haptic feedback.\n(please note that react-native-haptic-feedback does not support the specific haptic type on Android starting on an unknown version, you can use 1.8.2 for it to work properly)\n",(0,o.jsx)(n.code,{children:"boolean "})]}),"\n",(0,o.jsx)(n.h3,{id:"flexmigration",children:"flexMigration"}),"\n",(0,o.jsxs)(n.p,{children:["A temporary migration flag for enabling flex on the list's container (like it should be by default)\n",(0,o.jsx)(n.code,{children:"boolean "})]}),"\n",(0,o.jsx)(n.h3,{id:"itemprops",children:"itemProps"}),"\n",(0,o.jsxs)(n.p,{children:["Extra props for the item.\n",(0,o.jsx)(n.code,{children:"{margins?: {marginTop?: number; marginBottom?: number; marginLeft?: number; marginRight?: number}} "})]}),"\n",(0,o.jsx)(n.h3,{id:"onorderchange",children:"onOrderChange"}),"\n",(0,o.jsxs)(n.p,{children:["A callback to get the new order (or swapped items) and info about the change (from and to indices).\n",(0,o.jsx)(n.code,{children:"(data: ItemT[], info: OrderChangeInfo) => void "})]}),"\n",(0,o.jsx)(n.h3,{id:"scale",children:"scale"}),"\n",(0,o.jsxs)(n.p,{children:["Scale the item once dragged.\n",(0,o.jsx)(n.code,{children:"number "})]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>s});var i=t(96540);const o={},r=i.createContext(o);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);