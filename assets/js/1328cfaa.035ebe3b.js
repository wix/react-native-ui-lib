"use strict";(self.webpackChunkuilib_docs=self.webpackChunkuilib_docs||[]).push([[4468],{6560:(e,o,t)=>{t.r(o),t.d(o,{assets:()=>d,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"components/overlays/Dialog/Dialog","title":"Dialog","description":"void\\",\\"description\\"\\"onDialogDismissed\\",\\"type\\" any) => void\\",\\"description\\"\\"renderPannableHeader\\",\\"type\\" any) => JSX.Element\\",\\"description\\"\\"If this is added only the header will be pannable. Props are transferred to the \'renderPannableHeader\'\\"},{\\"name\\"\\"any\\",\\"description\\"\\"useSafeArea\\",\\"type\\"\\"In iOS, use safe area, in case component attached to the bottom\\"},{\\"name\\"\\"ViewStyle\\",\\"description\\"\\"testID\\",\\"type\\"\\"The test id for e2e tests\\"}],\\"snippet\\":[\\" console.log(\'dismissed\')$2}\\",\\" panDirection={PanningProvider.Directions.DOWN$3}\\",\\">\\",\\" Content$4\\",\\"\\"]}}/>","source":"@site/../docs/components/overlays/Dialog/Dialog.md","sourceDirName":"components/overlays/Dialog","slug":"/components/overlays/Dialog/","permalink":"/react-native-ui-lib/docs/components/overlays/Dialog/","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/edit/main/website/../docs/components/overlays/Dialog/Dialog.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"id":"Dialog","title":"Dialog","sidebar_label":"Dialog"},"sidebar":"componentsSidebar","previous":{"title":"Overlays","permalink":"/react-native-ui-lib/docs/category/overlays"},"next":{"title":"Modal","permalink":"/react-native-ui-lib/docs/components/overlays/Modal/"}}');var n=t(74848),a=t(28453),s=t(88967);const r={sidebar_position:1,id:"Dialog",title:"Dialog",sidebar_label:"Dialog"},l=void 0,d={},c=[];function p(e){return(0,n.jsx)(s.A,{component:{name:"Dialog",category:"overlays",description:"Component for displaying custom content inside a popup dialog",note:"Use alignment modifiers to control the dialog position (top, bottom, centerV, centerH, etc... by default the dialog is aligned to center)",modifiers:["alignment"],example:"https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/DialogScreen.js",images:["https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Dialog/Dialog.gif?raw=true"],props:[{name:"visible",type:"boolean",description:"Control visibility of the component"},{name:"ignoreBackgroundPress",type:"boolean",description:"Whether or not to ignore background press"},{name:"overlayBackgroundColor",type:"string",description:"The color of the overlay background",default:"Colors.rgba(Colors.grey10, 0.6)"},{name:"width",type:"string | number",description:"Width",default:"90%"},{name:"height",type:"string | number",description:"Height",default:"undefined"},{name:"panDirection",type:"UP | DOWN | LEFT | RIGHT",description:"The direction of the allowed pan",default:"PanningProvider.Directions.DOWN"},{name:"onDismiss",type:"(props?: any) => void",description:"Called when clicking on the background"},{name:"onDialogDismissed",type:"(props: any) => void",description:"Called once the dialog has been dismissed completely"},{name:"renderPannableHeader",type:"(props: any) => JSX.Element",description:"For scrollable content (the children of the dialog)",note:"If this is added only the header will be pannable. Props are transferred to the 'renderPannableHeader'"},{name:"pannableHeaderProps",type:"any",description:"The props that will be passed to the pannable header"},{name:"useSafeArea",type:"boolean",description:"In iOS, use safe area, in case component attached to the bottom"},{name:"containerStyle",type:"ViewStyle",description:"Component's container style"},{name:"testID",type:"string",description:"The test id for e2e tests"}],snippet:["<Dialog"," visible={isVisible$1}"," onDismiss={() => console.log('dismissed')$2}"," panDirection={PanningProvider.Directions.DOWN$3}",">"," <Text text60>Content</Text>$4","</Dialog>"]}})}function m(e={}){const{wrapper:o}={...(0,a.R)(),...e.components};return o?(0,n.jsx)(o,{...e,children:(0,n.jsx)(p,{...e})}):p()}}}]);