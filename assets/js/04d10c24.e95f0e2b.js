"use strict";(self.webpackChunkuilib_docs=self.webpackChunkuilib_docs||[]).push([[611],{93818:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"components/infra/KeyboardAwareInsetsView","title":"KeyboardAwareInsetsView","description":"Used to add an inset when a keyboard is used and might hide part of the screen.","source":"@site/../docs/components/infra/KeyboardAwareInsetsView.md","sourceDirName":"components/infra","slug":"/components/infra/KeyboardAwareInsetsView","permalink":"/react-native-ui-lib/docs/components/infra/KeyboardAwareInsetsView","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/edit/main/website/../docs/components/infra/KeyboardAwareInsetsView.md","tags":[],"version":"current","frontMatter":{"id":"KeyboardAwareInsetsView","title":"KeyboardAwareInsetsView","sidebar_label":"KeyboardAwareInsetsView"},"sidebar":"componentsSidebar","previous":{"title":"KeyboardAccessoryView","permalink":"/react-native-ui-lib/docs/components/infra/KeyboardAccessoryView"},"next":{"title":"KeyboardRegistry","permalink":"/react-native-ui-lib/docs/components/infra/KeyboardRegistry"}}');var i=s(74848),r=s(28453);const o={id:"KeyboardAwareInsetsView",title:"KeyboardAwareInsetsView",sidebar_label:"KeyboardAwareInsetsView"},a=void 0,d={},c=[{value:"Usage",id:"usage",level:3},{value:"API",id:"api",level:2}];function l(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["Used to add an inset when a keyboard is used and might hide part of the screen.",(0,i.jsx)(n.br,{}),"\n",(0,i.jsx)(n.a,{href:"https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/TextFieldScreen.tsx",children:"(code example)"})]}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["This component extends ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/docs/components/infra/KeyboardTrackingView",children:"KeyboardTrackingView"})})," props."]})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsx)(n.p,{children:"This view is useful only for iOS."})}),"\n",(0,i.jsx)("div",{style:{display:"flex",flexDirection:"row",overflowX:"auto",maxHeight:"500px",alignItems:"center"}}),"\n",(0,i.jsx)(n.h3,{id:"usage",children:"Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-jsx",metastring:"live",live:!0,children:"<ScrollView>\n  <TextField/>\n  <TextField/>\n  <KeyboardAwareInsetsView/>\n<ScrollView>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"api",children:"API"})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>a});var t=s(96540);const i={},r=t.createContext(i);function o(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);