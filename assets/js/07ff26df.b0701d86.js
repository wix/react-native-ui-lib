"use strict";(self.webpackChunkuilib_docs=self.webpackChunkuilib_docs||[]).push([[4158],{62301:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"foundation/testing","title":"Testing","description":"Testing","source":"@site/versioned_docs/version-7.0.0/foundation/testing.md","sourceDirName":"foundation","slug":"/foundation/testing","permalink":"/react-native-ui-lib/docs/foundation/testing","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/edit/main/website/versioned_docs/version-7.0.0/foundation/testing.md","tags":[],"version":"7.0.0","frontMatter":{"index":6,"path":"/foundation/testing","title":"Testing"},"sidebar":"foundationSidebar","previous":{"title":"ThemeManager","permalink":"/react-native-ui-lib/docs/foundation/theme-manager"}}');var i=n(74848),r=n(28453);const a={index:6,path:"/foundation/testing",title:"Testing"},o="",l={},d=[{value:"How to use the testkits",id:"how-to-use-the-testkits",level:2},{value:"Initializing the driver",id:"initializing-the-driver",level:3},{value:"Example",id:"example",level:3},{value:"Testing our flow",id:"testing-our-flow",level:3},{value:"In order to test our flow we would do the following steps:",id:"in-order-to-test-our-flow-we-would-do-the-following-steps",level:4}];function c(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components},{Details:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:""})}),"\n",(0,i.jsxs)("div",{style:{display:"flex",justifyContent:"space-between",alignItems:"center"},children:[(0,i.jsx)("h1",{children:"Testing"}),(0,i.jsx)("label",{style:{backgroundColor:"#5848ff",color:"#ffffff",borderRadius:"5px",padding:"5px 10px",margin:"10px",display:"flex",alignItems:"center"},children:(0,i.jsx)("span",{children:"Experimental"})})]}),"\n",(0,i.jsx)(t.p,{children:"Testkits allows us to test components without knowing the internal implementation, making it easier to test and reduce over head from migrations and changes in implementation. For example:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Changing the input of a ",(0,i.jsx)(t.code,{children:"TextField"})," component can be done using the driver's ",(0,i.jsx)(t.code,{children:"changeText"})]}),"\n",(0,i.jsx)(t.li,{children:"Pressing a button could be achieved using the Button driver's press function."}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"how-to-use-the-testkits",children:"How to use the testkits"}),"\n",(0,i.jsx)(t.h3,{id:"initializing-the-driver",children:"Initializing the driver"}),"\n",(0,i.jsx)(t.p,{children:"In order to initialize a test driver you pass it the renderTree and the component's testId as an object."}),"\n",(0,i.jsx)(t.h3,{id:"example",children:"Example"}),"\n",(0,i.jsxs)(t.p,{children:["Suppose we have a form that takes a ",(0,i.jsx)(t.code,{children:"first name"}),", ",(0,i.jsx)(t.code,{children:"last name"})," and an ",(0,i.jsx)(t.code,{children:"address"})," and we want to test the submitting of this form. Our form component will look something like this:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-jsx",children:"import {Button, TextField, View} from 'react-native-ui-lib/testkit';\n\ntype OnSubmitHandler = (firstName: string, lastName: string, address: string) => void;\nconst MyForm = (props: {onSubmit: OnSubmitHandler}) => {\n  const {onSubmit} = props;\n  const [firstName, setFirstName] = useState('');\n  const [lastName, setLastName] = useState('');\n  const [address, setAddress] = useState('');\n  return (\n    <View>\n      <TextField label=\"First name\" onChangeText={(value) => setFirstName(value)} value={firstName}/>\n      <TextField label=\"Last name\" onChangeText={(value) => setLastName(value)} value={lastName}/>\n      <TextField label=\"Address\" onChangeText={(value) => setAddress(value)} value={address}/>\n      <Button label=\"Submit\" onPress={() => onSubmit(firstName, lastName, address)}/>\n    </View>\n  );\n};\n"})}),"\n",(0,i.jsx)(t.h3,{id:"testing-our-flow",children:"Testing our flow"}),"\n",(0,i.jsx)(t.h4,{id:"in-order-to-test-our-flow-we-would-do-the-following-steps",children:"In order to test our flow we would do the following steps:"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:"Import the TextField and Button driver from UI-LIB's testkit"}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javascript",children:"import {TextFieldDriver, ButtonDriver} from 'react-native-ui-lib/testkit';\n"})}),"\n",(0,i.jsxs)(t.ol,{start:"2",children:["\n",(0,i.jsx)(t.li,{children:"render our test case"}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javascript",children:"const renderTree = render(<MyForm onSubmit={onSubmit}/>);\n"})}),"\n",(0,i.jsxs)(t.ol,{start:"3",children:["\n",(0,i.jsx)(t.li,{children:"Initialize our drivers for the TextFields and submit button"}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javascript",children:"const firstNameDriver = TextFieldDriver({renderTree, testID: 'firstName'});\nconst lastNameDriver = TextFieldDriver({renderTree, testID: 'lastName'});\nconst addressDriver = TextFieldDriver({renderTree, testID: 'address'});\nconst submitBtnDriver = ButtonDriver({renderTree, testID: 'submit'});\n"})}),"\n",(0,i.jsxs)(t.ol,{start:"4",children:["\n",(0,i.jsx)(t.li,{children:"Change the text of the fields and submit the form."}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javascript",children:"firstNameDriver.changeText('Musa');\nlastNameDriver.changeText('The Man');\naddressDriver.changeText('Yunitzman 5');\nsubmitBtnDriver.press();\n"})}),"\n",(0,i.jsxs)(t.ol,{start:"5",children:["\n",(0,i.jsx)(t.li,{children:"Check that the correct values were passed to the submit handler"}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javascript",children:"expect(onSubmit).toHaveBeenCalledWith('Musa', 'The Man', 'Yunitzman 5');\n"})}),"\n",(0,i.jsxs)(n,{children:[(0,i.jsx)("summary",{children:"Full test"}),(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-javascript",children:"describe('My Form', () => {\n  it('should submit MyForm with Musa The Man, Yunitzman 5', () => {\n    const onSubmit = jest.fn();\n    const renderTree = render(<MyForm onSubmit={onSubmit}/>);\n    const firstNameDriver = TextFieldDriver({renderTree, testID: 'firstName'});\n    const lastNameDriver = TextFieldDriver({renderTree, testID: 'lastName'});\n    const addressDriver = TextFieldDriver({renderTree, testID: 'address'});\n    const submitBtnDriver = ButtonDriver({renderTree, testID: 'submit'});\n    firstNameDriver.changeText('Musa');\n    lastNameDriver.changeText('The Man');\n    addressDriver.changeText('Yunitzman 5');\n    submitBtnDriver.press();\n    expect(onSubmit).toHaveBeenCalledWith('Musa', 'The Man', 'Yunitzman 5');\n  });\n});\n"})})]})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var s=n(96540);const i={},r=s.createContext(i);function a(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);