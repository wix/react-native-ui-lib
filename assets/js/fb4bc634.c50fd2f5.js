"use strict";(self.webpackChunkuilib_docs=self.webpackChunkuilib_docs||[]).push([[5227],{45515:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"components/overlays/Modal/Modal","title":"Modal","description":"Component that present content on top of the invoking screen","source":"@site/versioned_docs/version-7.0.0/components/overlays/Modal/Modal.md","sourceDirName":"components/overlays/Modal","slug":"/components/overlays/Modal/","permalink":"/react-native-ui-lib/docs/components/overlays/Modal/","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/edit/main/website/versioned_docs/version-7.0.0/components/overlays/Modal/Modal.md","tags":[],"version":"7.0.0","sidebarPosition":1,"frontMatter":{"sidebar_position":1,"id":"Modal","title":"Modal","sidebar_label":"Modal"},"sidebar":"componentsSidebar","previous":{"title":"Dialog","permalink":"/react-native-ui-lib/docs/components/overlays/Dialog/"},"next":{"title":"TopBar","permalink":"/react-native-ui-lib/docs/components/overlays/Modal/Modal.TopBar"}}');var l=o(74848),t=o(28453);const i={sidebar_position:1,id:"Modal",title:"Modal",sidebar_label:"Modal"},r=void 0,a={},d=[{value:"Usage",id:"usage",level:3},{value:"API",id:"api",level:2},{value:"accessibilityLabel",id:"accessibilitylabel",level:3},{value:"blurView",id:"blurview",level:3},{value:"enableModalBlur",id:"enablemodalblur",level:3},{value:"iOS only",id:"ios-only",level:4},{value:"onBackgroundPress",id:"onbackgroundpress",level:3},{value:"overlayBackgroundColor",id:"overlaybackgroundcolor",level:3},{value:"testID",id:"testid",level:3},{value:"useGestureHandlerRootView",id:"usegesturehandlerrootview",level:3}];function c(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(n.p,{children:["Component that present content on top of the invoking screen",(0,l.jsx)(n.br,{}),"\n",(0,l.jsx)(n.a,{href:"https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/ModalScreen.tsx",children:"(code example)"})]}),"\n",(0,l.jsx)(n.admonition,{type:"info",children:(0,l.jsxs)(n.p,{children:["This component extends ",(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.a,{href:"https://reactnative.dev/docs/modal",children:"Modal"})})," props."]})}),"\n",(0,l.jsx)("div",{style:{display:"flex",flexDirection:"row",overflowX:"auto",maxHeight:"500px",alignItems:"center"},children:(0,l.jsx)("img",{style:{maxHeight:"420px"},src:"https://media.giphy.com/media/3oFzmfSX8KgvctI4Ks/giphy.gif"})}),"\n",(0,l.jsx)(n.h3,{id:"usage",children:"Usage"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",metastring:"live",live:!0,children:"<Modal visible={isVisible} onBackgroundPress={() => console.log('background pressed')}>\n <Text text60>Content</Text>\n</Modal>\n"})}),"\n",(0,l.jsx)(n.h2,{id:"api",children:"API"}),"\n",(0,l.jsx)(n.h3,{id:"accessibilitylabel",children:"accessibilityLabel"}),"\n",(0,l.jsxs)(n.p,{children:["Overrides the text that's read by the screen reader when the user interacts with the element.\\By default, the label is constructed by traversing all the children and accumulating all the Text nodes separated by space.\n",(0,l.jsx)(n.code,{children:"string "})]}),"\n",(0,l.jsx)(n.h3,{id:"blurview",children:"blurView"}),"\n",(0,l.jsxs)(n.p,{children:["A custom view to use as a BlurView instead of the default one\n",(0,l.jsx)(n.code,{children:"JSX.Element "})]}),"\n",(0,l.jsx)(n.h3,{id:"enablemodalblur",children:"enableModalBlur"}),"\n",(0,l.jsx)(n.h4,{id:"ios-only",children:"iOS only"}),"\n",(0,l.jsxs)(n.p,{children:["Blurs the modal background when transparent\n",(0,l.jsx)(n.code,{children:"boolean "})]}),"\n",(0,l.jsx)(n.h3,{id:"onbackgroundpress",children:"onBackgroundPress"}),"\n",(0,l.jsxs)(n.p,{children:["allow dismissing a modal when clicking on its background\n",(0,l.jsx)(n.code,{children:"(event: GestureResponderEvent) => void "})]}),"\n",(0,l.jsx)(n.h3,{id:"overlaybackgroundcolor",children:"overlayBackgroundColor"}),"\n",(0,l.jsxs)(n.p,{children:["The background color of the overlay\n",(0,l.jsx)(n.code,{children:"string "})]}),"\n",(0,l.jsx)(n.h3,{id:"testid",children:"testID"}),"\n",(0,l.jsxs)(n.p,{children:["The modal's end-to-end test identifier\n",(0,l.jsx)(n.code,{children:"string "})]}),"\n",(0,l.jsx)(n.h3,{id:"usegesturehandlerrootview",children:"useGestureHandlerRootView"}),"\n",(0,l.jsxs)(n.p,{children:["Should add a GestureHandlerRootView\n",(0,l.jsx)(n.code,{children:"boolean "})]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(c,{...e})}):c(e)}},28453:(e,n,o)=>{o.d(n,{R:()=>i,x:()=>r});var s=o(96540);const l={},t=s.createContext(l);function i(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:i(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);