"use strict";(self.webpackChunkuilib_docs=self.webpackChunkuilib_docs||[]).push([[9556],{67594:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>d});const l=JSON.parse('{"id":"components/form/WheelPicker","title":"WheelPicker","description":"A customizable WheelPicker component","source":"@site/../docs/components/form/WheelPicker.md","sourceDirName":"components/form","slug":"/components/form/WheelPicker","permalink":"/react-native-ui-lib/docs/components/form/WheelPicker","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/edit/main/website/../docs/components/form/WheelPicker.md","tags":[],"version":"current","frontMatter":{"id":"WheelPicker","title":"WheelPicker","sidebar_label":"WheelPicker"},"sidebar":"componentsSidebar","previous":{"title":"TextField","permalink":"/react-native-ui-lib/docs/components/form/TextField"},"next":{"title":"Dialog","permalink":"/react-native-ui-lib/docs/components/incubator/Dialog/"}}');var n=t(74848),s=t(28453);const o={id:"WheelPicker",title:"WheelPicker",sidebar_label:"WheelPicker"},r=void 0,c={},d=[{value:"Usage",id:"usage",level:3},{value:"API",id:"api",level:2},{value:"activeTextColor",id:"activetextcolor",level:3},{value:"align",id:"align",level:3},{value:"flatListProps",id:"flatlistprops",level:3},{value:"inactiveTextColor",id:"inactivetextcolor",level:3},{value:"initialValue",id:"initialvalue",level:3},{value:"itemHeight",id:"itemheight",level:3},{value:"items",id:"items",level:3},{value:"label",id:"label",level:3},{value:"labelProps",id:"labelprops",level:3},{value:"labelStyle",id:"labelstyle",level:3},{value:"numberOfVisibleRows",id:"numberofvisiblerows",level:3},{value:"onChange",id:"onchange",level:3},{value:"separatorsStyle",id:"separatorsstyle",level:3},{value:"style",id:"style",level:3},{value:"height is computed according to itemHeight * numberOfVisibleRows",id:"height-is-computed-according-to-itemheight--numberofvisiblerows",level:4},{value:"testID",id:"testid",level:3},{value:"textStyle",id:"textstyle",level:3}];function a(e){const i={a:"a",admonition:"admonition",br:"br",code:"code",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(i.p,{children:["A customizable WheelPicker component",(0,n.jsx)(i.br,{}),"\n",(0,n.jsx)(i.a,{href:"https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/WheelPickerScreen.tsx",children:"(code example)"})]}),"\n",(0,n.jsx)(i.admonition,{type:"note",children:(0,n.jsxs)(i.p,{children:["When using Android by default the FlatList will have ",(0,n.jsx)("code",{children:"maxToRenderPerBatch"})," prop set to ",(0,n.jsx)("code",{children:"items.length"})," to solve FlatList bug on Android, you can override it by passing your own ",(0,n.jsx)("code",{children:"flatListProps"})," with ",(0,n.jsx)("code",{children:"maxToRenderPerBatch"})," prop.",(0,n.jsx)("br",{}),"See the RN FlatList issue for more info: ",(0,n.jsx)(i.a,{href:"https://github.com/facebook/react-native/issues/15990",children:"https://github.com/facebook/react-native/issues/15990"})]})}),"\n",(0,n.jsx)("div",{style:{display:"flex",flexDirection:"row",overflowX:"auto",maxHeight:"500px",alignItems:"center"}}),"\n",(0,n.jsx)(i.h3,{id:"usage",children:"Usage"}),"\n",(0,n.jsx)(i.pre,{children:(0,n.jsx)(i.code,{className:"language-jsx",metastring:"live",live:!0,children:"<WheelPicker\n  items={[{label: 'Yes', value: 'yes'}, {label: 'No', value: 'no'}, {label: 'Maybe', value: 'maybe'}]}\n  initialValue={'yes'}\n  onChange={() => console.log('changed')}\n/>\n"})}),"\n",(0,n.jsx)(i.h2,{id:"api",children:"API"}),"\n",(0,n.jsx)(i.h3,{id:"activetextcolor",children:"activeTextColor"}),"\n",(0,n.jsxs)(i.p,{children:["Text color for the focused row\n",(0,n.jsx)(i.code,{children:"string "})]}),"\n",(0,n.jsx)(i.h3,{id:"align",children:"align"}),"\n",(0,n.jsxs)(i.p,{children:["Align the content to center, right ot left\n",(0,n.jsx)(i.code,{children:"WheelPickerAlign "})]}),"\n",(0,n.jsx)(i.h3,{id:"flatlistprops",children:"flatListProps"}),"\n",(0,n.jsxs)(i.p,{children:["Props to be sent to the FlatList.\n",(0,n.jsx)(i.code,{children:"FlatListProps "})]}),"\n",(0,n.jsx)(i.h3,{id:"inactivetextcolor",children:"inactiveTextColor"}),"\n",(0,n.jsxs)(i.p,{children:["Text color for other, non-focused rows\n",(0,n.jsx)(i.code,{children:"string "})]}),"\n",(0,n.jsx)(i.h3,{id:"initialvalue",children:"initialValue"}),"\n",(0,n.jsxs)(i.p,{children:["Initial value (uncontrolled)\n",(0,n.jsx)(i.code,{children:"number | string "})]}),"\n",(0,n.jsx)(i.h3,{id:"itemheight",children:"itemHeight"}),"\n",(0,n.jsxs)(i.p,{children:["Height of each item in the WheelPicker\n",(0,n.jsx)(i.code,{children:"number "})]}),"\n",(0,n.jsx)(i.h3,{id:"items",children:"items"}),"\n",(0,n.jsxs)(i.p,{children:["Data source for WheelPicker\n",(0,n.jsx)(i.code,{children:"WheelPickerItemProps[] "})]}),"\n",(0,n.jsx)(i.h3,{id:"label",children:"label"}),"\n",(0,n.jsxs)(i.p,{children:["Additional label to render next to the items text\n",(0,n.jsx)(i.code,{children:"string "})]}),"\n",(0,n.jsx)(i.h3,{id:"labelprops",children:"labelProps"}),"\n",(0,n.jsxs)(i.p,{children:["Additional label's props\n",(0,n.jsx)(i.code,{children:"TextProps "})]}),"\n",(0,n.jsx)(i.h3,{id:"labelstyle",children:"labelStyle"}),"\n",(0,n.jsxs)(i.p,{children:["Additional label's style\n",(0,n.jsx)(i.code,{children:"TextStyle "})]}),"\n",(0,n.jsx)(i.h3,{id:"numberofvisiblerows",children:"numberOfVisibleRows"}),"\n",(0,n.jsxs)(i.p,{children:["Number of rows visible\n",(0,n.jsx)(i.code,{children:"number "})]}),"\n",(0,n.jsx)(i.h3,{id:"onchange",children:"onChange"}),"\n",(0,n.jsxs)(i.p,{children:["Change item event callback\n",(0,n.jsx)(i.code,{children:"(item: string | number, index: number) => void "})]}),"\n",(0,n.jsx)(i.h3,{id:"separatorsstyle",children:"separatorsStyle"}),"\n",(0,n.jsxs)(i.p,{children:["Extra style for the separators\n",(0,n.jsx)(i.code,{children:"ViewStyle "})]}),"\n",(0,n.jsx)(i.h3,{id:"style",children:"style"}),"\n",(0,n.jsx)(i.h4,{id:"height-is-computed-according-to-itemheight--numberofvisiblerows",children:"height is computed according to itemHeight * numberOfVisibleRows"}),"\n",(0,n.jsxs)(i.p,{children:["Container's custom style\n",(0,n.jsx)(i.code,{children:"ViewStyle "})]}),"\n",(0,n.jsx)(i.h3,{id:"testid",children:"testID"}),"\n",(0,n.jsxs)(i.p,{children:["test identifier\n",(0,n.jsx)(i.code,{children:"string "})]}),"\n",(0,n.jsx)(i.h3,{id:"textstyle",children:"textStyle"}),"\n",(0,n.jsxs)(i.p,{children:["Row text custom style\n",(0,n.jsx)(i.code,{children:"TextStyle "})]})]})}function h(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,n.jsx)(i,{...e,children:(0,n.jsx)(a,{...e})}):a(e)}},28453:(e,i,t)=>{t.d(i,{R:()=>o,x:()=>r});var l=t(96540);const n={},s=l.createContext(n);function o(e){const i=l.useContext(s);return l.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function r(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),l.createElement(s.Provider,{value:i},e.children)}}}]);