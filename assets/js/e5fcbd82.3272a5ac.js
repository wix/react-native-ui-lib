"use strict";(self.webpackChunkuilib_docs=self.webpackChunkuilib_docs||[]).push([[9216],{91464:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>b,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"components/infra/KeyboardRegistry","title":"KeyboardRegistry","description":"used for registering keyboards and performing certain actions on the keyboards.","source":"@site/../docs/components/infra/KeyboardRegistry.md","sourceDirName":"components/infra","slug":"/components/infra/KeyboardRegistry","permalink":"/react-native-ui-lib/docs/components/infra/KeyboardRegistry","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/edit/main/website/../docs/components/infra/KeyboardRegistry.md","tags":[],"version":"current","frontMatter":{"id":"KeyboardRegistry","title":"KeyboardRegistry","sidebar_label":"KeyboardRegistry"},"sidebar":"componentsSidebar","previous":{"title":"KeyboardAwareInsetsView","permalink":"/react-native-ui-lib/docs/components/infra/KeyboardAwareInsetsView"},"next":{"title":"KeyboardTrackingView","permalink":"/react-native-ui-lib/docs/components/infra/KeyboardTrackingView"}}');var o=t(74848),s=t(28453);const i={id:"KeyboardRegistry",title:"KeyboardRegistry",sidebar_label:"KeyboardRegistry"},a=void 0,d={},c=[{value:"Usage",id:"usage",level:3},{value:"API",id:"api",level:2},{value:"addListener",id:"addlistener",level:3},{value:"getAllKeyboards",id:"getallkeyboards",level:3},{value:"getKeyboard",id:"getkeyboard",level:3},{value:"getKeyboards",id:"getkeyboards",level:3},{value:"notifyListeners",id:"notifylisteners",level:3},{value:"onItemSelected",id:"onitemselected",level:3},{value:"registerKeyboard",id:"registerkeyboard",level:3},{value:"removeListeners",id:"removelisteners",level:3},{value:"requestShowKeyboard",id:"requestshowkeyboard",level:3}];function l(e){const n={a:"a",br:"br",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["used for registering keyboards and performing certain actions on the keyboards.",(0,o.jsx)(n.br,{}),"\n",(0,o.jsx)(n.a,{href:"https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/nativeComponentScreens/keyboardAccessory/demoKeyboards.js",children:"(code example)"})]}),"\n",(0,o.jsx)("div",{style:{display:"flex",flexDirection:"row",overflowX:"auto",maxHeight:"500px",alignItems:"center"}}),"\n",(0,o.jsx)(n.h3,{id:"usage",children:"Usage"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",metastring:"live",live:!0,children:"KeyboardRegistry.registerKeyboard('keyboardName', () => KeyboardComponent)\n"})}),"\n",(0,o.jsx)(n.h2,{id:"api",children:"API"}),"\n",(0,o.jsx)(n.h3,{id:"addlistener",children:"addListener"}),"\n",(0,o.jsxs)(n.p,{children:["Add a listener for a callback.\nglobalID (string) - ID that includes the componentID and the event name\n(i.e. if componentID='kb1' globalID='kb1.onItemSelected')\ncallback (function) - the callback to be called when the said event happens\n",(0,o.jsx)(n.code,{children:"static function "})]}),"\n",(0,o.jsx)(n.h3,{id:"getallkeyboards",children:"getAllKeyboards"}),"\n",(0,o.jsxs)(n.p,{children:["Get all keyboards\n",(0,o.jsx)(n.code,{children:"static function "})]}),"\n",(0,o.jsx)(n.h3,{id:"getkeyboard",children:"getKeyboard"}),"\n",(0,o.jsxs)(n.p,{children:["Get a specific keyboard\ncomponentID (string) - the ID of the keyboard.\n",(0,o.jsx)(n.code,{children:"static function "})]}),"\n",(0,o.jsx)(n.h3,{id:"getkeyboards",children:"getKeyboards"}),"\n",(0,o.jsxs)(n.p,{children:["Get keyboards by IDs\ncomponentIDs (string[]) - the ID of the keyboard.\n",(0,o.jsx)(n.code,{children:"static function "})]}),"\n",(0,o.jsx)(n.h3,{id:"notifylisteners",children:"notifyListeners"}),"\n",(0,o.jsxs)(n.p,{children:["Notify that an event has occurred.\nglobalID (string) - ID that includes the componentID and the event name\n(i.e. if componentID='kb1' globalID='kb1.onItemSelected')\nargs (object) - data to be sent to the listener.\n",(0,o.jsx)(n.code,{children:"static function "})]}),"\n",(0,o.jsx)(n.h3,{id:"onitemselected",children:"onItemSelected"}),"\n",(0,o.jsxs)(n.p,{children:["Default event to be used for when an item on the keyboard has been pressed.\ncomponentID (string) - the ID of the keyboard.\nargs (object) - data to be sent to the listener.\n",(0,o.jsx)(n.code,{children:"static function "})]}),"\n",(0,o.jsx)(n.h3,{id:"registerkeyboard",children:"registerKeyboard"}),"\n",(0,o.jsxs)(n.p,{children:["Register a new keyboard.\ncomponentID (string) - the ID of the keyboard.\ngenerator (function) - a function for the creation of the keyboard.\nparams (object) - to be returned when using other methods (i.e. getKeyboards and getAllKeyboards).\n",(0,o.jsx)(n.code,{children:"static function "})]}),"\n",(0,o.jsx)(n.h3,{id:"removelisteners",children:"removeListeners"}),"\n",(0,o.jsxs)(n.p,{children:["Remove a listener for a callback.\nglobalID (string) - ID that includes the componentID and the event name\n(i.e. if componentID='kb1' globalID='kb1.onItemSelected')\n",(0,o.jsx)(n.code,{children:"static function "})]}),"\n",(0,o.jsx)(n.h3,{id:"requestshowkeyboard",children:"requestShowKeyboard"}),"\n",(0,o.jsxs)(n.p,{children:["Request to show the keyboard\ncomponentID (string) - the ID of the keyboard.\n",(0,o.jsx)(n.code,{children:"static function "})]})]})}function b(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var r=t(96540);const o={},s=r.createContext(o);function i(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);