"use strict";(self.webpackChunkuilib_docs=self.webpackChunkuilib_docs||[]).push([[9621],{76829:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>r,toc:()=>c});var s=i(74848),o=i(28453);const t={id:"Hint",title:"Hint",sidebar_label:"Hint"},l=void 0,r={id:"components/overlays/Hint",title:"Hint",description:"Hint component for displaying a tooltip over wrapped component",source:"@site/../docs/components/overlays/Hint.md",sourceDirName:"components/overlays",slug:"/components/overlays/Hint",permalink:"/react-native-ui-lib/docs/components/overlays/Hint",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/edit/main/website/../docs/components/overlays/Hint.md",tags:[],version:"current",frontMatter:{id:"Hint",title:"Hint",sidebar_label:"Hint"},sidebar:"tutorialSidebar",previous:{title:"FloatingButton",permalink:"/react-native-ui-lib/docs/components/overlays/FloatingButton"},next:{title:"Toast",permalink:"/react-native-ui-lib/docs/components/overlays/Toast"}},d={},c=[{value:"Usage",id:"usage",level:3},{value:"API",id:"api",level:2},{value:"backdropColor",id:"backdropcolor",level:3},{value:"borderRadius",id:"borderradius",level:3},{value:"color",id:"color",level:3},{value:"containerWidth",id:"containerwidth",level:3},{value:"customContent",id:"customcontent",level:3},{value:"edgeMargins",id:"edgemargins",level:3},{value:"enableShadow",id:"enableshadow",level:3},{value:"icon",id:"icon",level:3},{value:"iconStyle",id:"iconstyle",level:3},{value:"message",id:"message",level:3},{value:"messageStyle",id:"messagestyle",level:3},{value:"offset",id:"offset",level:3},{value:"onBackgroundPress",id:"onbackgroundpress",level:3},{value:"onPress",id:"onpress",level:3},{value:"position",id:"position",level:3},{value:"removePaddings",id:"removepaddings",level:3},{value:"style",id:"style",level:3},{value:"targetFrame",id:"targetframe",level:3},{value:"testID",id:"testid",level:3},{value:"useModal",id:"usemodal",level:3},{value:"useSideTip",id:"usesidetip",level:3},{value:"visible",id:"visible",level:3}];function a(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["Hint component for displaying a tooltip over wrapped component",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.a,{href:"https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/HintsScreen.tsx",children:"(code example)"})]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsx)(n.p,{children:"You can either wrap a component or pass a specific targetFrame"})}),"\n",(0,s.jsx)("div",{style:{display:"flex",flexDirection:"row",overflowX:"auto",maxHeight:"500px",alignItems:"center"},children:(0,s.jsx)("img",{style:{maxHeight:"420px"},src:"https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/Hint/Hint.gif?raw=true"})}),"\n",(0,s.jsx)(n.h3,{id:"usage",children:"Usage"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-jsx",metastring:"live",live:!0,children:"<Hint visible={isVisible} message={'Message goes here'} color={Colors.red30} onBackgroundPress={() => setVisible(false)}>\n  <Text>Text to hint</Text>\n</Hint>\n"})}),"\n",(0,s.jsx)(n.h2,{id:"api",children:"API"}),"\n",(0,s.jsx)(n.h3,{id:"backdropcolor",children:"backdropColor"}),"\n",(0,s.jsxs)(n.p,{children:["Color for background overlay (require onBackgroundPress)\n",(0,s.jsx)(n.code,{children:"string "})]}),"\n",(0,s.jsx)(n.h3,{id:"borderradius",children:"borderRadius"}),"\n",(0,s.jsxs)(n.p,{children:["The hint's border radius\n",(0,s.jsx)(n.code,{children:"number "})]}),"\n",(0,s.jsx)(n.h3,{id:"color",children:"color"}),"\n",(0,s.jsxs)(n.p,{children:["The hint background color\n",(0,s.jsx)(n.code,{children:"string "})]}),"\n",(0,s.jsx)(n.h3,{id:"containerwidth",children:"containerWidth"}),"\n",(0,s.jsxs)(n.p,{children:["The hint container width\n",(0,s.jsx)(n.code,{children:"number "})]}),"\n",(0,s.jsx)(n.h3,{id:"customcontent",children:"customContent"}),"\n",(0,s.jsxs)(n.p,{children:["Custom content element to render inside the hint container\n",(0,s.jsx)(n.code,{children:"JSX.Element "})]}),"\n",(0,s.jsx)(n.h3,{id:"edgemargins",children:"edgeMargins"}),"\n",(0,s.jsxs)(n.p,{children:["Hint margins from screen edges\n",(0,s.jsx)(n.code,{children:"number "})]}),"\n",(0,s.jsx)(n.h3,{id:"enableshadow",children:"enableShadow"}),"\n",(0,s.jsxs)(n.p,{children:["Enable shadow (for hint with white background only)\n",(0,s.jsx)(n.code,{children:"boolean "})]}),"\n",(0,s.jsx)(n.h3,{id:"icon",children:"icon"}),"\n",(0,s.jsxs)(n.p,{children:["Icon to show next to the hint's message\n",(0,s.jsx)(n.code,{children:"ImageSourcePropType "})]}),"\n",(0,s.jsx)(n.h3,{id:"iconstyle",children:"iconStyle"}),"\n",(0,s.jsxs)(n.p,{children:["The icon's style\n",(0,s.jsx)(n.code,{children:"ImageStyle "})]}),"\n",(0,s.jsx)(n.h3,{id:"message",children:"message"}),"\n",(0,s.jsxs)(n.p,{children:["The hint message\n",(0,s.jsx)(n.code,{children:"string | ReactElement "})]}),"\n",(0,s.jsx)(n.h3,{id:"messagestyle",children:"messageStyle"}),"\n",(0,s.jsxs)(n.p,{children:["The hint message custom style\n",(0,s.jsx)(n.code,{children:"TextStyle "})]}),"\n",(0,s.jsx)(n.h3,{id:"offset",children:"offset"}),"\n",(0,s.jsxs)(n.p,{children:["Hint offset from target\n",(0,s.jsx)(n.code,{children:"number "})]}),"\n",(0,s.jsx)(n.h3,{id:"onbackgroundpress",children:"onBackgroundPress"}),"\n",(0,s.jsxs)(n.p,{children:["Callback for the background press\n",(0,s.jsx)(n.code,{children:"(event: GestureResponderEvent) => void "})]}),"\n",(0,s.jsx)(n.h3,{id:"onpress",children:"onPress"}),"\n",(0,s.jsxs)(n.p,{children:["Callback for Hint press\n",(0,s.jsx)(n.code,{children:"() => void "})]}),"\n",(0,s.jsx)(n.h3,{id:"position",children:"position"}),"\n",(0,s.jsxs)(n.p,{children:["The hint's position\n",(0,s.jsx)(n.code,{children:"TOP | BOTTOM "})]}),"\n",(0,s.jsx)(n.h3,{id:"removepaddings",children:"removePaddings"}),"\n",(0,s.jsxs)(n.p,{children:["Remove all hint's paddings\n",(0,s.jsx)(n.code,{children:"boolean "})]}),"\n",(0,s.jsx)(n.h3,{id:"style",children:"style"}),"\n",(0,s.jsxs)(n.p,{children:["Additional styling\n",(0,s.jsx)(n.code,{children:"ViewStyle "})]}),"\n",(0,s.jsx)(n.h3,{id:"targetframe",children:"targetFrame"}),"\n",(0,s.jsxs)(n.p,{children:["Provide custom target position instead of wrapping a child\n",(0,s.jsx)(n.code,{children:"{x?: number, y?: number, width?: number, height?: number} "})]}),"\n",(0,s.jsx)(n.h3,{id:"testid",children:"testID"}),"\n",(0,s.jsxs)(n.p,{children:["The hint's test identifier\n",(0,s.jsx)(n.code,{children:"string "})]}),"\n",(0,s.jsx)(n.h3,{id:"usemodal",children:"useModal"}),"\n",(0,s.jsxs)(n.p,{children:["Open the hint using a Modal component\n",(0,s.jsx)(n.code,{children:"boolean "})]}),"\n",(0,s.jsx)(n.h3,{id:"usesidetip",children:"useSideTip"}),"\n",(0,s.jsxs)(n.p,{children:["Show side tips instead of the middle tip\n",(0,s.jsx)(n.code,{children:"boolean "})]}),"\n",(0,s.jsx)(n.h3,{id:"visible",children:"visible"}),"\n",(0,s.jsxs)(n.p,{children:["Control the visibility of the hint\n",(0,s.jsx)(n.code,{children:"boolean "})]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>r});var s=i(96540);const o={},t=s.createContext(o);function l(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);