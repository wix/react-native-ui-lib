"use strict";(self.webpackChunkuilib_docs=self.webpackChunkuilib_docs||[]).push([[616],{2610:(e,i,t)=>{t.r(i),t.d(i,{assets:()=>d,contentTitle:()=>r,default:()=>m,frontMatter:()=>l,metadata:()=>n,toc:()=>s});const n=JSON.parse('{"id":"components/form/DateTimePicker","title":"DateTimePicker","description":"Date and Time Picker Component that wraps RNDateTimePicker for date and time modes. See//github.com/react-native-community/react-native-datetimepicker#react-native-datetimepicker","source":"@site/../docs/components/form/DateTimePicker.md","sourceDirName":"components/form","slug":"/components/form/DateTimePicker","permalink":"/react-native-ui-lib/docs/components/form/DateTimePicker","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/edit/main/website/../docs/components/form/DateTimePicker.md","tags":[],"version":"current","frontMatter":{"id":"DateTimePicker","title":"DateTimePicker","sidebar_label":"DateTimePicker"},"sidebar":"componentsSidebar","previous":{"title":"ColorSwatch","permalink":"/react-native-ui-lib/docs/components/form/ColorSwatch"},"next":{"title":"MaskedInput","permalink":"/react-native-ui-lib/docs/components/form/MaskedInput"}}');var a=t(74848),o=t(28453);const l={id:"DateTimePicker",title:"DateTimePicker",sidebar_label:"DateTimePicker"},r=void 0,d={},s=[{value:"Usage",id:"usage",level:3},{value:"API",id:"api",level:2},{value:"cancelButtonProps",id:"cancelbuttonprops",level:3},{value:"confirmButtonProps",id:"confirmbuttonprops",level:3},{value:"dateTimeFormatter",id:"datetimeformatter",level:3},{value:"dialogProps",id:"dialogprops",level:3},{value:"display",id:"display",level:3},{value:"editable",id:"editable",level:3},{value:"headerStyle",id:"headerstyle",level:3},{value:"is24Hour",id:"is24hour",level:3},{value:"Android only",id:"android-only",level:4},{value:"locale",id:"locale",level:3},{value:"iOS only",id:"ios-only",level:4},{value:"maximumDate",id:"maximumdate",level:3},{value:"minimumDate",id:"minimumdate",level:3},{value:"minuteInterval",id:"minuteinterval",level:3},{value:"iOS only",id:"ios-only-1",level:4},{value:"mode",id:"mode",level:3},{value:"onChange",id:"onchange",level:3},{value:"renderInput",id:"renderinput",level:3},{value:"themeVariant",id:"themevariant",level:3},{value:"timeZoneOffsetInMinutes",id:"timezoneoffsetinminutes",level:3},{value:"iOS only",id:"ios-only-2",level:4},{value:"value",id:"value",level:3},{value:"Defaults to device&#39;s date and time",id:"defaults-to-devices-date-and-time",level:4}];function c(e){const i={a:"a",admonition:"admonition",br:"br",code:"code",h2:"h2",h3:"h3",h4:"h4",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(i.p,{children:["Date and Time Picker Component that wraps RNDateTimePicker for date and time modes. See: ",(0,a.jsx)(i.a,{href:"https://github.com/react-native-community/react-native-datetimepicker#react-native-datetimepicker",children:"https://github.com/react-native-community/react-native-datetimepicker#react-native-datetimepicker"}),(0,a.jsx)(i.br,{}),"\n",(0,a.jsx)(i.a,{href:"https://github.com/wix/react-native-ui-lib/blob/master/demo/src/screens/componentScreens/DateTimePickerScreen.tsx",children:"(code example)"})]}),"\n",(0,a.jsx)(i.admonition,{type:"info",children:(0,a.jsxs)(i.p,{children:["This component extends ",(0,a.jsx)(i.strong,{children:(0,a.jsx)(i.a,{href:"/docs/components/form/TextField",children:"TextField"})})," props."]})}),"\n",(0,a.jsx)(i.admonition,{type:"note",children:(0,a.jsx)(i.p,{children:"DateTimePicker uses a native library. You MUST add and link the native library to both iOS and Android projects"})}),"\n",(0,a.jsx)("div",{style:{display:"flex",flexDirection:"row",overflowX:"auto",maxHeight:"500px",alignItems:"center"},children:(0,a.jsx)("img",{style:{maxHeight:"420px"},src:"https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/DateTimePicker/DateTimePicker_iOS.gif?raw=true, https://github.com/wix/react-native-ui-lib/blob/master/demo/showcase/DateTimePicker/DateTimePicker_Android.gif?raw=true"})}),"\n",(0,a.jsx)(i.h3,{id:"usage",children:"Usage"}),"\n",(0,a.jsx)(i.pre,{children:(0,a.jsx)(i.code,{className:"language-jsx",metastring:"live",live:!0,children:"<DateTimePicker title={'Select time'} placeholder={'Placeholder'} mode={'time'}/>\n"})}),"\n",(0,a.jsx)(i.h2,{id:"api",children:"API"}),"\n",(0,a.jsx)(i.h3,{id:"cancelbuttonprops",children:"cancelButtonProps"}),"\n",(0,a.jsxs)(i.p,{children:["Cancel button props\n",(0,a.jsx)(i.code,{children:"ButtonProps "})]}),"\n",(0,a.jsx)(i.h3,{id:"confirmbuttonprops",children:"confirmButtonProps"}),"\n",(0,a.jsxs)(i.p,{children:["Confirm button props\n",(0,a.jsx)(i.code,{children:"ButtonProps "})]}),"\n",(0,a.jsx)(i.h3,{id:"datetimeformatter",children:"dateTimeFormatter"}),"\n",(0,a.jsxs)(i.p,{children:["A callback function to format the time or date\n",(0,a.jsx)(i.code,{children:"(value: Date, mode: DateTimePickerMode) => string "})]}),"\n",(0,a.jsx)(i.h3,{id:"dialogprops",children:"dialogProps"}),"\n",(0,a.jsxs)(i.p,{children:["Props to pass the Dialog component\n",(0,a.jsx)(i.code,{children:"DialogProps "})]}),"\n",(0,a.jsx)(i.h3,{id:"display",children:"display"}),"\n",(0,a.jsxs)(i.p,{children:["Defines the visual display of the picker. The default value is 'spinner' on iOS and 'default' on Android. The list of all possible values are default, spinner, calendar or clock on Android and default, spinner, compact or inline for iOS. Full list can be found here: ",(0,a.jsx)(i.a,{href:"https://github.com/react-native-datetimepicker/datetimepicker#display-optional",children:"https://github.com/react-native-datetimepicker/datetimepicker#display-optional"}),"\n",(0,a.jsx)(i.code,{children:"string "})]}),"\n",(0,a.jsx)(i.h3,{id:"editable",children:"editable"}),"\n",(0,a.jsxs)(i.p,{children:["Should this input be editable or disabled\n",(0,a.jsx)(i.code,{children:"boolean "})]}),"\n",(0,a.jsx)(i.h3,{id:"headerstyle",children:"headerStyle"}),"\n",(0,a.jsxs)(i.p,{children:["Style to apply to the iOS dialog header\n",(0,a.jsx)(i.code,{children:"ViewStyle "})]}),"\n",(0,a.jsx)(i.h3,{id:"is24hour",children:"is24Hour"}),"\n",(0,a.jsx)(i.h4,{id:"android-only",children:"Android only"}),"\n",(0,a.jsxs)(i.p,{children:["Allows changing of the time picker to a 24 hour format\n",(0,a.jsx)(i.code,{children:"boolean "})]}),"\n",(0,a.jsx)(i.h3,{id:"locale",children:"locale"}),"\n",(0,a.jsx)(i.h4,{id:"ios-only",children:"iOS only"}),"\n",(0,a.jsxs)(i.p,{children:["Allows changing of the locale of the component\n",(0,a.jsx)(i.code,{children:"string "})]}),"\n",(0,a.jsx)(i.h3,{id:"maximumdate",children:"maximumDate"}),"\n",(0,a.jsxs)(i.p,{children:["The maximum date or time value to use\n",(0,a.jsx)(i.code,{children:"Date "})]}),"\n",(0,a.jsx)(i.h3,{id:"minimumdate",children:"minimumDate"}),"\n",(0,a.jsxs)(i.p,{children:["The minimum date or time value to use\n",(0,a.jsx)(i.code,{children:"Date "})]}),"\n",(0,a.jsx)(i.h3,{id:"minuteinterval",children:"minuteInterval"}),"\n",(0,a.jsx)(i.h4,{id:"ios-only-1",children:"iOS only"}),"\n",(0,a.jsxs)(i.p,{children:["The interval at which minutes can be selected. Possible values are: 1, 2, 3, 4, 5, 6, 10, 12, 15, 20, 30\n",(0,a.jsx)(i.code,{children:"number "})]}),"\n",(0,a.jsx)(i.h3,{id:"mode",children:"mode"}),"\n",(0,a.jsxs)(i.p,{children:["The type of picker to display ('date' or 'time')\n",(0,a.jsx)(i.code,{children:"DATE | TIME "})]}),"\n",(0,a.jsx)(i.h3,{id:"onchange",children:"onChange"}),"\n",(0,a.jsxs)(i.p,{children:["Called when the date/time change\n",(0,a.jsx)(i.code,{children:"() => Date "})]}),"\n",(0,a.jsx)(i.h3,{id:"renderinput",children:"renderInput"}),"\n",(0,a.jsxs)(i.p,{children:["Render custom input\n",(0,a.jsx)(i.code,{children:"JSX.Element "})]}),"\n",(0,a.jsx)(i.h3,{id:"themevariant",children:"themeVariant"}),"\n",(0,a.jsxs)(i.p,{children:["Override system theme variant (dark or light mode) used by the date picker\n",(0,a.jsx)(i.code,{children:"LIGHT | DARK "})]}),"\n",(0,a.jsx)(i.h3,{id:"timezoneoffsetinminutes",children:"timeZoneOffsetInMinutes"}),"\n",(0,a.jsx)(i.h4,{id:"ios-only-2",children:"iOS only"}),"\n",(0,a.jsxs)(i.p,{children:["Allows changing of the timeZone of the date picker. By default it uses the device's time zone\n",(0,a.jsx)(i.code,{children:"number "})]}),"\n",(0,a.jsx)(i.h3,{id:"value",children:"value"}),"\n",(0,a.jsx)(i.h4,{id:"defaults-to-devices-date-and-time",children:"Defaults to device's date and time"}),"\n",(0,a.jsxs)(i.p,{children:["The initial value to set the picker to\n",(0,a.jsx)(i.code,{children:"Date "})]})]})}function m(e={}){const{wrapper:i}={...(0,o.R)(),...e.components};return i?(0,a.jsx)(i,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},28453:(e,i,t)=>{t.d(i,{R:()=>l,x:()=>r});var n=t(96540);const a={},o=n.createContext(a);function l(e){const i=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function r(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),n.createElement(o.Provider,{value:i},e.children)}}}]);